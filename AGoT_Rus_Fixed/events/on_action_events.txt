####################################
# Reserved IDs: 0-999, 40000 - 44999
####################################

namespace = diploresponse

#10 - Killer discovered after murder - consequences.
#11 - Attacker discovered after failed murder - consequences.
#20 - ADULTERY DISCOVERED
#150 - Avoided imprison, declared independence
#151 - Was imprisoned
#152  - on_avoided_imprison_fled_country
#153 - on_released_from_prison
#154 - on_executed
#155 - on_exiled
#202 - 300 #diploresponse events
#500 - On-action event: Royal Marriage Aid Duty
#295 - EMBARGO EVENTS
#660 - on_forced_consort
#63103 - Elective Gavelkind Succession
#45343 - Realm informed of gender succession law change
#45344 - Inform player fired from council
#45340 - AGOT on death event
#45341 - AGOT on death/abdication event #RULER ONLY ACTIONS
#45342 - Universal on_execution event


# Modified by Cabe to remove Kingsguard trait on exile

# ID 1 and 2 are empty dummy events that are used by the message system to spawn messages
# that should be displayed as events, their descriptions are filled in by the message system
letter_event = {
	id = 1

	is_triggered_only = yes

	desc = "A"
}

character_event = {
	id = 2

	is_triggered_only = yes

	desc = "B"
}

# Killer discovered after murder - consequences.
# (Should be fired for the killer just before the victim dies. Victim is event_target:target_victim.)
character_event = {
	id = 10
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		OR = {
			has_character_flag = murder_event_override
			AND = {
				OR = {
					has_plot = plot_kill_character
					has_plot = plot_kill_spouse
				}
				plot_target_char = { character = FROM }
			}
			any_backed_character = {
				OR = {
					has_plot = plot_kill_character
					has_plot = plot_kill_spouse
				}
				plot_target_char = { character = FROM }
			}
		}
	}
	
	immediate = {
		clr_character_flag = murder_event_override
		clr_character_flag = filthy_murderer
		set_character_flag = filthy_murderer
		
		if = {
			limit = { has_cutthroat_religion_trigger = no }
			change_variable = { which = "dishonorable" value = 10 } 
			character_event = { id = maintenance.3 }
		}	
		
		excommunication_chance_effect = yes #excommunication chance
		
		event_target:target_victim = { save_event_target_as = kinslayer_target } #check for kinslayer
		add_kinslayer_trait_effect = yes
			
		if = {
			limit = { NOT = { has_character_modifier = known_murderer } }
			add_character_modifier = {
				name = known_murderer
				years = 50
			}
		}
		
		event_target:target_victim = {
			if = {
				limit = {
					mother = {
						NOT = { character = ROOT }
						OR = {
							NOT = { is_mother = ROOT }
							opinion = { who = PREV value = -15 }
						}
					}
				}
				mother = {
					opinion = {
						who = ROOT
						modifier = opinion_vengeance
						#modifier = opinion_killed_close_kin
						#months = 120
					}
					add_rival = ROOT
				}
			}	
			if = {
				limit = {
					father = {
						NOT = { character = ROOT }
						OR = {
							NOT = { is_father = ROOT }
							opinion = { who = PREV value = -15 }
						}
					}
				}
				father = {
					opinion = {
						who = ROOT
						modifier = opinion_vengeance
						#modifier = opinion_killed_close_kin
						#months = 120
					}
					add_rival = ROOT
				}
			}	
			any_child = {
				limit = {
					NOT = { character = ROOT }
					OR = {
						NOT = { is_child_of = ROOT }
						opinion = { who = PREV value = -15 }
					}
				}
				opinion = {
					who = ROOT
					modifier = opinion_vengeance
					#modifier = opinion_killed_close_kin
					#months = 120
				}
				add_rival = ROOT
			}
			any_sibling = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					opinion = { who = PREV value = -15 }
				}
				opinion = {
					who = ROOT
					modifier = opinion_vengeance
					#modifier = opinion_killed_close_kin
					#months = 120
				}
			}
			any_spouse = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					opinion = { who = PREV value = -15 }
				}
				opinion = {
					who = ROOT
					modifier = opinion_vengeance
				}				
			}
			any_dynasty_member = {
				limit = {				
					is_alive = yes
					is_close_relative = PREV
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					NOT = { is_married = PREV }
					opinion = { who = PREV value = -15 }					
				}
				opinion = {
					who = ROOT
					modifier = opinion_vengeance
				}				
			}
			any_friend = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					NOT = { is_married = PREV }
					NOT = { dynasty = PREV }
					NOT = { trait = incapable_dragon }
				}
				opinion = {
					who = ROOT
					modifier = opinion_vengeance
				}
			}
			any_liege = {
				limit = {
					OR = {
						trait = just
						opinion = { who = PREV value = -20 }
					}
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					NOT = { is_married = PREV }
					NOT = { dynasty = PREV }
					NOT = { is_friend = PREV }
				}
				opinion = {
					who = ROOT
					modifier = killed_vassal
					months = 60
				}				
			}		
			if = { #Loyal vassals
				limit = { is_playable = yes }
				any_realm_lord = {
					limit = { 
						opinion = { who = PREV value = 20 }				
						NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_vengeance } }
					}	
					opinion = {
						who = ROOT
						modifier = opinion_murdered_my_liege
						months = 120
					}				
				}
			}	
			any_rival = {
				limit = {
					NOT = { trait = honorable }
					NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_vengeance } }
				}
				opinion = {
					who = ROOT
					modifier = opinion_killed_my_rival
				}
			}
			religion_head = {
				opinion = {
					who = ROOT
					modifier = opinion_dishonorable
					months = 60
				}
			}
			if = {
				limit = { religion_head = { character = PREV } }
				current_heir = {
					opinion = { who = ROOT modifier = opinion_murdered_religion_head }
				}
				ROOT = {
					any_courtier = {
						limit = { 
							religion = event_target:target_victim
							is_ruler = no
							controls_religion = no
							NOT = { trait = cynical }
							NAND = {
								NOT = { opinion = { who = event_target:target_victim value = 0 } }
								NOT = { trait = zealous }
							}
						}
						opinion = { who = ROOT modifier = opinion_murdered_religion_head }
					}
					any_realm_lord = {
						limit = { 
							religion = event_target:target_victim
							controls_religion = no
							NOT = { trait = cynical }
							NAND = {
								NOT = { opinion = { who = event_target:target_victim value = 0 } }
								NOT = { trait = zealous }
							}
						}
						opinion = { who = ROOT modifier = opinion_murdered_religion_head }
					}
				}
				any_playable_ruler = {
					limit = { 
						religion = event_target:target_victim
						controls_religion = no
						NOT = { is_liege_or_above = ROOT }
						OR = {
							trait = zealous
							same_liege = ROOT
							is_vassal_or_below = ROOT
							independent = yes
							higher_tier_than = DUKE
						}
						NOT = { trait = cynical }
					}
					opinion = { who = ROOT modifier = opinion_murdered_religion_head }
				}
				if = {
					limit = { religion = event_target:target_victim }
					piety = -400
				}	
			}
		}
	}
}


# Attacker discovered after failed murder - consequences.
# (Should be fired for the attacker. The victim is event_target:target_victim.)
character_event = {
	id = 11
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		OR = {
			has_character_flag = murder_event_override
			AND = {
				OR = {
					has_plot = plot_kill_character
					has_plot = plot_kill_spouse
				}
				plot_target_char = { character = FROM }
			}
			any_backed_character = {
				OR = {
					has_plot = plot_kill_character
					has_plot = plot_kill_spouse
				}
				plot_target_char = { character = FROM }
			}
		}
	}
	
	immediate = {
		clr_character_flag = murder_event_override
		clr_character_flag = filthy_murderer
		set_character_flag = filthy_murderer
		
		change_variable = { which = "dishonorable" value = 10 } 
		character_event = { id = maintenance.3 } #dishonorable trait
		
		event_target:target_victim = {
			opinion = {
				who = ROOT
				modifier = attempted_murder
				months = 600
			}
							
			if = {
				limit = {
					mother = {
						NOT = { character = ROOT }
						OR = {
							NOT = { is_mother = ROOT }
							opinion = { who = PREV value = -15 }
						}	
					}
				}
				mother = {
					opinion = {
						who = ROOT
						modifier = attempted_murder_of_close_kin
						months = 120
					}
				}
			}
			if = {
				limit = {
					father = {
						NOT = { character = ROOT }
						OR = {
							NOT = { is_father = ROOT }
							opinion = { who = PREV value = -15 }
						}
					}
				}
				father = {
					opinion = {
						who = ROOT
						modifier = attempted_murder_of_close_kin
						months = 120
					}
				}
			}
			
			any_child = {
				limit = {
					NOT = { character = ROOT }
					OR = {
						NOT = { is_child_of = ROOT }
						opinion = { who = PREV value = -15 }
					}
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_close_kin
					months = 120
				}
			}
			
			any_sibling = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					opinion = { who = PREV value = -15 }
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_close_kin
					months = 60
				}
			}
			
			any_spouse = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					opinion = { who = PREV value = -15 }
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_close_kin
					months = 120
				}				
			}
			any_dynasty_member = {
				limit = {				
					is_alive = yes
					is_close_relative = PREV
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					NOT = { is_married = PREV }
					opinion = { who = PREV value = -15 }					
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_close_kin
					months = 120
				}
			}		
			if = { #Loyal vassals
				limit = { is_playable = yes }
				any_realm_lord = {
					limit = { 
						opinion = { who = PREV value = 20 }				
						NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_vengeance } }
					}	
					opinion = {
						who = ROOT
						modifier = attempted_murder_of_liege
						months = 120
					}				
				}
			}
			any_liege = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = PREV }
					NOT = { is_father = PREV }
					NOT = { is_mother = PREV }
					NOT = { sibling = PREV }
					NOT = { is_married = PREV }
					NOT = { dynasty = PREV }
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_vassal
					months = 60
				}
			}			
		}
	}
}

##########################################
# ADULTERY DISCOVERED
##########################################
# Fired for an unfaithful spouse who was discovered cheating
# Do not fire for both adulterers!
# Adulterer: event_target:target_adulterer
###########################################

character_event = {
	id = 20
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = { NOT = { has_character_modifier = adultery_discovered } }
	
	immediate = {
		add_character_modifier = { name = adultery_discovered duration = 3 hidden = yes } #prevents event looping
		if = {
			limit = {
				OR = {
					is_married =  event_target:target_adulterer
					is_consort = event_target:target_adulterer
				}	
			}
			break = yes
		}
		if = {
			limit = { 
				ai = no 
				is_married = FROM
			}
			event_target:target_adulterer = {
				ROOT = {
					chronicle = {
						entry = CHRONICLE_AFFAIR_DISCOVERED_WIFE
						portrait = [Prev.GetID]
					}
				}	
			}	
		}	
		if = {
			limit = { 
				FROM = { 
					ai = no 
					is_married = ROOT
				} 
			}			
			event_target:target_adulterer = {
				FROM = {
					chronicle = {
						entry = CHRONICLE_AFFAIR_DISCOVERED_HUSBAND
						portrait = [Root.GetID]
					}
				}	
			}	
		}
		if = {
			limit = { 
				ai = no 
				event_target:target_adulterer = { is_married = FROMFROM }
			}
			chronicle = {
				entry = CHRONICLE_AFFAIR_DISCOVERED_SEDUCER
				portrait = [From.GetID]
			}
		}
		if = {
			limit = {
				has_nickname = no
				NOT = { culture = summer_islander }
				NOT = { is_drowned_god_religion_trigger = yes }
				NOT = { culture = dothraki }
			}
			random = {
				chance = 1
				give_nickname = nick_the_unchaste
			}	
		}
		
		if = {
			limit = {
				religion = the_seven
				OR = {
					AND = {
						is_ruler = yes
						is_theocracy = yes
					}
					trait = septon
					trait = septa
				}
			}
			add_character_modifier = {
				name = adulterous_priest
				years = 20
			}
			piety = -100
		}
		
		event_target:target_adulterer = {
			ROOT = {
				if = {
					limit = {
						is_female = yes
						PREV = { is_female = no } # No one cares if two women fool around
					}
					set_character_flag = flag_no_cuckoo
					if = {
						limit = {
							is_married = yes
							has_nickname = no
						}
						random = {
							chance = 1
							give_nickname = nick_the_unfaithful
						}	
					}
					
					if = {
						limit = {
							is_pregnant = yes
							father_of_unborn_known = no
							father_of_unborn = {
								character = PREV
							}
						}
						father_of_unborn_known = yes
					}
					
					if = {
						limit = {
							age_diff = {
								who = PREV
								years = 25
							}
							is_older_than = PREV
							NOT = { has_character_modifier = cradle_robber }
						}
						add_character_modifier = {
							name = cradle_robber
							years = 5
						}
					}
					
					any_spouse = {
						limit = { PREVPREV = { is_female = no } }
						opinion = {
							who = PREV
							modifier = opinion_unfaithful_wife
							months = 120
						}
						opinion = {
							who = PREVPREV
							modifier = opinion_cuckolded
							months = 120
						}
						if = {
							limit = {
								NOT = { is_rival = PREVPREV }
								NOT = { is_lover = PREVPREV }
								NOT = { is_friend = PREVPREV }
								NOT = { trait = kind }
								NOT = { trait = content }
							}
							add_rival = PREVPREV
						}
						if = {
							limit = { is_lover = PREV }
							remove_lover = PREV
						}
						if = {
							limit = { is_lover = PREVPREV }
							remove_lover = PREVPREV
						}
						if = {
							limit = { is_friend = PREVPREV }
							remove_friend = PREVPREV
						}
						#AI might imprison the pair
						if = {
							limit = {
								is_ruler = yes
								ai = yes							
							}
							if = {
								limit = { 
									is_vassal_or_below = PREVPREV
									PREVPREV = { prisoner = no }
								}
								PREVPREV = { save_event_target_as = imprison_target }
								character_event = { id = imprisoned.1 }
							}	
							if = {
								limit = { 
									is_vassal_or_below = PREV
									PREV = { prisoner = no }
								}
								PREV = { save_event_target_as = imprison_target }
								character_event = { id = imprisoned.1 days = 1 }
							}
						}
					}
					any_consort = {
						limit = { PREVPREV = { is_female = no } }
						opinion = {
							who = PREV
							modifier = opinion_unfaithful_consort
						}
						opinion = {
							who = PREVPREV
							modifier = opinion_slept_with_my_consort
						}
						if = {
							limit = {
								NOT = { is_rival = PREVPREV }
								NOT = { is_lover = PREVPREV }
								NOT = { is_friend = PREVPREV }
								NOT = { trait = kind }
								NOT = { trait = content }
							}
							add_rival = PREVPREV
						}
						if = {
							limit = { is_lover = PREV }
							remove_lover = PREV
						}
						if = {
							limit = { is_lover = PREVPREV }
							remove_lover = PREVPREV
						}
						if = {
							limit = { is_friend = PREVPREV }
							remove_friend = PREVPREV
						}
						#AI might imprison the pair
						if = {
							limit = {
								is_ruler = yes
								ai = yes							
							}
							if = {
								limit = { 
									is_vassal_or_below = PREVPREV
									PREVPREV = { prisoner = no }
								}
								PREVPREV = { save_event_target_as = imprison_target }
								character_event = { id = imprisoned.1 }
							}	
							if = {
								limit = { 
									is_vassal_or_below = PREV
									PREV = { prisoner = no }
								}
								PREV = { save_event_target_as = imprison_target }
								character_event = { id = imprisoned.1 days = 1 }
							}
						}
					}
					
					if = {
						limit = {
							is_close_relative = PREV
							NOT = { practices_incest_trigger = yes }
						}
						add_character_modifier = {
							name = incestuous_adulteress
							years = 20
						}
					}
					else = {
						add_character_modifier = {
							name = adulteress
							years = 10
						}
					}
				}
				
				if = {
					limit = { is_female = no }
					
					any_spouse = {
						opinion = {
							who = PREV
							modifier = opinion_unfaithful_husband
							months = 120
						}
						opinion = {
							who = PREVPREV
							modifier = slut_seductress
							months = 120
						}
						if = {
							limit = {
								NOT = { is_rival = PREVPREV }
								NOT = { is_lover = PREVPREV }
								NOT = { is_friend = PREVPREV }
								NOT = { trait = kind }
								NOT = { trait = content }
							}
							add_rival = PREVPREV
						}
						
						if = {
							limit = { is_lover = PREV }
							remove_lover = PREV
						}
						if = {
							limit = { is_lover = PREVPREV }
							remove_lover = PREVPREV
						}
						if = {
							limit = { is_friend = PREVPREV }
							remove_friend = PREVPREV
						}
						#AI might imprison the pair
						if = {
							limit = {
								is_ruler = yes
								ai = yes							
							}
							if = {
								limit = { 
									is_vassal_or_below = PREVPREV
									PREVPREV = { prisoner = no }
								}
								PREVPREV = { save_event_target_as = imprison_target }
								character_event = { id = imprisoned.1 }
							}	
							if = {
								limit = { 
									is_vassal_or_below = PREV
									PREV = { prisoner = no }
								}
								PREV = { save_event_target_as = imprison_target }
								character_event = { id = imprisoned.1 days = 1 }
							}
						}
					}
					
					if = {
						limit = { same_sex = PREV }
						add_character_modifier = {
							name = known_sodomite
							years = 20
						}
					}
					
					if = {
						limit = {
							is_close_relative = PREV
							NOT = { practices_incest_trigger = yes }
						}
						add_character_modifier = {
							name = incestuous_adulterer
							years = 20
						}
					}
					else_if = {
						limit = {
							is_married = yes
						}
						if = {
							limit = {
								NOT = { culture = dothraki }
								NOT = { culture = summer_islander }
							}
							add_character_modifier = {
								name = adulterer
								years = 10
							}
						}
					}
					#Broken Vows
					if = {
						limit = { 
							trait = kingsguard 
							NOT = { same_sex = PREV }
						}
						save_event_target_as = KG_has_the_lover
						e_iron_throne = {
							holder_scope = {
								if = {
									limit = {
										NOT = { war_with = ROOT }
									}
									character_event = { id = kingsguard.69 }
								}	
							}
						}
					}
				}
			}
			
			# Fire this event for the adulterer too
			if = {
				limit = { is_alive = yes }
				ROOT = { save_event_target_as = target_adulterer }
				character_event = { id = 20 days = 1 }
			}
			
#			log = "20: Adultery discovered between [Root.GetTitledName] and [This.GetTitledName]!"
		}
	}
}

# On-action event: Avoided imprison, declared independence
character_event = {
	id = 150
	desc = "EVTDESC50050"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 
	
	immediate = {
		clr_character_flag = captured_in_battle
		clr_character_flag = lost_trial_by_combat
		clr_character_flag = demmanded_first_trial_by_combat
		clr_character_flag = choosing_champion
		clr_character_flag = select_champion
		clr_character_flag = kidnapped_by_plot
		if = {
			limit = {
				FROM = {
					any_realm_character = {
						NOT = { character = ROOT }
						is_liege_or_above = PREV
						has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
					}
				}
			}
			if = {
				limit = { trait = deserter }
				FROM = { set_character_flag = no_tyranny }
			}			
			else_if = {
				limit = { 
					is_ruler = yes
				}
				FROM = {
					set_character_flag = extra_tyranny_10
					set_character_flag = extra_fear_5			
				}
			}
		}	
		if = {
			limit = {
				FROM = {
					NOR = {
						is_adult = no
						is_incapable = yes
						prisoner = yes
					}
				}	
			}
			random = {
				chance = 25
				add_rival = FROM
			}
		}	
	}

	option = {
		name = "EVTOPTA50050"
		ai_chance = {
			factor = 95
			modifier = {
				factor = 0
				tier = BARON
				NOT = {
					relative_power = {
						who = FROM
						power = 0.5
					}
				}	
			}
			modifier = {
				factor = 0.2
				NOT = {
					relative_power = {
						who = FROM
						power = 0.1
					}
				}	
			}
			modifier = {
				factor = 0.3
				NOT = {
					relative_power = {
						who = FROM
						power = 0.25
					}
				}	
			}	
			modifier = {
				factor = 2
				relative_power = {
					who = FROM
					power = 0.5
				}
			}		
			modifier = {
				factor = 2
				trait = ambitious
			}	
			modifier = {
				factor = 2
				trait = brave
			}
			modifier = {
				factor = 2
				trait = wroth
			}
			modifier = {
				factor = 2
				trait = zealous
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
		}		
		if = {
			limit = { 
				NOT = { war_with = FROM } 
				liege = { character = FROM }
				liege_before_war = { character = FROM }
			}	
			if = {
				limit = { FROM = { primary_title = { ROOT = { has_claim = PREV } } } }
				FROM = {
					primary_title = {
						reverse_war = {
							target = ROOT
							casus_belli = claim_on_liege
						}
					}	
				}
			}	
			if = {
				limit = { NOT = { FROM = { primary_title = { ROOT = { has_claim = PREV } } } } }
				FROM = {
					reverse_war = {
						target = ROOT
						casus_belli = overthrow_ruler
					}					
				}
			}			
		}	
		if = {
			limit = { 
				war_with = FROM	
			}	
			FROM = { 
				character_event = { id = 40000 } 
				#character_event = { id = 45431 } #other vassals may join
			}
		}
		if = {
			limit = { 
				NOT = { war_with = FROM } 
				OR = {
					NOT = { liege = { character = FROM } }
					NOT = { liege_before_war = { character = FROM } }
				}	
			}	
			FROM = { character_event = { id = 40030 tooltip = TOOLTIP40030 } }
		}	
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = { character = ROOT }
					chronicle = {
						entry = CHRONICLE_AVOID_IMPRISON_WAR
						portrait = [From.GetID]
					}
				}
			}	
			persistent_event_target:chronicle_player = {
				if = {
					limit = { character = FROM }
					chronicle = {
						entry = CHRONICLE_FAILED_IMPRISON_WAR
						portrait = [Root.GetID]
					}
				}
			}
		}	
	}
	option = {
		name = "EVTOPTB50050"	#Give self up		
		ai_chance = {
			factor = 5 
			
			modifier = {
				factor = 0.5
				any_current_enemy = { NOT = { character = FROM } }
			}
			modifier = {
				factor = 0
				relative_power = {
					who = FROM
					power = 0.75
				}
			}
			modifier = {
				factor = 5
				trait = craven
			}
			modifier = {
				factor = 3
				trait = patient
			}
			modifier = {
				factor = 3
				trait = stressed
			}
			modifier = {
				factor = 3
				trait = honorable
			}
			modifier = {
				factor = 3
				trait = content
			}	
		}
		any_war = {
			limit = {
				attacker = { character = ROOT }
				defender = { character = FROM }
			}
			end_war = invalid
		}
		imprison = FROM
		hidden_tooltip = {
			character_event = { id = CM.10024 } #chronicle
			FROM = { character_event = { id = 40200 } }
		}	
	}
	option = {
		name = "EVTOPTC50050" #Run Away!
		trigger = {
			age = 14
			is_incapable = no
			has_epidemic = no
			intrigue = 10
		}
		tooltip_info = intrigue
		ai_chance = {
			factor = 5
			modifier = {
				factor = 0
				OR = {
					higher_tier_than = COUNT
					relative_power = { who = FROM power = 0.33 }
					AND = {
						tier = COUNT
						FROM = { tier = DUKE }
					}
					any_current_enemy = { NOT = { character = FROM } }						
				}
			}
			modifier = {
				factor = 0.5
				tier = COUNT
			}
			modifier = {
				factor = 0.33
				trait = proud
			}
			modifier = {
				factor = 0.33
				trait = brave
			}
			modifier = {
				factor = 0.33
				trait = ambitious
			}
			modifier = {
				factor = 5
				trait = craven
			}
			modifier = {
				factor = 2
				trait = content
			}
			modifier = {
				factor = 1.5
				trait = shy
			}
			modifier = {
				factor = 1.5
				trait = slothful
			}
			modifier = {
				factor = 1.5
				trait = humble
			}
		}
		any_war = {
			limit = {
				attacker = { character = ROOT }
				defender = { character = FROM }
			}
			end_war = invalid
		}
		if = {
			limit = { 
				has_landed_title = k_the_most_devout
				NOT = { has_dlc = "Sons of Abraham" }
			}
			set_global_flag = need_new_high_septon
			hidden_tooltip = {
				FROM = {
					character_event = { id = religious.11 }
					set_character_flag = select_next_high_septon
				}
			}
		}	
		abdicate_effect = yes
		banish = yes
		if = {
			limit = { 
				trait = kingsguard
			}
			remove_trait = kingsguard
			clr_character_flag = no_court_invites
			clr_character_flag = no_court_invites
			set_character_flag = non_lord_revoked
		}
		hidden_tooltip = { 
			random_playable_ruler = {
				limit = {
					valid_exile_destination_ROOT_trigger = yes				
				}
				ROOT = { move_character = PREV }
			}
			FROM = { character_event = { id = 40002 } } 
		}
	}	
}

character_event = { #inform rebellion
	id = 40000
	desc = "EVTDESC40000"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 
	only_rulers = yes
	
	option = {
		name = "EVTOPTA40000"
		if = {
			limit = { 				
				FROM = { has_landed_title = k_the_most_devout }
				religion = the_seven
				NOT = { trait = excommunicated }
			}	
			excommunicate_effect = yes
		}
		hidden_tooltip = {
			any_player = {
				limit = {
					OR = {
						is_liege_of = ROOT
						is_liege_or_above = ROOT			
						AND = {
							is_vassal_or_below = FROM
							NAND = { #not interested in minor rebellions
								higher_tier_than = DUKE
								FROM = { lower_tier_than = DUKE }
							}
						}	
						is_liege_or_above = FROM
						same_liege = ROOT
						same_liege = FROM
						is_close_relative = ROOT
						is_close_relative = FROM
						has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }	
						has_opinion_modifier = { who = FROM modifier = opinion_de_facto_liege }	
					}
					NOT = { character = ROOT }
					NOT = { character = FROM }
				}
				character_event = { id = 40201 }
			}
		}
	}
}
character_event = { #inform realm
	id = 40201
	desc = "EVTDESC40201"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 
	show_from_from = yes
	
	option = {
		name = "EVTOPTA40201"
		show_portrait = FROM
	}
}
character_event = { #Inform they gave themselves up
	id = 40200
	desc = "EVTDESC40200"
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	only_rulers = yes
	
	option = {
		name = "EXCELLENT"	
		if = {
			limit = { 				
				FROM = { has_landed_title = k_the_most_devout }
				religion = the_seven
				NOT = { trait = excommunicated }
			}	
			excommunicate_effect = yes
		}	
		hidden_tooltip = {
			any_player = {
				limit = {
					OR = {
						is_liege_of = ROOT
						is_liege_or_above = ROOT			
						AND = {
							is_vassal_or_below = FROM
							NAND = { #not interested in minor rebellions
								higher_tier_than = DUKE
								FROM = { lower_tier_than = DUKE }
							}
						}	
						is_liege_or_above = FROM
						same_liege = ROOT
						same_liege = FROM
						is_close_relative = ROOT
						is_close_relative = FROM
						has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }	
						has_opinion_modifier = { who = FROM modifier = opinion_de_facto_liege }	
					}
					NOT = { character = ROOT }
					NOT = { character = FROM }
				}
				character_event = { id = 40202 }
			}
		}		
	}
}
character_event = { #inform realm
	id = 40202
	desc = "EVTDESC40202"
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	show_from_from = yes
	
	option = {
		name = "EVTOPTA40202"
		show_portrait = FROM
	}
}
# On-action event: Was imprisoned
character_event = {
	id = 151
	desc = "EVTDESC151"
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	

	immediate = {	
		clr_character_flag = captured_in_battle
		clr_character_flag = lost_trial_by_combat
		clr_character_flag = demmanded_first_trial_by_combat
		clr_character_flag = choosing_champion
		clr_character_flag = select_champion
		clr_character_flag = kidnapped_by_plot
		if = {
			limit = { trait = incapable_dragon } 
			prisoner = no
		}
		if = {
			limit = {
				FROM = {
					any_realm_character = {
						NOT = { character = ROOT }
						is_liege_or_above = PREV
						has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
					}
				}
			}
			if = {
				limit = { 
					OR = {
						trait = deserter 
						trait = incapable_dragon
						AND = {
							trait = slave
							reverse_has_opinion_modifier = { who = FROM modifier = opinion_my_slave }
						}
					}	
				}
				FROM = { set_character_flag = no_tyranny }
			}			
			else_if = {
				limit = { 
					is_ruler = yes
				}
				FROM = {
					set_character_flag = extra_tyranny_10
					set_character_flag = extra_fear_5			
				}
			}
		}
		if = {
			limit = { NOT = { trait = incapable_dragon } }
			if = {
				limit = {
					FROM = {
						NOR = {
							is_adult = no
							is_incapable = yes
							prisoner = yes
						}
					}	
				}
				random_list = {
					75 = {	
						opinion = {
							who = FROM
							modifier = opinion_arrest_attempt
							months = 120
						}
					}
					25 = {	
						add_rival = FROM
					}
				}
			}		
			FROM = { character_event = { id = 40001 } }
		}	
		if = {
			limit = { trait = deserter } 
			FROM = { 
				character_event = { id = nightswatch.104 days = 1 tooltip = TOOLTIPnightswatch.104 } 
			}
		}
	}

	option = {
		name = "EVTOPTA151"
	}
}

character_event = {
	id = 40001
	desc = "EVTDESC40001"
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	only_rulers = yes
	
	option = {
		name = "EXCELLENT"	
		if = {
			limit = { 				
				FROM = { has_landed_title = k_the_most_devout }
				religion = the_seven
				NOT = { trait = excommunicated }
			}	
			excommunicate_effect = yes
		}		
	}
}

# on_avoided_imprison_fled_country
character_event = {
	id = 152	
	desc = "EVTDESC152"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	
	immediate = {
		# if = { #Lower nobles flee, higher nobles fight
			# limit = { 
				# NOT = { trait = dragon }
				# NOR = {
					# higher_tier_than = BARON
					# AND = {
						# tier = BARON 
						# OR = {
							# liege = { character = FROM }
							# FROM = { lower_tier_than = KING }	
						# }
					# }
				# }	
			# }
			# hidden_tooltip = { #Universal on death/abdication event
				# if = {
					# limit = { any_artifact = { has_artifact_flag = valyrian_steel } }
					# set_character_flag = do_not_inherit_sword
				# }
				# set_character_flag = abdication
				# character_event = { id = 45341 } 
				# clr_character_flag = abdication
				# clr_character_flag = do_not_inherit_sword
			# }
			# abdicate = yes
			# banish = yes
		# }
		clr_character_flag = captured_in_battle
		clr_character_flag = lost_trial_by_combat
		clr_character_flag = demmanded_first_trial_by_combat
		clr_character_flag = choosing_champion
		clr_character_flag = select_champion
		clr_character_flag = kidnapped_by_plot
		set_character_flag = exiled
		if = {
			limit = {
				FROM = {
					any_realm_character = {
						NOT = { character = ROOT }
						is_liege_or_above = PREV
						has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
					}
				}
			}
			if = {
				limit = { 
					OR = {
						trait = deserter 
						trait = incapable_dragon
						AND = {
							trait = slave
							reverse_has_opinion_modifier = { who = FROM modifier = opinion_my_slave }
						}
					}	
				}
				FROM = { set_character_flag = no_tyranny }
			}			
			else_if = {
				limit = { 
					is_ruler = yes
				}
				FROM = {
					set_character_flag = extra_tyranny_10
					set_character_flag = extra_fear_5			
				}
			}
		}
		if = {
			limit = { NOT = { trait = incapable_dragon } }
			if = {
				limit = {
					FROM = {
						NOR = {
							is_adult = no
							is_incapable = yes
							prisoner = yes
						}
					}	
				}
				random_list = {
					75 = {	
						opinion = {
							who = FROM
							modifier = opinion_arrest_attempt
							months = 120
						}
					}
					25 = {	
						trigger = {
							NOR = {
								is_friend = FROM
								is_rival = FROM
							}
						}
						add_rival = FROM
					}
				}
			}		
			
			hidden_tooltip = { 
				if = {	
					limit = { has_character_flag = grandmaester }
					clr_character_flag = grandmaester
				}
				if = {	
					limit = { trait = archmaester }
					remove_trait = archmaester
					add_trait = maester
					set_special_character_title = title_maester
					if = {
						limit = { 
							society_member_of = hermetics 
							society_rank = 4
						}
						society_rank_down = 1
					}
				}
				if = {
					limit = { trait = kingsguard }
					character_event = { id = kingsguard.1 } #remove from kingsguard
				}	
				if = {
					limit = { has_character_modifier = maester_education }
					remove_character_modifier = maester_education
					clr_character_flag = maester_education
					clr_character_flag = no_court_invites
				}	
				if = {
					limit = { trait = slave }
					set_character_flag = escaped_slave
					clr_character_flag = no_court_invites
					character_event = { id = slavery.0 }
				}
				if = {
					limit = { is_consort = yes }
					consort = { remove_consort = PREV }
					remove_trait = salt_wife
					clr_character_flag = no_court_invites
				}
				if = {
					limit = { trait = silent_sister }
					remove_trait = silent_sister
					add_trait = disinherited
				}
			}
		}	
	}

	option = {
		name = "OK"
		trigger = {
			NOT = { trait = incapable_dragon }
			NOT = { trait = nightswatch }
			is_ruler = no
			liege = {
				valid_exile_destination_ROOT_trigger = yes
				OR = {
					culture_group = ROOT
					religion_group = ROOT
				}
			}	
		}
		ai_chance = {
			factor = 75
		}
		FROM = { character_event = { id = 40002 } }
	}
	
	# option = {
		# name = "REBEL"
		# trigger = {
			# NOT = { trait = dragon }
			# is_ruler = yes
		# }
		# ai_chance = {
			# factor = 1000
		# }
		# persistent_event_target:chronicle_player = {
			# if = {
				# limit = { character = FROM }
				# chronicle = {
					# entry = CHRONICLE_FAILED_IMPRISON_WAR
					# portrait = [Root.GetID]
				# }
			# }
		# }
		# liege = {
			# letter_event = { id = 40031 }
			# reverse_war = {
				# target = ROOT
				# casus_belli = overthrow_ruler
			# }
		# }	
		# set_character_flag = sub_vassal_rebellion
	# }
	
	option = {
		name = "OK"
		trigger = {
			NOT = { trait = incapable_dragon }
			NOT = { trait = nightswatch }
			is_ruler = no
			NOT = {
				liege = {
					valid_exile_destination_ROOT_trigger = yes
					OR = {
						culture_group = ROOT
						religion_group = ROOT
					}
				}
			}		
		}
		ai_chance = {
			factor = 75
		}
		FROM = { character_event = { id = 40002 days = 1 } }
		random_dynasty_member = {
			limit = {
				valid_exile_destination_ROOT_trigger = yes	
				is_alive = yes
			}
			ROOT = { move_character = PREV }
			break = yes
		}
		random_playable_ruler = {
			limit = {
				valid_exile_destination_ROOT_trigger = yes
				
				culture_group = ROOT			
			}
			ROOT = { move_character = PREV }
			break = yes
		}
		random_playable_ruler = {
			limit = {
				valid_exile_destination_ROOT_trigger = yes
				
				religion_group = ROOT				
			}
			ROOT = { move_character = PREV }
			break = yes
		}
		random_playable_ruler = {
			limit = {
				valid_exile_destination_ROOT_trigger = yes
				
				higher_tier_than = DUKE				
			}
			ROOT = { move_character = PREV }
			break = yes
		}
	}
	option = {
		name = "Merc Company"
		trigger = {
			is_ruler = no
			NOT = { trait = incapable_dragon }
			is_female = no
			age = 14
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 1.5
				martial = 10
			}
			modifier = {
				factor = 2
				martial = 15
			}
			modifier = {
				factor = 3
				martial = 20
			}
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 0.33
				trait = content
			}
			modifier = {
				factor = 3
				trait = brave
			}
			modifier = {
				factor = 0.33
				trait = craven
			}
			modifier = {
				factor = 2.5
				OR = {
					trait = trained_warrior
					trait = skilled_warrior
					trait = master_warrior
				}
			}
		}
		if = {
			limit = { trait = nightswatch }
			remove_trait = nightswatch
			add_trait = deserter
			add_trait = disinherited
			clr_character_flag = no_court_invites
		}
		random_independent_ruler = {
			limit = {
				mercenary = yes
				NOT = { same_realm = FROM }
				is_within_diplo_range = FROM
				NOT = { culture = giant }
				OR = {
					NOT = { wildling_culture_trigger = yes }
					ROOT = { wildling_culture_trigger = yes }
				}
				OR = {
					primary_title = {
						OR = {
							title = d_golden_company
							title = d_bright_banners
							title = d_company_of_the_cat
							title = d_gallant_men
							title = d_iron_shields
							title = d_long_lances
							title = d_maidens_men
							title = d_ragged_standard
							title = d_second_sons
							title = d_stormcrows
							title = d_brave_companions
							title = d_windblown
							title = d_stormbreakers
							title = d_company_of_the_rose
						}
					}	
					ROOT = { dynasty = 0 }
				}	
			}
			ROOT = { move_character = PREV }
		}
		FROM = { character_event = { id = 40002 } }
	}
	option = {
		name = "OK"
		trigger = {
			trait = nightswatch		
		}
		ai_chance = {
			factor = 75
		}
		remove_trait = nightswatch
		add_trait = deserter
		add_trait = disinherited
		clr_character_flag = no_court_invites
		random_playable_ruler = {
			limit = {
				valid_exile_destination_ROOT_trigger = yes				
				OR = {
					higher_tier_than = DUKE
					culture_group = ROOT
				}
				NOR = {
					religion_group = westerosi_religion
					nightswatch_culture_trigger = yes
				}
			}
			if = {
				limit = { trait = wildling }
				ROOT = { add_trait = wildling }
			}
			ROOT = { move_character = PREV }
		}
		FROM = { character_event = { id = 40002 } }
	}
	option = {
		name = "OK"
		trigger = {
			trait = incapable_dragon
		}
		if = {
			limit = { father = { is_alive = yes } }
			father = {
				if = {
					limit = { is_ruler = yes }
					ROOT = { move_character = PREV }
				}
				if = {
					limit = { is_ruler = no }
					liege = { ROOT = { move_character = PREV } }
				}
			}
			break = yes
		}
		if = {
			limit = { mother = { is_alive = yes } }
			mother = {
				if = {
					limit = { is_ruler = yes }
					ROOT = { move_character = PREV }
				}
				if = {
					limit = { is_ruler = no }
					liege = { ROOT = { move_character = PREV } }
				}
			}
			break = yes
		}
		c_dragonstone = {
			holder_scope = {
				ROOT = { move_character = PREV }
			}
		}
	}
}

character_event = {
	id = 40002
	desc = "EVTDESC40002"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40002"		
	}
}
character_event = { #inform rebellion against lower vassal
	id = 40030
	desc = "EVTDESC40030"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 
	only_rulers = yes

	immediate = {
		##Find vassal to enforce against indirect vassal
		#Liege
		FROM = {
			liege = {
				if = {
					limit = {
						NOT = { character = ROOT }
						NOT = { character = PREV }
						has_regent = no
						NOT = { war_with = PREV }
					}
					save_event_target_as = vassal_enforcer
					break = yes
				}
			}
		}
		#Find vassal to send help
		if = { #Wardens
			limit = { has_landed_title = e_iron_throne }
			if = {
				limit = { FROM = { capital_scope = { region = world_westeros_north } } }
				random_vassal = {
					limit = {
						has_minor_title = warden_north
						same_liege = FROM
						
						NOT = { lower_tier_than = FROM }
						NOT = { character = FROM }
						war = no
						NOR = {
							is_allied_with = FROM		
							has_non_aggression_pact_with = FROM
						}
						OR = {
							NOT = { is_close_relative = FROM }
							is_close_relative = ROOT
						}
						OR = {
							NOT = { dynasty = FROM }
							dynasty = ROOT
							is_close_relative = ROOT
						}
					}
					save_event_target_as = vassal_enforcer
					break = yes
				}
			}
			if = {
				limit = { 
					FROM = { 
						capital_scope = { 
							OR = {
								region = world_westeros_east
								AND = {
									NOT = { region = world_westeros }
									NOT = { region = world_summer_sea }
								}
							}
						} 
					} 
				}
				random_vassal = {
					limit = {
						has_minor_title = warden_east
						same_liege = FROM
						
						NOT = { lower_tier_than = FROM }
						NOT = { character = FROM }
						war = no
						NOR = {
							is_allied_with = FROM		
							has_non_aggression_pact_with = FROM
						}
						OR = {
							NOT = { is_close_relative = FROM }
							is_close_relative = ROOT
						}
						OR = {
							NOT = { dynasty = FROM }
							dynasty = ROOT
							is_close_relative = ROOT
						}
					}
					save_event_target_as = vassal_enforcer
					break = yes
				}
			}
			if = {
				limit = { 
					FROM = { 
						capital_scope = { 
							OR = {
								region = world_dorne
								region = world_reach
								region = world_stormlands
								region = world_summer_sea
							}
						} 
					} 
				}
				random_vassal = {
					limit = {
						has_minor_title = warden_south
						same_liege = FROM
						
						NOT = { lower_tier_than = FROM }
						NOT = { character = FROM }
						war = no
						NOR = {
							is_allied_with = FROM		
							has_non_aggression_pact_with = FROM
						}
						OR = {
							NOT = { is_close_relative = FROM }
							is_close_relative = ROOT
						}
						OR = {
							NOT = { dynasty = FROM }
							dynasty = ROOT
							is_close_relative = ROOT
						}
					}
					save_event_target_as = vassal_enforcer
					break = yes
				}
			}
			if = {
				limit = { 
					FROM = { 
						capital_scope = { 
							OR = {
								region = world_westerlands
								region = world_iron_isles
								region = world_reach
							}
						} 
					} 
				}
				random_vassal = {
					limit = {
						has_minor_title = warden_west
						same_liege = FROM
						
						NOT = { lower_tier_than = FROM }
						NOT = { character = FROM }
						war = no
						NOR = {
							is_allied_with = FROM		
							has_non_aggression_pact_with = FROM
						}
						OR = {
							NOT = { is_close_relative = FROM }
							is_close_relative = ROOT
						}
						OR = {
							NOT = { dynasty = FROM }
							dynasty = ROOT
							is_close_relative = ROOT
						}
					}
					save_event_target_as = vassal_enforcer
					break = yes
				}
			}
		}	
		random_realm_lord = { #Castellan
			limit = {
				has_job_title = job_castellan
				same_liege = FROM
				
				NOT = { lower_tier_than = FROM }
				NOT = { character = FROM }
				war = no
				NOR = {
					is_allied_with = FROM		
					has_non_aggression_pact_with = FROM
				}
				OR = {
					NOT = { is_close_relative = FROM }
					is_close_relative = ROOT
				}
				OR = {
					NOT = { dynasty = FROM }
					dynasty = ROOT
					is_close_relative = ROOT
				}
				relative_power = { who = FROM power = 0.5 }
			}
			save_event_target_as = vassal_enforcer
			break = yes
		}
		random_realm_lord = {
			limit = {
				is_councillor = yes
				same_liege = FROM
				
				NOT = { lower_tier_than = FROM }
				NOT = { character = FROM }
				war = no
				NOR = {
					is_allied_with = FROM		
					has_non_aggression_pact_with = FROM
				}
				OR = {
					NOT = { is_close_relative = FROM }
					is_close_relative = ROOT
				}
				OR = {
					NOT = { dynasty = FROM }
					dynasty = ROOT
					is_close_relative = ROOT
				}
				relative_power = { who = FROM power = 0.5 }
			}
			save_event_target_as = vassal_enforcer
			break = yes
		}
		random_realm_lord = {
			limit = {
				has_regent = no
				same_liege = FROM
				
				NOT = { lower_tier_than = FROM }
				NOT = { character = FROM }
				war = no
				NOR = {
					is_allied_with = FROM		
					has_non_aggression_pact_with = FROM
				}
				OR = {
					NOT = { is_close_relative = FROM }
					is_close_relative = ROOT
				}
				OR = {
					NOT = { dynasty = FROM }
					dynasty = ROOT
					is_close_relative = ROOT
				}
				relative_power = { who = FROM power = 0.5 }
			}
			save_event_target_as = vassal_enforcer
			break = yes
		}
		random_realm_lord = {
			limit = {
				has_regent = no
				same_liege = FROM
				
				NOT = { lower_tier_than = FROM }
				NOT = { character = FROM }
				war = no
				NOR = {
					is_allied_with = FROM		
					has_non_aggression_pact_with = FROM
				}
				OR = {
					NOT = { is_close_relative = FROM }
					is_close_relative = ROOT
				}
				OR = {
					NOT = { dynasty = FROM }
					dynasty = ROOT
					is_close_relative = ROOT
				}
			}
			save_event_target_as = vassal_enforcer
			break = yes
		}
	}	
	
	option = {
		name = "EVTOPTA40030"
		event_target:vassal_enforcer = { 
			tooltip = {
				war = {
					target = FROM
					casus_belli = overthrow_ruler
				}
			} 
			opinion = {
				who = ROOT
				modifier = opinion_sorting_rebellion
			}
			hidden_tooltip = { letter_event = { id = 40031 } }
		}
		transfer_scaled_wealth = {
			to = event_target:vassal_enforcer
			min = 30
			value = 0.5
		}
		if = {
			limit = { tier = EMPEROR }
			prestige = -50
		}
		if = {
			limit = { tier = KING }
			prestige = -35
		}
		if = {
			limit = { tier = DUKE }
			prestige = -25
		}		
	}
	option = {
		name = "EVTOPTB40030"
		ai_chance = { factor = 0 }
		if = {
			limit = { tier = EMPEROR }
			prestige = -100
		}
		if = {
			limit = { tier = KING }
			prestige = -75
		}
		if = {
			limit = { tier = DUKE }
			prestige = -50
		}
	}
}
letter_event = { #inform rebel's liege
	id = 40031
	desc = "EVTDESC40031"
	border = GFX_event_letter_frame_war
	
	is_triggered_only = yes 
	
	immediate = {
		#Mark which liege this is for
		if = {
			limit = { liege = { character = FROM } }
			set_character_flag = enforce_justice_liege_1
			break = yes
		}
		if = {
			limit = { liege = { liege = { character = FROM } } }
			set_character_flag = enforce_justice_liege_2
			break = yes
		}
		if = {
			limit = { liege = { liege = { liege = { character = FROM } } } }
			set_character_flag = enforce_justice_liege_3
			break = yes
		}
	}
	
	option = {
		name = "EVTOPTA40031"
		transfer_scaled_wealth = {
			from = FROM
			to = ROOT
			min = 30
			value = 0.5
		}		
		if = {
			limit = { is_liege_of = FROMFROM }
			FROMFROM = { set_character_flag = sub_vassal_rebellion }
			reverse_war = {
				target = FROMFROM
				casus_belli = overthrow_ruler
			}
		}
		if = {
			limit = { NOT = { is_liege_of = FROMFROM } }
			war = {
				target = FROMFROM
				casus_belli = enforce_justice
			}
		}
		FROMFROM = { 
			tooltip = { show_portrait = yes } 
			hidden_tooltip = { character_event = { id = 40034 } }
		}
	}
}
letter_event = { #inform liege rebel defeated
	id = 40032
	desc = "EVTDESC40032"
	border = GFX_event_letter_frame_war
	
	is_triggered_only = yes 
	
	trigger = { NOT = { character = event_target:enforcer } }
	
	option = {
		name = "EVTOPTA40032"
		event_target:captured_vassal = { imprison = ROOT }
		hidden_tooltip = { event_target:enforcer = { letter_event = { id = 40033 } } }
	}
}
letter_event = {
	id = 40033
	desc = "EVTDESC40033"
	border = GFX_event_letter_frame_war
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40033"
		FROM = { 
			opinion = {
				who = ROOT
				modifier = opinion_sorted_rebellion
			}
		}
	}
}
character_event = { #inform rebel war to enforce justice begun
	id = 40034
	desc = "EVTDESC40034"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40034"
		FROMFROM = { tooltip = { show_portrait = yes } }
	}
}
character_event = { #inform liege war to enforce peace has failed
	id = 40035
	desc = "EVTDESC40035"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 
	
	trigger = { NOT = { character = event_target:enforcer } }
	
	option = {
		name = "EVTOPTA40035"
		event_target:captured_vassal = { tooltip = { show_portrait = yes } }
		prestige = -100
	}
}
# on_released_from_prison
character_event = {
	id = 153
	desc = "EVTDESC153"
	picture = GFX_evt_recovery
	
	is_triggered_only = yes 
	
	immediate = {
		#reduce fear for landed vassals
		if = {
			limit = {
				FROM = { higher_tier_than = COUNT }
				is_ruler = yes
				OR = {
					is_liege_or_above = FROM
					liege_before_war = { character = FROM }
					any_liege = { liege_before_war = { character = FROM } }
				}	
			}
			FROM = { 
				change_variable = { which = fear_actions value = -5 } 
				hidden_tooltip = { character_event = { id = faction_event_new.90 } }
			}
		}
	}
	
	option = {
		name = "EVTOPTA153"
		clr_character_flag = captured_in_battle
		clr_character_flag = lost_trial_by_combat
		clr_character_flag = demmanded_first_trial_by_combat
		clr_character_flag = choosing_champion
		clr_character_flag = select_champion
		clr_character_flag = kidnapped_by_plot
		clr_character_flag = asked_for_ransom 
		opinion = {
			who = FROM
			modifier = opinion_merciful
			months = 120
		}
		
	}
}

# on_executed
character_event = {
	id = 154
	desc = "EVTDESC154"
	picture = "GFX_evt_beheading"
	
	is_triggered_only = yes 
	
	immediate = {	
		# ###Check for tyranny###
		# if = {
			# limit = {
				# ROOT = { is_liege_or_above = FROM }
				# FROM = {
					# any_realm_character = {
						# NOT = { character = ROOT }
						# is_liege_or_above = PREV
						# has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
					# }
				# }
			# }
			# FROM = { set_character_flag = unjust_execution }
			# if = { #Non-rulers incur 5 tyranny
				# limit = { 
					# is_ruler = no
					# NAND = { #excludes owned slaves
						# trait = slave
						# has_opinion_modifier = { who = FROM modifier = opinion_my_owner }
					# }
				# }	
				# FROM = {
					# change_variable = { which = "tyrant" value = 5 } 
					# character_event = { id = maintenance.1 } #tyrant trait			
				# }
					
			# }
			# if = { #rulers incur 10 tyranny
				# limit = { 
					# is_ruler = yes
				# }
				# FROM = {
					# change_variable = { which = "tyrant" value = 10 } 
					# character_event = { id = maintenance.1 } #tyrant trait
				# }
			# }
		# }
		# FROM = {
			# any_courtier = {
				# limit = {
					# is_liege_or_above = PREV
					# has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
				# }
				# remove_opinion = {
					# who = PREV
					# modifier = opinion_tyrant
				# }
			# }			
			# any_realm_character = {
				# limit = { 
					# is_liege_or_above = PREV
					# has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
				# }
				# remove_opinion = {
					# who = PREV
					# modifier = opinion_tyrant
				# }
			# }
			# if = { #If this was a just execution remove all loans
				# limit = { 
					# NOT = { has_character_flag = unjust_execution } 
					# is_liege_of = ROOT
				# }
				# reverse_remove_opinion = { who = ROOT modifier = opinion_liege_loan }
				# clr_character_flag = mega_war_liege_loan
			# }
		# }	
		# ###Realm Upset###
		# current_heir = {
			# if = {
				# limit = {
					# has_opinion_modifier = { who = FROM modifier = opinion_tyrant }
				# }
				# remove_opinion = { who = FROM modifier = opinion_tyrant }
				# opinion = { who = FROM modifier = opinion_executed_realm_character }
			# }	
		# }
		# top_liege = {
			# if = {
				# limit = {
					# NOT = { character = ROOT }
					# has_opinion_modifier = { who = FROM modifier = opinion_tyrant }
				# }
				# remove_opinion = { who = FROM modifier = opinion_tyrant }
				# opinion = { who = FROM modifier = opinion_executed_realm_character }
			# }
			# any_realm_lord = {
				# limit = {
					# NOT = { character = ROOT }
					# has_opinion_modifier = { who = FROM modifier = opinion_tyrant }
				# }
				# remove_opinion = { who = FROM modifier = opinion_tyrant }
				# opinion = { who = FROM modifier = opinion_executed_realm_character }
			# }
		# }
		# FROM = {
			# top_liege = {
				# any_realm_character = {
					# limit = { 
						# has_opinion_modifier = { who = PREVPREV modifier = opinion_tyrant }
					# }
					# remove_opinion = {
						# who = PREVPREV
						# modifier = opinion_tyrant
					# }
				# }
			# }
		# }
		FROM = { 
			save_event_target_as = executioner 
		}
		character_event = { id = 45342 } #Universal execution event		
	}
	
	option = {
		name = "EVTOPTA154"
		# FROM = {
			# piety = -10
		# }
	}
}

# on_exiled
character_event = {
	id = 155
	desc = "EVTDESC155"
	picture = GFX_evt_carriage
	
	is_triggered_only = yes 
	
	immediate = {
		set_character_flag = exiled
		if = {
			limit = {
				FROM = {
					any_realm_character = {
						NOT = { character = ROOT }
						is_liege_or_above = PREV
						has_opinion_modifier = { who = PREV modifier = opinion_tyrant }
					}
				}
			}			
			FROM = {
				set_character_flag = unjust_exile
				set_character_flag = extra_tyranny_10
			}
		}		
		opinion = {
			who = FROM
			modifier = opinion_exiled_me
			years = 100
		}		
		mother = {
			if = {
				limit = {
					NOT = { character = FROM }
					OR = {
						FROM = { has_character_flag = unjust_exile }
						opinion = { who = ROOT value = -25 }
					}
				}
				set_character_flag = exile_opinion_set
				opinion = {
					who = FROM
					modifier = opinion_exiled_kin
				}
			}	
		}
		father = {
			if = {
				limit = {
					NOT = { character = FROM }
					OR = {
						FROM = { has_character_flag = unjust_exile }
						opinion = { who = ROOT value = -25 }
					}
				}
				set_character_flag = exile_opinion_set
				opinion = {
					who = FROM
					modifier = opinion_exiled_kin
				}
			}			
		}
		any_child = {
			limit = { 
				NOT = { character = FROM }
				NOT = { has_character_flag = exile_opinion_set }
				OR = {
					FROM = { has_character_flag = unjust_exile }
					opinion = { who = ROOT value = -25 }
				}
			}	
			set_character_flag = exile_opinion_set
			opinion = {
				who = FROM
				modifier = opinion_exiled_kin
			}				
		}	
		any_spouse = {
			limit = { 
				NOT = { character = FROM }
				OR = {
					FROM = { has_character_flag = unjust_exile }
					opinion = { who = ROOT value = -25 }
				}
				NOT = { has_character_flag = exile_opinion_set }
			}	
			set_character_flag = exile_opinion_set
			opinion = {
				who = FROM
				modifier = opinion_exiled_kin
			}				
		}
		any_lover = {
			limit = { 
				NOT = { character = FROM }
				NOT = { has_character_flag = exile_opinion_set }
			}	
			set_character_flag = exile_opinion_set
			opinion = {
				who = FROM
				modifier = opinion_exiled_lover
			}				
		}
		any_friend = {
			limit = { 
				NOT = { character = FROM }
				NOT = { has_character_flag = exile_opinion_set }
			}	
			set_character_flag = exile_opinion_set
			opinion = {
				who = FROM
				modifier = opinion_exiled_friend
			}					
		}
		any_dynasty_member = {
			limit = { 
				is_close_relative = ROOT
				OR = {
					NOT = { sibling = FROM }
					sibling = ROOT
				}
				NOT = { is_child_of = FROM }
				NOT = { character = FROM }
				NOT = { has_character_flag = exile_opinion_set }
				OR = {
					FROM = { has_character_flag = unjust_exile }
					opinion = { who = ROOT value = -15 }
				}
			}	
			opinion = {
				who = FROM
				modifier = opinion_exiled_kin
			}				
		}	
		#clear flags
		mother = { clr_character_flag = exile_opinion_set }
		father = { clr_character_flag = exile_opinion_set }	
		any_child = { clr_character_flag = exile_opinion_set }
		any_lover = { clr_character_flag = exile_opinion_set }
		any_friend = { clr_character_flag = exile_opinion_set }
		any_spouse = { clr_character_flag = exile_opinion_set }
		FROM = { clr_character_flag = unjust_exile }
		
				
		if = {	
			limit = { 	
				is_female = no 
				NOT = { trait = wildling }
				NOT = { trait = nightswatch }
				is_incapable = no
				age = 16
				FROM = {
					nightswatch_culture_trigger = yes
				}
			}
			FROM = { character_event = { id = nightswatch.3 days = 1 } }	
		}	
		hidden_tooltip = {
			if = {	
				limit = { has_character_flag = grandmaester }
				clr_character_flag = grandmaester
			}
			if = {	
				limit = { trait = archmaester }
				remove_trait = archmaester
				add_trait = maester
				set_special_character_title = title_maester
				if = {
					limit = { 
						society_member_of = hermetics 
						society_rank = 4
					}
					society_rank_down = 1
				}
			}
			if = {
				limit = { trait = kingsguard }
				character_event = { id = kingsguard.1 } #remove from kingsguard
			}	
			if = {
				limit = { has_character_modifier = maester_education }
				remove_character_modifier = maester_education
				clr_character_flag = maester_education
				clr_character_flag = no_court_invites
			}	
			if = {
				limit = { trait = slave }
				set_character_flag = escaped_slave
				clr_character_flag = no_court_invites
				character_event = { id = slavery.0 }
			}
			if = {
				limit = { is_consort = yes }
				consort = { remove_consort = PREV }
				remove_trait = salt_wife
				clr_character_flag = no_court_invites
			}
			if = {
				limit = { has_nickname = no }
				random = {
					chance = 10
					give_nickname = nick_the_exile
				}	
			}			
		}			
	}
	
	option = {
		name = "EVTOPTA155" #OK
		trigger = {
			NOT = { trait = nightswatch }
			liege = {
				valid_exile_destination_ROOT_trigger = yes
			}
		}
		ai_chance = {
			factor = 75
		}
	}
	
	option = {
		name = "EVTOPTA155"
		trigger = {
			NOT = { trait = nightswatch }
			NOT = {
				liege = {
					valid_exile_destination_ROOT_trigger = yes
				}
			}	
		}
		ai_chance = {
			factor = 75
		}
		random_playable_ruler = {
			limit = {
				valid_exile_destination_ROOT_trigger = yes				
			}
			preferred_limit = {
				dynasty = ROOT
			}
			preferred_limit = {
				culture_group = ROOT	
			}
			preferred_limit = {
				religion_group = ROOT
			}
			preferred_limit = {
				higher_tier_than = DUKE
			}
			ROOT = { move_character = PREV }
		}
	}
	option = {
		name = "Merc Company"
		trigger = {
			is_female = no
			age = 14
			NOT = { trait = nightswatch }
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 3
				martial = 10
			}
			modifier = {
				factor = 3
				martial = 14
			}
			modifier = {
				factor = 2
				martial = 18
			}
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 0.33
				trait = content
			}
			modifier = {
				factor = 3
				trait = brave
			}
			modifier = {
				factor = 0.33
				trait = craven
			}
			modifier = {
				factor = 2.5
				OR = {
					trait = trained_warrior
					trait = skilled_warrior
					trait = master_warrior
				}
			}
		}
		random_independent_ruler = {
			limit = {
				mercenary = yes
				NOT = { same_realm = FROM }
				is_within_diplo_range = FROM
				NOT = { culture = giant }
				OR = {
					NOT = { wildling_culture_trigger = yes }
					ROOT = { wildling_culture_trigger = yes }
				}
				OR = {
					primary_title = {
						OR = {
							title = d_golden_company
							title = d_bright_banners
							title = d_company_of_the_cat
							title = d_gallant_men
							title = d_iron_shields
							title = d_long_lances
							title = d_maidens_men
							title = d_ragged_standard
							title = d_second_sons
							title = d_stormcrows
							title = d_brave_companions
							title = d_windblown
							title = d_stormbreakers
							title = d_company_of_the_rose
						}
					}	
					ROOT = { dynasty = 0 }
				}	
			}
			ROOT = { move_character = PREV }
		}
	}
	option = {
		name = "Nightswatch"
		trigger = { trait = nightswatch }
		#Black Brothers move to another command
		FROM = { 
			top_liege = {
				random_realm_lord = {
					limit = {
						trait = nightswatch
						NOT = { character = PREVPREV }
						NOT = { is_liege_or_above = PREVPREV }
					}
					ROOT = { move_character = PREV }
					break = yes
				}				
			}
		}
		#If none found, banish beyond the wall
		random_list = {
			80 = { #Missing
				FROM = { character_event = { id = nightswatch.102 } }
				death = { 
					death_reason = death_execution_beyond_wall
					killer = FROM
				}
				break = yes	
			}
			20 = { #Becomes wildling
				modifier = {
					factor = 0
					OR = {
						has_epidemic = yes					
						is_crippled_trigger = yes
						trait = infirm
						trait = incapable
					}	
				}
				modifier = {
					factor = 0.25
					trait = maimed
				}
				modifier = {
					factor = 0.25
					trait = blinded
				}
				modifier = {
					factor = 0.25
					trait = blinded_age
				}
				modifier = {
					factor = 1.75
					martial = 8
				}
				modifier = {
					factor = 1.75
					martial = 11
				}
				modifier = {
					factor = 1.5
					martial = 14
				}
				modifier = {
					factor = 1.5
					martial = 17
				}
				modifier = {
					factor = 1.5
					martial = 20
				}
				modifier = {
					factor = 1.75
					diplomacy = 8
				}
				modifier = {
					factor = 1.75
					diplomacy = 11
				}
				modifier = {
					factor = 1.5
					diplomacy = 14
				}
				modifier = {
					factor = 1.5
					diplomacy = 17
				}
				modifier = {
					factor = 1.5
					diplomacy = 20
				}
				modifier = {
					factor = 1.75
					intrigue = 8
				}
				modifier = {
					factor = 1.75
					intrigue = 11
				}
				modifier = {
					factor = 1.5
					intrigue = 14
				}
				modifier = {
					factor = 1.5
					intrigue = 17
				}
				modifier = {
					factor = 1.5
					intrigue = 20
				}
				random_playable_ruler = {
					limit = {
						demesne_size = 1
						NOT = { character = FROM }
						NOT = { is_liege_or_above = FROM }					
						trait = wildling			
					}
					ROOT = { 
						move_character = PREV
						remove_trait = nightswatch
						add_trait = deserter
						add_trait = disinherited
						add_trait = wildling
						ROOT_FROM = { character_event = { id = nightswatch.102 } }
						break = yes						
					}					
				}
			}
		}
		#Failsafe, goes missing
		FROM = { character_event = { id = nightswatch.102 } }
		death = { 
			death_reason = death_execution_beyond_wall
			killer = FROM
		}
	}
}

# on_failed_assassination - no harm done
character_event = {
	id = 156
	desc = "EVTDESC156"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	is_triggered_only = yes 
	
	immediate = {
		FROM = { character_event = { id = 40003 } }
	}

	option = {
		name = "EVTOPTA156"
	}
}

# on_failed_assassination - involvement remains unknown
character_event = {
	id = 40003
	desc = "EVTDESC40003"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40003"
	}
}

# on_failed_assassination - wounded
character_event = {
	id = 157
	desc = "EVTDESC157"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { trait = wounded }
		NOT = { is_maimed_trigger = yes }
	}
	
	immediate = {
		FROM = { character_event = { id = 40004 } }
	}

	option = {
		name = "EVTOPTA157"
		add_trait_silently_wounded_effect = yes
	}
}

character_event = {
	id = 40004
	desc = "EVTDESC40003"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA40004"
	}
}

# on_failed_assassination - maimed
character_event = {
	id = 158
	desc = "EVTDESC158"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	
	is_triggered_only = yes
	
	trigger = {
		can_be_maimed_trigger = yes
	}
	
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 3
			trait = wounded
		}
	}
	
	immediate = {
		FROM = { character_event = { id = 40005 } }
	}

	option = {
		name = "EVTOPTA158"
		add_maimed_trait_effect = yes
	}
}

character_event = {
	id = 40005
	desc = "EVTDESC40003"
	picture = "GFX_evt_shadow"

	hide_FROM = yes
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40005"
	}
}

# on_failed_assassination_disc - no harm done
character_event = {
	id = 159
	desc = EVTDESC159
	picture = GFX_evt_shadow
	
	is_triggered_only = yes 
	
	immediate = {
		save_event_target_as = target_victim
		FROM = {
			set_character_flag = murder_event_override
			character_event = { id = 11 }
			character_event = { id = 40006 }
		}
		clear_event_target = target_victim
	}

	option = {
		name = "EVTOPTA159"
		
		if = {
			limit = {
				host = { NOT = { character = FROM } }
				job_spymaster = {
					NOT = { character = FROM }
				}
			}
			hidden_tooltip = { host = { character_event = { id = 40020 days = 5 }  } }
		}
	}
}

# on_failed_assassination - divulged my name!
character_event = {
	id = 40006
	desc = EVTDESC40006
	picture = GFX_evt_shadow
	
	hide_FROM = yes
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA40006"
		piety = -50
	}
}

# on_failed_assassination_disc - wounded
character_event = {
	id = 160
	desc = "EVTDESC160"
	picture = "GFX_evt_shadow"
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { trait = wounded }
		NOT = { is_maimed_trigger = yes }
	}
	
	immediate = {
		save_event_target_as = target_victim
		FROM = {
			set_character_flag = murder_event_override
			character_event = { id = 11 }
			character_event = { id = 40007 }
		}
		clear_event_target = target_victim
	}

	option = {
		name = "EVTOPTA160"
		add_trait_silently_wounded_effect = yes
		if = {
			limit = {
				host = { NOT = { character = FROM } }
				job_spymaster = {
					NOT = { character = FROM }
				}
			}
			hidden_tooltip = { host = { character_event = { id = 40020 days = 5 }  } }
		}
	}
}

character_event = {
	id = 40007
	desc = EVTDESC40006
	picture = GFX_evt_shadow
	
	hide_FROM = yes
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA40007"
		piety = -50
	}
}

# on_failed_assassination - maimed
character_event = {
	id = 161
	desc = "EVTDESC161"
	picture = "GFX_evt_shadow"
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { trait = maimed }
		NOT = { trait = one_eyed }
	}
	
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 3
			trait = wounded
		}
	}
	
	immediate = {
		save_event_target_as = target_victim
		FROM = {
			set_character_flag = murder_event_override
			character_event = { id = 11 }
			character_event = { id = 40008 }
		}
		clear_event_target = target_victim
	}

	option = {
		name = "EVTOPTA161"
		if = {
			limit = {
				NOT = { has_dlc = "Reapers" }
			}
			add_trait = maimed
			character_event = { id = 38281 }
		}
		if = {
			limit = {
				has_dlc = "Reapers"
			}
			add_trait = one_eyed
			add_trait = severely_injured
			hidden_tooltip = {
				character_event = { id = RIP.11501 } #Notify one-eyed
				resolve_severely_injured_effect = yes
			}
		}
		if = {
			limit = {
				host = { NOT = { character = FROM } }
				job_spymaster = {
					NOT = { character = FROM }
				}
			}
			hidden_tooltip = { host = { character_event = { id = 40020 days = 5 }  } }
		}
	}
}
character_event = {
	id = 40008
	desc = EVTDESC40006
	picture = GFX_evt_shadow
	
	hide_FROM = yes
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40008"
		piety = -50
	}
}

# on_assassination
character_event = {
	id = 162
	picture = GFX_evt_shadow
	desc = EVTDESC162
	
	hide_FROM = yes
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA162"
		hidden_tooltip = {
			FROM = { character_event = { id = 40009 } }
		}
		FROM_murder_red_god_resurrect_effect = yes
		death = {
			death_reason = death_murder_unknown
			killer = FROM
		}
	}
}

character_event = {
	id = 40009
	desc = "EVTDESC40009"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA40009"
	}
}

# on_assassination_disc - discovered
character_event = {
	id = 163
	desc = "EVTDESC163"
	picture = "GFX_evt_shadow"
	
	is_triggered_only = yes 
	
	immediate = {
		save_event_target_as = target_victim
		FROM = {
			set_character_flag = murder_event_override
			character_event = { id = 10 }
		}
		clear_event_target = target_victim
		
		if = {
			limit = {
				employer = {
					NOT = { character = FROM }
					NOT = { character = ROOT }
					job_spymaster = {
						NOT = { character = FROM }
					}
				}
			}
			FROM = { save_event_target_as = we_are_evil_assasinator }
			employer = { character_event = { id = 40020 days = 1 } }
		}
		FROM = { character_event = { id = 40010 } }
	}

	option = {
		name = "EVTOPTA163"
		FROM_murder_red_god_resurrect_effect = yes
		death = {
			death_reason = death_murder
			killer = FROM
		}
	}
}

character_event = {
	id = 40010
	desc = "EVTDESC40010"
	picture = "GFX_evt_shadow"
	
	hide_FROM = yes
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40010"
		piety = -50
	}
}

# Failed assassination attempt on us, reactions possible
character_event = {
	id = 40020
	desc = EVTDESC40020
	picture = GFX_evt_shadow
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40020" #Inside same realm, go to top liege.
		trigger = {
			same_realm = FROMFROM
			independent = no
			NOT = { top_liege = { character = FROMFROM } }
		}
		ai_chance = {
			factor = 1000
			modifier = {
				factor = 0
				NOT = { trait = just }
				OR = {
					opinion = { who = FROMFROM value = 25 }
					AND = {
						OR = {
							is_close_relative = FROMFROM
							dynasty = FROMFROM
							is_married = FROMFROM
						}
						NOT = { trait = ruthless }
						NOT = { trait = wroth }
						opinion = { who = FROMFROM value = -24 }
					}
				}
			}
		}
		top_liege = {
			character_event = { 
				id = 40021
				tooltip = "EVTTOOLTIP40021"	#ask liege for help.
			}
		}
	}

	option = {
		name = "EVTOPTF40020" #Inside same realm, but its my top liege!
		trigger = {
			is_ruler = yes
			same_realm = FROMFROM
			independent = no
			top_liege = { character = FROMFROM }
		}
		ai_chance = {
			factor = 1000
			modifier = {
				factor = 0
				NOT = { trait = just }
				OR = {
					opinion = { who = FROMFROM value = 25 }
					AND = {
						OR = {
							is_close_relative = FROMFROM
							dynasty = FROMFROM
							is_married = FROMFROM
						}
						NOT = { trait = ruthless }
						NOT = { trait = wroth }
						opinion = { who = FROMFROM value = -24 }
					}
				}
			}
		}
		top_liege = {
			character_event = { 
				id = 40026
				days = 2
				tooltip = "EVTTOOLTIP40026"	#will be exposed.
			}
		}
	}
		
	option = {
		name = "EVTOPTB40020" #Are we his liege?
		trigger = {
			is_vassal_or_below = FROMFROM
			FROM = { FROM = { prisoner = no } }
		}
		ai_chance = {
			factor = 1000
			modifier = {
				factor = 0
				NOT = { trait = just }
				OR = {
					opinion = { who = FROMFROM value = 25 }
					AND = {
						OR = {
							is_close_relative = FROMFROM
							dynasty = FROMFROM
							is_married = FROMFROM
						}
						NOT = { trait = ruthless }
						NOT = { trait = wroth }
						opinion = { who = FROMFROM value = -24 }
					}
				}
			}
		}
		random_list = {
			50 = { 
				modifier = {
					factor = 1.33
					realm_intrigue = 25
					NOT = { realm_intrigue = 37 } 
				}
				modifier = {
					factor = 1.2
					realm_intrigue = 37
				}
				reverse_imprison = FROMFROM
				FROMFROM = { character_event = { id = 151 } }		 			
			} 
			50 = { 
				modifier = {
					factor = 0.5
					realm_intrigue = 25
					NOT = { realm_intrigue = 37 } 
				}
				modifier = {
					factor = 0.4
					realm_intrigue = 37
				}
				FROMFROM = { #avoided prison
					if = { #Flee
						limit = { is_ruler = no }
						banish = yes
						character_event = { id = 152 } 								
					}
					if = { #Rebel?
						limit = { is_ruler = yes }
						character_event = { id = 150 } 
					}							
				} 
			}
		}
	}
	option = {
		name = "EVTOPTC40020" #slay him, he is someone elses prisoner
		trigger = {
			same_realm = FROMFROM
			independent = yes
			FROMFROM = {
		 		prisoner = yes
				NOT = { host = { character = ROOT } }
				NOT = { has_opinion_modifier = { who = ROOT  modifier = i_attempted_murder } }
			}
		}
		ai_chance = {
			factor = 1000
			modifier = {
				factor = 0
				OR = {
					trait = honorable
					opinion = { who = FROMFROM value = 25 }
					AND = {
						OR = {
							is_close_relative = FROMFROM
							dynasty = FROMFROM
							is_married = FROMFROM
						}
						NOT = { trait = ruthless }
						NOT = { trait = wroth }
						opinion = { who = FROMFROM value = -24 }
					}
				}
			}
		}
		FROM = { FROM = { opinion = { who = ROOT modifier = i_attempted_murder months = 2 } } }

		send_assassin = FROMFROM
	}	
	# option = {
		# name = "EVTOPTE40020"	#slay him, he is prisoner
		# trigger = {
			# same_realm = FROMFROM
			# independent = yes
			# FROMFROM = {
		 		# prisoner = yes
				# host = { character = ROOT }
			# }
		# }
		# ai_chance = {
			# factor = 1000
		# }
		# FROMFROM = { 
			# death = {
				# death_reason = death_execution
				# killer = ROOT
			# }
		# }
	# }
	option = {
		trigger = {
			NOT = {	same_realm = FROMFROM }
			FROMFROM = {
				NOT = { has_opinion_modifier = { who = ROOT  modifier = i_attempted_murder } }
			}
		}
		name = "EVTOPTC40020"		# Someone in another realm.
		ai_chance = {
			factor = 1000
			modifier = {
				factor = 0
				OR = {
					trait = honorable
					opinion = { who = FROMFROM value = 25 }
					AND = {
						OR = {
							is_close_relative = FROMFROM
							dynasty = FROMFROM
							is_married = FROMFROM
						}
						NOT = { trait = ruthless }
						NOT = { trait = wroth }
						opinion = { who = FROMFROM value = -24 }
					}
				}
			}
		}
		
		FROMFROM = { opinion = { who = ROOT modifier = i_attempted_murder months = 2 } } 

		send_assassin = FROMFROM
	}
	option = {
		name = "EVTOPTD40020"		#we dont dare do anything..  (player option, incase of worry.)
		ai_chance = {
			factor = 1
		}
		piety = 5
	}
}


# Liege deals with inter-realm assassinations..
character_event = {
	id = 40021
	desc = "EVTDESC40021"
	picture = GFX_evt_shadow
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40021"	 # give claim
		trigger = {
			FROM = { can_press_claims_trigger = yes }
			event_target:we_are_evil_assasinator = { 
				is_ruler = yes 
				primary_title = { NOT = { claimed_by = FROM } }
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 2
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 0
				NOT = { opinion = { who = FROM value = 15 } }
			}
		}
		event_target:we_are_evil_assasinator = {
			primary_title = { add_claim = FROM }
			hidden_tooltip = { character_event = { id = 40022 } }
			opinion = {
				modifier = opinion_betrayed
				who = ROOT
				years = 2
			}
		}
	}
	option = {
		name = "EVTOPTB40021"	 # attempt to imprison
		trigger = {
			event_target:we_are_evil_assasinator = {
				prisoner = no
			}
		}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 10
				trait = just
			}
			modifier = {
				factor = 0
				NOT = { trait = just }
				OR = {
					opinion = { who = FROMFROM value = 25 }
					AND = {
						OR = {
							is_close_relative = FROMFROM
							dynasty = FROMFROM
							is_married = FROMFROM
						}
						NOT = { trait = ruthless }
						NOT = { trait = wroth }
						opinion = { who = FROMFROM value = -24 }
					}
				}
			}
		}
		hidden_tooltip = { FROM = { character_event = { id = 40024 } } }		
		random_list = {
			50 = { 
				modifier = {
					factor = 1.33
					realm_intrigue = 25
					NOT = { realm_intrigue = 37 } 
				}
				modifier = {
					factor = 1.2
					realm_intrigue = 37
				}
				reverse_imprison = event_target:we_are_evil_assasinator
				event_target:we_are_evil_assasinator = { character_event = { id = 151 } }		 			
			} 
			50 = { 
				modifier = {
					factor = 0.5
					realm_intrigue = 25
					NOT = { realm_intrigue = 37 } 
				}
				modifier = {
					factor = 0.4
					realm_intrigue = 37
				}
				event_target:we_are_evil_assasinator = { #avoided prison
					if = { #Flee
						limit = { is_ruler = no }
						banish = yes
						character_event = { id = 152 } 								
					}
					if = { #Rebel?
						limit = { is_ruler = yes }
						character_event = { id = 150 } 
					}							
				} 
			}
		}		
	}
	option = {
		name = "EVTOPTD40021"	 # do nothing
		ai_chance = {
			factor = 1
			modifier = {
				factor = 10
				trait = arbitrary
			}
		}
		reverse_opinion = {
			who = FROM
			modifier = not_supportive_liege
			years = 2
		}		
		hidden_tooltip = { FROM = { character_event = { id = 40025 } } }		
		piety = -10
	}
}

#Legitimate claim on throne
character_event = {
	id = 40022
	desc = "EVTDESC40022"
	picture = GFX_evt_emissary
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40022"	 # ok
		prestige = -10
	}
}

character_event = {
	id = 40024
	desc = "EVTDESC40024"
	picture = GFX_evt_emissary
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40024"	 # ok
		prestige = 5
	}
}

character_event = {
	id = 40025
	desc = "EVTDESC40025"
	picture = GFX_evt_emissary
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40025"	 # ok
		prestige = -5
	}
}

character_event = {
	id = 40026
	desc = "EVTDESC40026"
	picture = GFX_evt_scandal
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA40026"
		if = {
			limit = { trait = just }
			remove_trait = just
		}
		if = {
			limit = { trait = honorable }
			remove_trait = honorable
		}
		prestige = -100
		any_vassal = {
			opinion = {
				who = ROOT
				modifier = black_honor
				years = 5
			}
		}
	}
}


# on_crusade_creation
# CRUSADE!
# new_character is the targetted enemy
# ROOT is the religious head
# FROM is the attacked kingdom title
# narrative_event = {
	# id = 200
	# title = "EVTNAME200"
	# desc = "EVTDESC200"
	# picture = GFX_evt_crusaders
	
	# is_triggered_only = yes
	# major = yes
	# show_root = yes
	# hide_new = yes
	
	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = westerosi_religion }
		# new_character = {
			# religion_group = essos_group
		# }
	# }
	
	# option = {
		# name = "EVTOPTA200"
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200"
		# trigger = {
			# religion_group = ROOT
			# NOT = { religion = ROOT }
		# }
	# }
	# option = {
		# name = "EVTOPTC200"
		# trigger = { NOT = { religion_group = ROOT } }
	# }
# }

# CRUSADE!
# new_character is the targetted enemy
# ROOT is the religious head
# FROM is the attacked kingdom title
# narrative_event = {
	# id = 201
	# title = "EVTNAME200"
	# desc = "EVTDESC201"
	# picture = GFX_evt_crusaders
	
	# is_triggered_only = yes
	# major = yes
	# show_root = yes
	# hide_new = yes
	
	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = christian }
		# new_character = {
			# NOT = { religion_group = muslim }
		# }
	# }
	
	# option = {
		# name = "EVTOPTA200"
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTC200"
		# trigger = { NOT = { religion = ROOT } }
	# }
# }

# JIHAD!
# new_character is the targetted enemy
# ROOT is the religious head
# FROM is the attacked kingdom title
# narrative_event = {
	# id = 320
	# title = "EVTNAME200"
	# desc = "EVTDESC320"
	# picture = GFX_evt_battle
	
	# is_triggered_only = yes
	# major = yes
	
	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion = muslim }
	# }
	
	# option = {
		# name = "EVTOPTA320"
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200"
		# trigger = {
			# religion_group = ROOT
			# NOT = { religion = ROOT }
		# }
	# }
	# option = {
		# name = "EVTOPTC200"
		# trigger = { NOT = { religion_group = ROOT } }
	# }
# }

# DEMAND_RELIGIOUS_CONVERSION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 202
	desc = "EVTDESC202"
	
	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# DEMAND_RELIGIOUS_CONVERSION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 203
	desc = "EVTDESC203"
	
	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# REVOKE_TITLE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 204
	desc = "EVTDESC204"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
	
}

# REVOKE_TITLE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 205
	desc = "EVTDESC205"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_PEACE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 206
	desc = "EVTDESC206"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_PEACE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 207
	desc = "EVTDESC207"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SEND_GIFT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 208
	desc = "EVTDESC208"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SEND_GIFT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 209
	desc = "EVTDESC209"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_VASSALIZATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 210
	desc = "EVTDESC210"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
		NOT = {
			FROM = {
				primary_title = { title = d_nightswatch } 
				trait = nightswatch
				NOT = { PREV = { trait = wildling } }
			}
		}	
		NOT = {
			FROM = {
				primary_title = { check_variable = { which = "de_facto_empire" value = 1 } }	
				any_opinion_modifier_target = { 
					reverse_has_opinion_modifier = { who = ROOT_FROM modifier = opinion_de_facto_liege } 
					higher_tier_than = DUKE
					higher_tier_than = ROOT_FROM
					NOT = { reverse_has_opinion_modifier = { who = ROOT_FROM modifier = opinion_granted_independence } }
				}
			}
		}
	}
	option = {
		name = "OK"
	}
}
diploresponse_event = { #cannot vassalise nightswatch
	id = 21099
	desc = "EVTDESC21099"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		FROM = {
			primary_title = { title = d_nightswatch } 
			trait = nightswatch
			NOT = { PREV = { trait = wildling } }
		}
	}
	option = {
		name = "OK"
		FROM = { 
			set_defacto_liege = THIS 
			opinion = { who = PREV modifier = opinion_dislike multiplier = 2 years = 5 }
		}
	}
}
diploresponse_event = { #cannot vassalise split mega war vassals
	id = 21098
	desc = "EVTDESC21098"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		FROM = {
			primary_title = { check_variable = { which = "de_facto_empire" value = 1 } }	
			any_opinion_modifier_target = { 
				reverse_has_opinion_modifier = { who = ROOT_FROM modifier = opinion_de_facto_liege } 
				higher_tier_than = DUKE
				higher_tier_than = ROOT_FROM
				NOT = { reverse_has_opinion_modifier = { who = ROOT_FROM modifier = opinion_granted_independence } }
			}
		}
		
		NOT = {
			FROM = {
				primary_title = { title = d_nightswatch } 
				trait = nightswatch
				NOT = { PREV = { trait = wildling } }
			}
		}
	}
	option = {
		name = "OK"
		FROM = { 
			set_defacto_liege = THIS 
			opinion = { who = PREV modifier = opinion_dislike multiplier = 2 years = 5 }
		}
	}
}
# OFFER_VASSALIZATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 211
	desc = "EVTDESC211"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ARRANGE_BETROTHAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 212
	desc = "EVTDESC212"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}
	
	option = {
		name = "OK"
		FROM = {
			if = {
				limit = {
					any_courtier = {
						OR = {
							character = PREV
							AND = {
								is_ruler = no
								liege = { character = PREVPREV }
								OR = {
									is_child_of = PREV
									sibling = PREV
									father_even_if_dead = {
										is_child_of = PREVPREV
										is_primary_heir = yes
									}
									mother_even_if_dead = {
										is_child_of = PREVPREV
										is_primary_heir = yes
									}
								}
							}
						}
						betrothed = {
							character = ROOT
							OR = {
								is_child_of = PREVPREVPREV
								sibling = PREVPREVPREV
								father_even_if_dead = {
									is_child_of = PREVPREVPREVPREV
									is_primary_heir = yes
								}
								mother_even_if_dead = {
									is_child_of = PREVPREVPREVPREV
									is_primary_heir = yes
								}
							}
						}
					}
					NOT = { has_opinion_modifier = { who = PREV modifier = arranged_betrothal } }
				}
				opinion = { who = PREV modifier = arranged_betrothal months = 60 }
				#re-evaluate mega war decision if neutral vs rebel leader
				if = {
					limit = {
						has_character_flag = neutral
						rebel_leader = {
							character = PREVPREV
							civil_war = {
								tier = EMPEROR
								war_with = PREV
								OR = {
									FROM = { is_liege_or_above = PREV }
									primary_title = {
										FROM = {
											primary_title = {
												is_variable_equal = { which = "de_facto_empire" which = PREVPREV } 
											}
										}
									}
								}
							}	
						}
					}
					clr_character_flag = mega_war_decision_cooldown
				}
			}
		}	
	}
}
character_event = { #so arranger can be referred to in AI evalutation
	id = 21299

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		FROM = {
			opinion = { who = PREV modifier = opinion_recent_marriage months = 1 }
			reverse_opinion = { who = PREV modifier = opinion_recent_marriage months = 1 }
		}
	}
	
	option = {
		name = "OK"
	}
}	
# ARRANGE_BETROTHAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 213
	desc = "EVTDESC213"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}
	option = {
		name = "OK"
	}
}

# OFFER_SUCCESSION_MARRIGE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 214
	desc = "EVTDESC214"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_SUCCESSION_MARRIGE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 215
	desc = "EVTDESC215"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_MARRIGE_INTERACTION_ACCEPT_EVENT
diploresponse_event = {
	id = 216
	desc = "EVTDESC216"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	trigger = {
		#ai = no
	}
	
	immediate = {
		opinion = { who = FROM modifier = opinion_recent_marriage months = 1 }
		reverse_opinion = { who = FROM modifier = opinion_recent_marriage months = 1 }
	}

	option = {
		name = "OK"			
	}
}

# OFFER_MARRIGE_INTERACTION_DECLINE_EVENT
diploresponse_event = {
	id = 217
	desc = "EVTDESC217"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 218
	desc = "EVTDESC218"

	major = no
	is_triggered_only = yes

	trigger = {
		#ai = no
	}

	option = {
		name = "OK"
		clr_character_flag = captured_in_battle
		clr_character_flag = kidnapped_by_plot
	}
}

# RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 219
	desc = "EVTDESC219"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# EDUCATE_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 220
	desc = "EVTDESC220"

	major = no
	is_friendly = yes
	is_triggered_only = yes
	ai = no
	
	trigger = {
		ai = no
		OR = { #Ai may ask for a feee
			FROM = { ai = no }
			AND = { #only do it for free if child is related/important and ROOT is also important
				OR = {
					is_vassal_or_below = FROM
					liege = { character = FROM }
					liege = { liege = { character = FROM } }
					NOT = { lower_tier_than = FROM }
					same_liege = FROM
					is_allied_with = FROM
					is_friend = FROM
					is_close_relative = FROM
					higher_tier_than = DUKE
				}
				OR = {
					is_close_relative = ROOT
					dynasty = ROOT
					ROOT = {
						OR = {
							is_ruler = yes
							any_heir_title = { always = yes }
							any_claim = { NOT = { tier = BARON } }
							is_close_relative = FROM
							AND = {
								NOT = { dynasty = 0 }
								dynasty = FROM
							}	
						}
					}
				}	
				FROM = { NOT = { trait = kingsguard } }
			}	
			ROOT = { age = 16 }
			AND = { #kingsguard always ask for payment, except from king or family
				OR = {
					has_landed_title = e_iron_throne
					e_iron_throne = { holder_scope = { is_close_relative = PREVPREV } }
				}	
				FROM = { trait = kingsguard }
			}
			AND = {
				trait = nightswatch
				FROM = { trait = nightswatch }
			}
		}
		new_character = {
			NOT_mythical_creature_trigger = yes
		}
	}
	
	option = {
		name = "OK"
		#If child is sibling/child, and educator is not part of own sub-realm, rank, family or liege, vassals will be unhappy
		if = {
			limit = {
				OR = {
					character = ROOT
					any_child_even_if_dead = {
						OR = {
							character = ROOT
							is_parent_of = ROOT
						}
					}
					sibling = ROOT
				}
				ROOT = { NOT = { trait = bastard } }
				NOR = {
					is_vassal_or_below = FROM
					is_liege_or_above = FROM
					FROM = { NOT = { lower_tier_than = PREV } }
					same_liege = FROM
					is_allied_with = FROM
					is_friend = FROM
					is_close_relative = FROM
				}
			}
			custom_tooltip = {
				text = TOOLTIP220VASSALSUNHAPPY
			}
			any_vassal = {
				limit = {
					is_adult = yes
					is_incapable = no
					NOT = { trait = humble }
					NOT = { trait = content }
				}
				opinion = { who = PREV modifier = opinion_unhappy_with_guardian_choice }
			}
		}
	}
	option = {
		name = "EVTOPTB220"	
		FROM = { remove_opinion = { who = PREV modifier = opinion_entrusted_ward } }
		ROOT = { remove_guardian = yes }
	}	
}
#asks for fee
diploresponse_event = {
	id = 22099
	desc = "EVTDESC22099"

	major = no
	is_friendly = yes
	is_triggered_only = yes
	ai = no
	
	trigger = {
		ai = no
		NOR = {
			FROM = { ai = no }
			AND = {
				OR = {
					is_vassal_or_below = FROM
					liege = { character = FROM }
					liege = { liege = { character = FROM } }
					NOT = { lower_tier_than = FROM }
					same_liege = FROM
					is_allied_with = FROM
					is_friend = FROM
					is_close_relative = FROM
					higher_tier_than = DUKE
				}
				OR = {
					is_close_relative = ROOT
					dynasty = ROOT
					ROOT = {
						OR = {
							is_ruler = yes
							any_heir_title = { always = yes }
							any_claim = { NOT = { tier = BARON } }
							is_close_relative = FROM
							AND = {
								NOT = { dynasty = 0 }
								dynasty = FROM
							}	
						}
					}
				}	
				FROM = { NOT = { trait = kingsguard } }
			}	
			ROOT = { age = 16 }
			AND = { #kingsguard always ask for payment, except from king or family
				OR = {
					has_landed_title = e_iron_throne
					e_iron_throne = { holder_scope = { is_close_relative = PREVPREV } }
				}	
				FROM = { trait = kingsguard }
			}
			AND = {
				trait = nightswatch
				FROM = { trait = nightswatch }
			}
		}
		new_character = {
			NOT_mythical_creature_trigger = yes
		}
	}

	option = {
		name = "EVTOPTA22099"	
		#If child is sibling/child, and educator is not part of own sub-realm, rank, family or liege, vassals will be unhappy
		if = {
			limit = {
				OR = {
					character = ROOT
					any_child_even_if_dead = {
						OR = {
							character = ROOT
							is_parent_of = ROOT
						}
					}
					sibling = ROOT
				}
				ROOT = { NOT = { trait = bastard } }
				NOR = {
					is_vassal_or_below = FROM
					is_liege_or_above = FROM
					FROM = { NOT = { lower_tier_than = PREV } }
					same_liege = FROM
					is_allied_with = FROM
					is_friend = FROM
					is_close_relative = FROM
				}
			}
			custom_tooltip = {
				text = TOOLTIP220VASSALSUNHAPPY
			}
			any_vassal = {
				limit = {
					is_adult = yes
					is_incapable = no
					NOT = { trait = humble }
					NOT = { trait = content }
				}
				opinion = { who = PREV modifier = opinion_unhappy_with_guardian_choice }
			}
		}
		tooltip = {
			ROOT = {
				guardian = {
					ROOT = { set_guardian = PREV }
				}
			}
		}
		if = {
			limit = { yearly_income = 150 }
			wealth = -50
			FROM = { wealth = 50 }
			break = yes
		}
		if = {
			limit = {
				OR = {
					yearly_income = 120
					tier = EMPEROR
					FROM = { tier = EMPEROR }
					FROM = { trait = kingsguard }
				}
			}
			wealth = -40
			FROM = { wealth = 40 }
			break = yes
		}
		if = {
			limit = {
				OR = {
					yearly_income = 90
					tier = KING
					FROM = { tier = KING }
				}
			}
			wealth = -30
			FROM = { wealth = 30 }
			break = yes
		}
		if = {
			limit = {
				OR = {
					yearly_income = 60
					tier = DUKE
					FROM = { tier = DUKE }
				}
			}
			wealth = -20
			FROM = { wealth = 20 }
			break = yes
		}
		wealth = -10
		FROM = { wealth = 10 }
	}
	
	option = {
		name = "EVTOPTB22099"
		hidden_tooltip = { FROM = { remove_opinion = { who = PREV modifier = opinion_entrusted_ward } } }
		ROOT = { remove_guardian = yes }
	}
}
#Non-human cannot educate child
character_event = {
	id = 22098
	desc = "EVTDESC22098"

	is_triggered_only = yes
	ai = no
	
	hide_from = yes
	
	trigger = {
		new_character = {
			NOT = { NOT_mythical_creature_trigger = yes }
		}	
	}

	option = {
		name = "EVTOPTA22098"
		ROOT = { tooltip = { show_portrait = yes } }
		random_courtier = {
			limit = {
				is_adult = yes
				prisoner = no
				is_incapable = no
				NOT = {
					any_ward = {
						count = 2
					}
				}
			}
			ROOT = { set_guardian = PREV } 
		}
	}
}

# EDUCATE_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 221
	desc = "EVTDESC221"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ABANDON_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 222
	desc = "EVTDESC222"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ABANDON_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 223
	desc = "EVTDESC223"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# STOP_BACKING_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 224

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC224"

	option = {
		name = "OK"
	}
}

# STOP_BACKING_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 225

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC225"

	option = {
		name = "OK"
	}
}

# JOIN_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 226

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC226"

	option = {
		name = "OK"
	}
}

# JOIN_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 227

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC227"

	option = {
		name = "OK"
	}
}

# GRANT_LANDED_TITLE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 228

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC228"

	option = {
		name = "OK"
	}
}

# GRANT_LANDED_TITLE_INTERACTION_DECLINE_EVENT =
#diploresponse_event = {
#	id = 229
#
#
#
#	is_triggered_only = yes
#	major = no
#
#	trigger = {
#		ai = no
#	}
#
#	desc = "EVTDESC229"
#
#	option = {
#		name = "OK"
#	}
#}

# APPOINT_TO_OFFICE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 230

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC230"

	option = {
		name = "OK"
	}
}

# APPOINT_TO_OFFICE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 231

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC231"

	option = {
		name = "OK"
	}
}

# ASK_FOR_INVASION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 232

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC232"

	option = {
		name = "OK"
	}
}

# ASK_FOR_INVASION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 233
	
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC233"

	option = {
		name = "OK"
	}
}

# ASK_FOR_DIVORCE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 234
	
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC234"

	option = {
		name = "OK"
	}
}

# ASK_FOR_DIVORCE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 235
	
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC235"

	option = {
		name = "OK"
	}
}

# ASK_FOR_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 236
	
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC236"

	option = {
		name = "OK"
	}
}

# ASK_FOR_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 237
	
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC237"

	option = {
		name = "OK"
	}
}

# CALL_ALLY_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 238
	
	border = GFX_event_letter_frame_war
	
	is_triggered_only = yes
	is_friendly = yes

	trigger = {
		ai = no
		NOT = { is_liege_of = FROM }
		NOT = {
			trait = civil_war
			OR = {
				has_landed_title = e_iron_throne
				trait = rebel_leader
			}	
		}	
	}

	desc = EVTDESC238

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_ACCEPT_EVENT for tribal vassals
diploresponse_event = {
	id = 41000
	
	border = GFX_event_letter_frame_war
	
	notification = yes
	
	is_triggered_only = yes
	is_friendly = yes

	trigger = {
		ai = no
		is_liege_of = FROM
	}

	desc = EVTDESC238

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 239
	
	border = GFX_event_letter_frame_war
	
	is_triggered_only = yes

	trigger = {
		ai = no
		NOT = { is_liege_of = FROM }
	}

	desc = EVTDESC239

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_DECLINE_EVENT for tribal vassals
diploresponse_event = {
	id = 41001
	
	border = GFX_event_letter_frame_war
	
	notification = yes
	
	is_triggered_only = yes

	trigger = {
		ai = no
		is_liege_of = FROM
	}

	desc = EVTDESC239

	option = {
		name = OK
	}
}

# DECLARE_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 240
	
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
		OR = {
			FROM = { independent = yes }
			NOT = {
				liege = { 
					OR = {
						character = ROOT
						character = FROM
					}
				}
			}
		}
	}

	desc = "EVTDESC240"

	option = {
		name = {
			text = "OK"
			trigger = {
				NOT = { has_house_words_trigger = yes }
			}
		}
		name = {
			text = "EVTOPTGETHOUSEWORDS"
			trigger = {
				has_house_words_trigger = yes
			}
		} 
	}
}

# DECLARE_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 241
	
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
		FROM = { independent = no }
		liege = { 
			OR = {
				character = ROOT
				character = FROM
			}
		}
	}

	desc = "EVTDESC241"

	option = {
		name = {
			text = "OK"
			trigger = {
				NOT = { has_house_words_trigger = yes }
			}
		}
		name = {
			text = "EVTOPTGETHOUSEWORDS"
			trigger = {
				has_house_words_trigger = yes
			}
		} 
	}
}

# RETRACT_VASSAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 274
	desc = "EVTDESC274"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# RETRACT_VASSAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 275
	desc = "EVTDESC275"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}


# ARRANGE_SUCC_BETROTHAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 330
	desc = "EVTDESC330"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ARRANGE_SUCC_BETROTHAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 331
	desc = "EVTDESC331"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}
	option = {
		name = "OK"
	}
}

# INVITE_TO_COURT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 280

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
		FROM = {
			NOR = {
				trait = slave
				trait = nightswatch
				trait = kingsguard
				trait = maester
				trait = archmaester
				has_character_modifier = maester_education
				trait = dosh_khaleen
				AND = {
					has_character_flag = promoted_to_new_court
					any_opinion_modifier_target = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_new_liege } is_ruler = yes }
				}
				AND = {
					has_character_flag = invited_faction_claimant
					any_opinion_modifier_target = { 
						reverse_has_opinion_modifier = { who = PREV modifier = opinion_supporting_claim } 
						is_ruler = yes 
						supported_claimant = { character = ROOT_FROM }
					}
				}
				trait = dragon
			}
		}
	}

	desc = "EVTDESC280"

	option = {
		name = "OK"
	}
}
diploresponse_event = { #player cheating workaround
	id = 28099

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
		FROM = {
			OR = {
				trait = slave
				trait = nightswatch
				trait = kingsguard
				trait = archmaester
				has_character_modifier = maester_education
				trait = dosh_khaleen
				AND = {
					has_character_flag = promoted_to_new_court
					any_opinion_modifier_target = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_new_liege } is_ruler = yes }
				}
				AND = {
					has_character_flag = invited_faction_claimant
					any_opinion_modifier_target = { 
						reverse_has_opinion_modifier = { who = PREV modifier = opinion_supporting_claim } 
						is_ruler = yes 
						supported_claimant = { character = ROOT_FROM }
					}
				}
				trait = incapable_dragon
			}
		}
	}

	desc = {
		text = "EVTDESC281"
		trigger = { FROM = { NOT = { trait = incapable_dragon } } }
	}	
	desc = {
		text = "EVTDESC281B"
		trigger = { FROM = { trait = incapable_dragon } }
	}	
	
	option = {
		name = "OK"
		if = {
			limit = { FROM = { trait = slave } }
			slave_owner = {
				limit = { has_opinion_modifier = { who = FROM modifier = opinion_my_slave } }
				FROM = { move_character = PREV break = yes }
			}
		}
		if = {
			limit = { FROM = { trait = nightswatch } }
			d_nightswatch = { holder_scope = { FROM = { move_character = PREV break = yes } } }
		}
		if = {
			limit = { FROM = { trait = kingsguard } }
			d_kingsguard = { holder_scope = { FROM = { move_character = PREV break = yes } } }
		}
		if = {
			limit = { 
				FROM = { 
					OR = {
						has_character_modifier = maester_education
						trait = archmaester 
					}	
				} 
			}
			c_the_citadel = { holder_scope = { FROM = { move_character = PREV break = yes } } }
		}
		if = {
			limit = { FROM = { trait = dosh_khaleen } }
			c_dosh_khaleen = { holder_scope = { FROM = { move_character = PREV break = yes } } }
		}
		if = {
			limit = { FROM = { has_character_flag = invited_faction_claimant } }
			FROM = {
				random_opinion_modifier_target = {
					limit = { 
						reverse_has_opinion_modifier = { who = PREV modifier = opinion_supporting_claim } 
						is_ruler = yes 
						supported_claimant = { character = ROOT_FROM }
					}
					ROOT_FROM = { move_character = PREV break = yes }
				}
			}	
		}
		if = {
			limit = { FROM = { has_character_flag = promoted_to_new_court } }
			FROM = {
				random_opinion_modifier_target = {
					limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_new_liege } is_ruler = yes }
					ROOT_FROM = { move_character = PREV break = yes }
				}
			}	
		}	
		if = {
			limit = { FROM = { trait = incapable_dragon } }
			FROM = {
				random_friend = {
					if = {  #make sure it is in same court as rider
						limit = { 			
							is_alive = yes
							NOT = { trait = slave } #not if in captivity
							NAND = {
								is_consort = yes
								consort = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_forced_consort } } 
							}
						}
						if = {
							limit = { is_ruler = yes }
							ROOT_FROM = { move_character = PREV break = yes }
						}
						if = {
							limit = { is_ruler = no }
							liege = { ROOT_FROM = { move_character = PREV break = yes } }
						}
					}	
				}
				221 = {
					random_province_lord = {
						limit = { tier = BARON }
						ROOT_FROM = { move_character = PREV break = yes }
					}
				}
			}	
		}
	}
}
# INVITE_TO_COURT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 281

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC281"

	option = {
		name = "OK"
	}
}

# ASK_FOR_VASSALIZATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 282

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC282"

	option = {
		name = "OK"
	}
}

# ASK_FOR_VASSALIZATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 283

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC283"

	option = {
		name = "OK"
	}
}

# ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 284

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC284"

	option = {
		name = "OK"
	}
}

# ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 285

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC285"

	option = {
		name = "OK"
	}
}

# ASK_TO_RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 286

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC286"

	option = {
		name = "OK"
	}
}

# ASK_TO_RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 287

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC287"

	option = {
		name = "OK"
	}
}
# SETTLE_ADVENTURER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 288

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC288"

	option = {
		name = "OK"
	}
}

# SETTLE_ADVENTURER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 289

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC289"

	option = {
		name = "OK"
	}
}

# ABSORB_CLAN_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 503
	desc = "EVTDESC503"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ABSORB_CLAN_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 504
	desc = "EVTDESC504"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		#ai = no
	}
	
	immediate = {
		FROM = { set_character_flag = refused_nomad_absorption }
	}

	option = {
		name = "OK"
		reverse_war = {
			target = FROM
			casus_belli = bid_for_independence
		}
	}
}

# FORM_BLOOD_OATH_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 505
	desc = "EVTDESC505"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORM_BLOOD_OATH_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 506
	desc = "EVTDESC506"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SETTLE_FEUD_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 507
	desc = "EVTDESC507"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA507"
	}
}

# SETTLE_FEUD_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 508
	desc = "EVTDESC508"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA508"
	}
}

# SPLIT_CLAN_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 509
	desc = "EVTDESC509"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SPLIT_CLAN_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 510
	desc = "EVTDESC510"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# On-action event: Royal Marriage Aid Duty
character_event = {
	id = 500
	#desc = "EVTDESC500"
	#picture = "GFX_evt_marriage"
	
	is_triggered_only = yes
	only_rulers = yes
	hide_window = yes
	
	trigger = {
		NOT = { has_character_flag = no_wedding_event }
		FROM = { NOT = { has_character_flag = no_wedding_event } }
		OR = {
			character = FROM #Dowry for self
			FROM = { #Dowry for son, grandson, or heir if not elective
				OR = {
					is_child_of = ROOT
					father_even_if_dead = { is_child_of = ROOT }
					mother_even_if_dead = { is_child_of = ROOT }
					AND = {
						is_primary_heir = ROOT
						ROOT = { primary_title = { NOT = { has_elective_law_trigger = yes } } }
					}
				}				
			}
		}
	}

	immediate = {
		character_event = { id = 500995 days = 4 } 
	}
	
	option = {	
		name = OK
	}
}
character_event = { #find dowry target
	id = 500995
	
	is_triggered_only = yes
	hide_window = yes
	only_rulers = yes
	
	trigger = {
		rules_in_active_region_trigger = yes #optimisation
		FROMFROM = { is_married = yes }
	}

	immediate = {
		FROMFROM = {
			if = { #reinstate inheritance?
				limit = {
					NOT = { character = ROOT }
					is_child_of = ROOT
					trait = disinherited
					has_character_flag = forbidden_marriage
				}
				ROOT = { character_event = { id = lovers.501 days = 4 } }
			}
		}
		if = { #Ai may re-evaluate mega war neutrality
			limit = {
				independent = yes
				ai = yes
				has_character_flag = neutral				
				FROMFROM = { 
					OR = {
						sibling = ROOT
						is_child_of = ROOT
						is_parent_of = ROOT
					}
					any_spouse = {
						OR = {
							AND = {
								higher_tier_than = ROOT
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
								has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							}	
							AND = {
								is_ruler = yes
								trait = rebel_leader
								has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							}	
							any_dynasty_member = { 
								is_ruler = yes
								higher_tier_than = ROOT
								OR = {
									sibling = PREV
									is_child_of = PREV
									any_child = { character = PREVPREV }
								}
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
								has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							}
							any_dynasty_member = { 
								is_ruler = yes
								trait = rebel_leader
								OR = {
									sibling = PREV
									is_child_of = PREV
									any_child = { character = PREVPREV }
								}
								has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							}
						}
					}	
				}
			}
			clr_character_flag = neutral 
			clr_character_flag = mega_war_decision_cooldown
			character_event = { id = mega_wars.21 days = 7 }
		}
		if = { #Check if bride has received inheritance already
			limit = { ai = no }
			FROMFROM = { 
				if = {
					limit = { is_female = no }
					any_spouse = {
						limit = { 
							has_character_flag = received_inheritance
							OR = {
								has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
								any_dynasty_member = { 
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
								}
							}
						}
						ROOT_FROMFROM = { set_character_flag = inherited_dowry }
						ROOT = { character_event = { id = 500998 } }
						break = yes
					}
				}	
			}
		}
		clear_event_target = dowry_target
		#Find dowry target
		FROMFROM = { 		
			if = {
				limit = { is_female = no }
				any_spouse = {
					limit = { NOT = { has_character_flag = received_inheritance } }	
					if = {
						limit = { has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage } }
						save_event_target_as = dowry_target
						ROOT = { character_event = { id = 500998 } }
						break = yes
					}						
					random_dynasty_member = { 
						limit = {
							is_close_relative = PREV
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
						}
						save_event_target_as = dowry_target
						ROOT = { character_event = { id = 500998 } }
						break = yes			
					}	
				}
			}	
			if = { #unlanded husband may seek dowry
				limit = { 
					is_female = yes 
					NOT = { has_character_flag = received_inheritance }
				}
				spouse = {
					if = {
						limit = { 
							is_ruler = no
							liege = { character = ROOT }
						}	
						ROOT = { save_event_target_as = dowry_target }
						character_event = { id = 500998 }
					}		
				}
			}
			#if no dowry, add modifiers for wedding
			add_character_modifier = {
				name = "wedding"
				duration = 60
			}
		}		
	}
	
	option = {
		name = OK	
	}
}	

# AI Marriage Evaluation
character_event = { #on marriage and betrothal
	id = 500992

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		NOT = { has_character_flag = no_wedding_event }
		FROM = { NOT = { has_character_flag = no_wedding_event } }
		OR = {
			character = FROM #Self
			FROM = { #Check the AI for all of these
				dynasty = ROOT		
				OR = {
					is_child_of = ROOT
					father_even_if_dead = {
						OR = {
							is_child_of = ROOT 
							sibling = ROOT
						}	
					}
					mother_even_if_dead = { 
						OR = {
							is_child_of = ROOT 
							sibling = ROOT
						}
					}
					AND = {
						is_primary_heir = ROOT
						ROOT = { primary_title = { NOT = { has_elective_law_trigger = yes } } }
					}
					sibling = ROOT
					is_parent_of = ROOT
				}				
			}
			FROM = { #heirs/dragon riders being married off by non-relatives
				OR = {
					any_heir_title = { higher_tier_than = BARON }
					any_pretender_title = { higher_tier_than = BARON }
					can_use_dragon_abilities_trigger = yes
				}
				NOT = { is_close_relative = ROOT }
			}
		}
	}

	immediate = {
		#Find spouse or betrothed
		new_character = { save_event_target_as = spouse_to_evaluate }
		#Patch 2.1.3 fucked this up, needs to trigger 1 day later now
		if = {
			limit = { ai = yes }
			character_event = { id = 500996 days = 2 } #AI marriage evaluation
		}
		if = {
			limit = {
				FROM = { #heirs/dragon riders being married off by non-relatives
					is_ruler = no
					OR = {
						any_heir_title = { higher_tier_than = BARON }
						any_pretender_title = { higher_tier_than = BARON }
						can_use_dragon_abilities_trigger = yes
					}
					NOT = { is_close_relative = ROOT }
					NAND = {
						has_character_flag = forced_betrothal
						has_opinion_modifier = { who = event_target:spouse_to_evaluate modifier = opinion_forced_marriage }
					}
				}
			}
			ROOT = { save_event_target_as = old_liege }
			FROM = { character_event = { id = 500996 days = 3 } } #AI marriage evaluation
		}
	}
	
	option = {	
		name = OK
	}
}
character_event = {
	id = 500996

	is_triggered_only = yes
	#only_rulers = yes
	ai = yes
	#hide_window = yes
	
	trigger = { 
		FROMFROM = { 
			OR = {
				is_married = yes 
				is_betrothed = yes
			}	
		} 
		NOT = { has_game_rule = { name = ai_female_marriage_correction value = off } }
	}
	
	immediate = {
		clear_event_target = savage
		#Determine nomadic marriage
		if = {
			limit = {
				NOT = { has_global_flag = ai_marriage_correction_NOMAD_OFF }
				is_ruler = yes
				is_nomadic = no
				is_tribal = no
				NOT = { religion = gods_sarnor }
				NOT = { religion = gods_sarnor_reformed }
				OR = {
					is_close_relative = FROMFROM
					current_heir = { character = FROMFROM }
				}		
				event_target:spouse_to_evaluate = {
					NOT = { culture_group = ROOT }
					OR = {
						is_nomadic = yes
						culture = dothraki
						culture = jogos_nhai
						AND = {
							is_ruler = no
							liege = { is_nomadic = yes }
						}
						any_close_relative = { is_nomadic = yes }
					}
				}				
			}
			event_target:spouse_to_evaluate = {
				if = {
					limit = {
						higher_tier_than = DUKE
						is_nomadic = yes	
					}
					save_event_target_as = savage
				}
				else = {
					random_dynasty_member = { 
						limit = {
							higher_tier_than = DUKE
							is_nomadic = yes
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							NOT = { religion = ROOT }
							NOT = { culture_group = ROOT }
							OR = {
								is_close_relative = PREV
								dynasty = PREV
							}	
						}	
						save_event_target_as = savage
					}
				}
			}
		}	
		#Determine deserter marriage
		if = {
			limit = {
				is_ruler = yes
				NOT = { trait = wildling }
				NOT = { trait = deserter }
				NOT = { event_target:savage = { always = yes } }
				event_target:spouse_to_evaluate = {
					OR = {
						trait = deserter
						any_close_relative = { trait = deserter }
					}
				}				
			}
			event_target:spouse_to_evaluate = {
				if = {
					limit = {
						trait = deserter
						is_ruler = yes
					}
					save_event_target_as = savage
				}
				else_if = {
					limit = { is_ruler = no }
					random_dynasty_member = { 
						limit = {
							trait = deserter
							is_ruler = yes
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							OR = {
								is_close_relative = PREV
								dynasty = PREV
							}	
						}	
						save_event_target_as = savage
					}
				}
			}
		}
		#Determine ourbreeding marriage
		if = {
			limit = {
				is_ruler = yes
				NOT = { event_target:savage = { always = yes } }
				event_target:spouse_to_evaluate = {
					cannot_outbreed_trigger = yes
					NOT = { graphical_culture = ROOT_FROMFROM }
				}				
			}
			event_target:spouse_to_evaluate = {
				save_event_target_as = savage
			}
		}
	}
	
	option = {
		name = "I AM DERP AI" #remove silly AI lowborn marriages, find vassal betrothal if possible
		trigger = {
			higher_tier_than = COUNT
			OR = {
				is_close_relative = ROOT_FROM
				current_heir = { character = ROOT_FROMFROM }
			}
			FROMFROM = {
				NOT = { age = 30 }
				NOT = { dynasty = 0 }
				NOT = { trait = bastard }
				OR = {
					event_target:spouse_to_evaluate = { dynasty = 0 }
					AND = {
						event_target:spouse_to_evaluate = {
							trait = bastard 
							is_ruler = no
							liege = { character = ROOT }
						}
						is_female = yes
						is_married_matrilineally = no
					}
				}	
				NOT = { has_character_flag = keep_lowborn_marriage }
			}
		}
		ai_chance = { factor = 9999 }	
		FROMFROM = { 
			set_character_flag = no_wedding_event #stop event triggering twice
			if = {
				limit = { is_female = yes }
				child_fertility_debuff = yes
				event_target:spouse_to_evaluate = {
					set_character_flag = no_wedding_event
					remove_spouse = PREV
					add_spouse_matrilineal = PREV
					clr_character_flag = no_wedding_event
					child_fertility_debuff = yes
				}
				clr_character_flag = no_wedding_event
			}
			#First try and find vassal with suitable bride
			if = {
				limit = { is_female = no }	
				ROOT = {
					random_realm_lord = { 
						limit = {
							OR = {
								AND = {
									tier = COUNT
									ROOT = { tier = DUKE }
								}
								AND = {
									tier = COUNT
									culture_group = valyrian
									culture_group = ROOT
								}
								higher_tier_than = COUNT	
							}
							ai = yes		
							religion = ROOT
							NOT = { dynasty = 0 }
							is_theocracy = no						
							opinion = { who = ROOT value = -15 }
							any_courtier = {
								NOT = { age = 30 }
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								can_marry_trigger = yes
								NAND = { 
									cannot_outbreed_trigger = yes 
									NOT = { graphical_culture = ROOT_FROMFROM }
								}
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
								}
							}
						}
						random_courtier = {
							limit = {
								NOT = { age = 30 }
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								can_marry_trigger = yes
								NAND = { 
									cannot_outbreed_trigger = yes 
									NOT = { graphical_culture = ROOT_FROMFROM }
								}
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
								}
							}
							ROOT_FROMFROM = {
								event_target:spouse_to_evaluate = {
									remove_spouse = PREV
									break_betrothal = PREV
								}
							}
							
							add_spouse = ROOT_FROMFROM
							PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }					
							child_fertility_debuff = yes
							ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							
							# ###old block, betrothal command is broken NOW WORKS...or maybe not
							# if = {
								# limit = {
									# age = 14
									# ROOT_FROMFROM = { age = 14 }
								# }
								# add_spouse = ROOT_FROMFROM
								# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							# }
							# if = {
								# limit = {
									# OR = {
										# NOT = { age = 14 }
										# ROOT_FROMFROM = { NOT = { age = 14 } }
									# }	
								# }
								# ROOT_FROMFROM = { 
									# remove_character_modifier = wedding
									# add_betrothal = PREV 
								# }
								# add_betrothal = ROOT_FROMFROM
							# }
							break = yes
						}
					}
					liege = { #Then try a fellow same tier vassal
						random_realm_lord = { 
							limit = {
								tier = ROOT
								NOT = { character = ROOT }
								ai = yes		
								religion = ROOT
								culture_group = ROOT
								NOT = { dynasty = 0 }
								is_theocracy = no						
								opinion = { who = ROOT value = -15 }
								reverse_opinion = { who = ROOT value = -15 }
								any_courtier = {
									NOT = { age = 30 }
									is_ruler = no
									NOT = { same_sex = ROOT_FROMFROM }
									dynasty = PREV
									is_close_relative = PREV
									can_marry_trigger = yes
									NAND = { 
										cannot_outbreed_trigger = yes 
										NOT = { graphical_culture = ROOT_FROMFROM }
									}
									is_pregnant = no
									NOT = { trait = celibate }
									NOT = { trait = inbred }
									OR = {
										NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
										AND = {
											ROOT_FROMFROM = { age = 18 }
											age = 18
										}
									}
								}
							}
							random_courtier = {
								limit = {
									NOT = { age = 30 }
									is_ruler = no
									NOT = { same_sex = ROOT_FROMFROM }
									dynasty = PREV
									is_close_relative = PREV
									can_marry_trigger = yes
									NAND = { 
										cannot_outbreed_trigger = yes 
										NOT = { graphical_culture = ROOT_FROMFROM }
									}
									is_pregnant = no
									NOT = { trait = celibate }
									NOT = { trait = inbred }
									OR = {
										NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
										AND = {
											ROOT_FROMFROM = { age = 18 }
											age = 18
										}
									}
								}
								ROOT_FROMFROM = {
									event_target:spouse_to_evaluate = {
										remove_spouse = PREV
										break_betrothal = PREV
									}
								}
								add_spouse = ROOT_FROMFROM
								PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }					
								child_fertility_debuff = yes
								ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
								
								# ###old block, betrothal command is broken NOW WORKS...or maybe not
								# if = {
									# limit = {
										# age = 14
										# ROOT_FROMFROM = { age = 14 }
									# }
									# add_spouse = ROOT_FROMFROM
									# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
									# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
								# }
								# if = {
									# limit = {
										# OR = {
											# NOT = { age = 14 }
											# ROOT_FROMFROM = { NOT = { age = 14 } }
										# }	
									# }
									# ROOT_FROMFROM = { 
										# remove_character_modifier = wedding
										# add_betrothal = PREV 
									# }
									# add_betrothal = ROOT_FROMFROM
								# }
								break = yes								
							}
						}
					}
				}					
				#If still no-one found give bride a random dynasty and parents
				event_target:spouse_to_evaluate = {
					if = {
						limit = {
							dynasty = 0
							father_even_if_dead = { dynasty = 0 } 
						}	
						dynasty = father_bastard
						father_even_if_dead = { dynasty = PREV } 
					}					
					if = {
						limit = {
							dynasty = 0
							NOT = { father_even_if_dead = { always = yes } } 
							NOT = { mother_even_if_dead = { always = yes } }
						}	
						ROOT = {
							create_character = {
								random_traits = yes
								dynasty = random
								female = no
								age = 45
								culture = PREV
								religion = ROOT
							}
							new_character = {
								if = {
									limit = { religion = the_seven }
									knight_character_effect = yes
								}
								random_list = {
									30 = { add_trait = poor_warrior }
									60 = { add_trait = trained_warrior }
									10 = { add_trait = skilled_warrior }
								}
								event_target:spouse_to_evaluate = {
									set_father = PREV
									dynasty = PREV
								}	
							}
							create_character = {
								random_traits = yes
								dynasty = none
								female = yes
								age = 45
								culture = PREV
								religion = ROOT
							}
							new_character = {
								event_target:spouse_to_evaluate = {
									set_mother = PREV
									father = { add_spouse = PREVPREV }
								}
							}
						}	
					}
				}	
			}
			clr_character_flag = no_wedding_event			
		}	
	}
	
	option = {
		name = "I AM DERP AI" #If a female in a cognatic realm, ruler or primary heir try and get more matri marriages
		trigger = {
			NOT = { has_global_flag = ai_marriage_correction_FEMALE_OFF }
			is_ruler = yes
			OR = {
				character = FROMFROM #evaluate own marriage
				current_heir = { character = FROMFROM }
				AND = {
					is_close_relative = ROOT_FROM
					primary_title = { 
						OR = {
							has_law = true_cognatic_succession 
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}	
					}
				}	
			}	
			FROMFROM = {
				is_female = yes
				NOT = { is_betrothed = event_target:spouse_to_evaluate } #cant distinguish between matrilineal or not
				NOT = { is_married_matrilineally = yes }
				NOT = { dynasty = 0 }
				NOT = { trait = bastard }
				NAND = {
					trait = disinherited
					ROOT = { has_character_flag = matri_inheritance_check }
				}
			}
			event_target:spouse_to_evaluate = { NOT = { dynasty = FROMFROM } }
		}
		ai_chance = { factor = 9999 }	
		FROMFROM = {
			set_character_flag = no_wedding_event
			if = { #If married to some bozo change to matrilineal immediately
				limit = { 
					event_target:spouse_to_evaluate = {
						is_ruler = no
						OR = {
							dynasty = 0
							trait = bastard
							AND = {
								NOT = { father_even_if_dead = { always = yes } }
								NOT = { mother_even_if_dead = { always = yes } }
							}
						}
					}
				}
				if = {
					limit = { is_ruler = no }
					move_character = ROOT
				}
				event_target:spouse_to_evaluate = {
					set_character_flag = no_wedding_event
					remove_spouse = PREV
					add_spouse_matrilineal = PREV
					clr_character_flag = no_wedding_event
					if = {
						limit = { is_ruler = no }
						move_character = ROOT
					}
					prestige = -150
					child_fertility_debuff = yes
				}
				child_fertility_debuff = yes
				prestige = 150
				clr_character_flag = no_wedding_event			
				break = yes
			}
			#To disinherit the daughter a spare relation must exist, or be a ruler
			if = {
				limit = {
					OR = {
						character = ROOT
						any_close_relative = {
							is_alive = yes
							dynasty = ROOT
							OR = {
								is_female = no
								is_married_matrilineally = yes
							}
							can_press_claims_trigger = yes
							prisoner = no
							is_incapable = no
						}
					}	
				}
				if = { #If NOT a ruler and spouse is equal or higher tier maybe keep the marriage
					limit = { 
						NOT = { character = ROOT } #Not ruler
						event_target:spouse_to_evaluate = {
							OR = {
								AND = {
									is_ruler = yes
									ROOT = { NOT = { higher_tier_than = PREV } }
								}
								any_heir_title = { ROOT = { NOT = { higher_tier_than = PREV } } }
								any_claim = { ROOT = { lower_tier_than = PREV } }
								any_dynasty_member = { 
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
									ROOT = { NOT = { higher_tier_than = PREV } }
								}
							}
						}
					}
					random = {
						chance = 75
						add_trait = disinherited
						ROOT = { 
							set_character_flag = matri_inheritance_check 
							any_demesne_title = {
								limit = { 
									OR = {
										has_law = succ_primogeniture
										has_law = succ_gavelkind
									}
								}	
								add_law = dornish_succession
							}
							recalc_succession = yes
						}
						recalc_succession = yes
						clr_character_flag = no_wedding_event
						break = yes
					}	
				}
				if = { #If IS a ruler and spouse higher tier maybe keep the marriage
					limit = { 
						character = ROOT #Is ruler
						event_target:spouse_to_evaluate = {
							OR = {
								AND = {
									is_ruler = yes
									ROOT = { lower_tier_than = PREV }
								}
								any_heir_title = { ROOT = { lower_tier_than = PREV } }
								any_claim = { ROOT = { lower_tier_than = PREV } }
								any_dynasty_member = { 
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
									ROOT = { lower_tier_than = PREV }
								}
							}
						}
					}
					random = {
						chance = 75
						add_trait = disinherited
						ROOT = { 
							set_character_flag = matri_inheritance_check 
							any_demesne_title = {
								limit = { 
									OR = {
										has_law = succ_primogeniture
										has_law = succ_gavelkind
									}
								}	
								add_law = dornish_succession
							}
							recalc_succession = yes
						}
						recalc_succession = yes	
						clr_character_flag = no_wedding_event
						break = yes
					}	
				}
				if = { #If not primary heir can maybe keep marriage if a good alliance
					limit = { 
						is_primary_heir = no
						NOT = { character = ROOT }
						NOT = { any_heir_title = { always = yes } }
						any_sibling = {
							is_alive = yes
							is_older_than = PREV
							OR = {
								is_female = no
								is_married_matrilineally = yes
							}
							can_press_claims_trigger = yes
							prisoner = no
							is_incapable = no
						}
						event_target:spouse_to_evaluate = {
							OR = {
								AND = {
									is_ruler = yes
									higher_tier_than = COUNT
								}
								any_heir_title = { higher_tier_than = COUNT }
								any_claim = { ROOT = { lower_tier_than = PREV } }
								any_dynasty_member = { 
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
									higher_tier_than = COUNT
								}
							}
						}
					}
					random = {
						chance = 75
						add_trait = disinherited
						ROOT = { 
							set_character_flag = matri_inheritance_check 
							any_demesne_title = {
								limit = { 
									OR = {
										has_law = succ_primogeniture
										has_law = succ_gavelkind
									}
								}	
								add_law = dornish_succession
							}
							recalc_succession = yes
						}
						recalc_succession = yes
						clr_character_flag = no_wedding_event
						break = yes
					}	
				}
			}
			if = { #If still not good change to matrilineal if possible
				limit = { 
					event_target:spouse_to_evaluate = {
						NOR = {
							is_primary_heir = yes
							is_ruler = yes
							any_heir_title = { always = yes }
							any_pretender_title = { always = yes }
							father_even_if_dead = { is_ruler = yes }
							mother_even_if_dead = { is_ruler = yes }
							father_even_if_dead = { any_heir_title = { always = yes } }
							mother_even_if_dead = { any_heir_title = { always = yes } }
							any_sibling_even_if_dead = { is_ruler = yes }
							any_claim = { NOT = { lower_tier_than = ROOT } }
							can_use_dragon_abilities_trigger = yes
						}
					}
				}
				if = {
					limit = { is_ruler = no }
					move_character = ROOT
				}
				event_target:spouse_to_evaluate = {
					set_character_flag = no_wedding_event
					remove_spouse = PREV
					add_spouse_matrilineal = PREV
					clr_character_flag = no_wedding_event
					if = {
						limit = { is_ruler = no }
						move_character = ROOT
					}
					prestige = -150
					child_fertility_debuff = yes
				}
				child_fertility_debuff = yes
				prestige = 150
				clr_character_flag = no_wedding_event
				break = yes
			}	
			#If still not valid, divorce and find a better match
			event_target:spouse_to_evaluate = { letter_event = { id = 500999 days = 2 } }
			remove_spouse = event_target:spouse_to_evaluate
			break_betrothal = event_target:spouse_to_evaluate
			if = {
				limit = { is_ruler = no }
				move_character = ROOT
			}
			prestige = 150
			ROOT = {
				random_realm_character = {
					limit = {
						age = 16
						NOT = { age = 30 }
						NOT = { same_sex = ROOT_FROMFROM }
						prisoner = no
						liege = { 
							ai = yes 
							NOT = { is_close_relative = PREV }
						}						
						can_marry_trigger = yes
						NAND = { 
							cannot_outbreed_trigger = yes 
							NOT = { graphical_culture = ROOT_FROMFROM }
						}
						NOT = { is_close_relative = ROOT_FROMFROM }
						NOT = { dynasty = 0 }
						father_even_if_dead = { always = yes }
						NOR = {
							is_primary_heir = yes
							is_ruler = yes
							any_heir_title = { always = yes }
							any_pretender_title = { always = yes }
							father_even_if_dead = { is_ruler = yes }
							mother_even_if_dead = { is_ruler = yes }
							father_even_if_dead = { any_heir_title = { always = yes } }
							mother_even_if_dead = { any_heir_title = { always = yes } }
							any_sibling_even_if_dead = { is_ruler = yes }
							any_claim = { NOT = { lower_tier_than = ROOT } }
							can_use_dragon_abilities_trigger = yes
						}
						NOT = { trait = celibate }
						is_incapable = no
						NOT = { trait = inbred }
						
						NOT = { has_character_modifier = planning_claimant_adventure }
						NOT = { has_character_modifier = maester_education }
						NOT = { has_character_modifier = foreign_trainer }
						NOT = { liege = { is_theocracy = yes } }
						NOT = { trait = wikid }
					}
					liege = { 
						opinion = { who = ROOT modifier = opinion_recent_marriage } 
						reverse_opinion = { who = ROOT modifier = opinion_recent_marriage } 
					}
					add_spouse_matrilineal = ROOT_FROMFROM
					ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
					break = yes
				}
			}
			#If still not married create a random character to marry her
			ROOT = {
				capital_scope = {
					ROOT = {
						create_character = {
							random_traits = yes
							dynasty = actually_culture
							culture = PREV
							religion = PREV
							female = no
							age = 21
						}
						new_character = {
							set_character_flag = no_wedding_event
							add_spouse_matrilineal = ROOT_FROMFROM
							if = {
								limit = { religion = the_seven }
								knight_character_effect = yes
							}
							random_list = {
								30 = { add_trait = poor_warrior }
								60 = { add_trait = trained_warrior }
								10 = { add_trait = skilled_warrior }
							}
							remove_trait = imbecile
							remove_trait = inbred
							remove_trait = celibate
							remove_trait = infirm
							remove_trait = incapable
							remove_trait = leper
							remove_trait = possessed
							remove_trait = ill
							remove_trait = pneumonic
							remove_trait = maimed
							clr_character_flag = no_wedding_event	
						}
					}	
				}	
			}	
			clr_character_flag = no_wedding_event			
		}	
	}
	
	option = {
		name = "TARG" #AI Targ maybe go for political marriage instead of incest?
		trigger = {
			NOT = { has_global_flag = ai_marriage_correction_DIVINE_OFF }
			is_divine_blood_dynasty_trigger = yes
			higher_tier_than = COUNT
			FROMFROM = {
				dynasty = ROOT
				event_target:spouse_to_evaluate = { 
					dynasty = ROOT
					NOT = { #Dont remove marriages from children/grandchildren of the player
						any_player = {
							OR = {
								is_parent_of = PREV
								is_grandparent_of = PREV
							}
							dynasty = PREV
							higher_tier_than = PREV
							is_alive = yes
						}
					}
				}
				NOT = { #Dont remove marriages from children/grandchildren of the player
					any_player = {
						OR = {
							is_parent_of = PREV
							is_grandparent_of = PREV
						}
						dynasty = PREV
						higher_tier_than = PREV
						is_alive = yes
					}
				}
			}	
			NOT = { #Dont remove human made marriages
				event_target:spouse_to_evaluate = {
					OR = {
						AND = {
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							OR = {
								higher_tier_than = COUNT
								ai = no
							}	
						}
						any_dynasty_member = { 
							is_close_relative = PREV
							AND = {
								has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
								OR = {
									higher_tier_than = COUNT
									ai = no
								}	
							}
						}	
					}
				}
			}			
		}
		ai_chance = { 
			factor = 0.33
			modifier = {
				factor = 100
				event_target:spouse_to_evaluate = { is_female = yes age = 40 } #yes the ai actually does this
			}
			modifier = { #Avoid parent-child marriages
				factor = 6
				FROMFROM = { 	
					OR = {
						is_child_of = event_target:spouse_to_evaluate 
						is_grandchild_of = event_target:spouse_to_evaluate 
						is_parent_of = event_target:spouse_to_evaluate 
						is_grandparent_of = event_target:spouse_to_evaluate 
					}	
				}
			}
			modifier = { #Female heir
				factor = 0.25
				OR = {
					FROMFROM = { 	
						is_female = yes
						any_heir_title = { holder_scope = { character = ROOT } }
					}
					event_target:spouse_to_evaluate = { 	
						is_female = yes
						any_heir_title = { holder_scope = { character = ROOT } }
					}
				}	
			}
			
			modifier = {
				factor = 4
				trait = humble
			}
			modifier = {
				factor = 4
				trait = cynical
			}
			modifier = {
				factor = 4
				trait = ruthless
			}
			modifier = {
				factor = 4
				trait = diligent
			}
			modifier = {
				factor = 0.25
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = zealous
			}
			modifier = {
				factor = 0.25
				trait = lunatic
			}
			modifier = {
				factor = 0.25
				trait = honorable
			}
		}
		FROMFROM = { set_character_flag = no_wedding_event }
		random_realm_lord = {
			limit = {			
				OR = {
					AND = {
						tier = COUNT
						OR = {
							culture_group = valyrian
							ROOT = { tier = DUKE }							
						}	
					}
					AND = {
						tier = DUKE
						OR = {
							culture_group = valyrian
							culture_group = ROOT
							prestige = 600
						}	
					}
					tier = KING	
				}
				ai = yes		
				religion = ROOT
				is_theocracy = no						
				opinion = { who = ROOT value = -15 }
				NOT = { dynasty = ROOT }
				NOT = { dynasty = 0 }
				any_courtier = {
					NOT = { age = 30 }
					is_ruler = no
					NOT = { same_sex = ROOT_FROMFROM }
					dynasty = PREV
					is_close_relative = PREV
					can_marry_trigger = yes
					NAND = { 
						cannot_outbreed_trigger = yes 
						NOT = { graphical_culture = ROOT_FROMFROM }
					}
					is_pregnant = no
					NOT = { trait = celibate }
					NOT = { trait = inbred }
					OR = {
						NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
						AND = {
							ROOT_FROMFROM = { age = 18 }
							age = 18
						}
					}
				}
			}
			random_courtier = {
				limit = {
					NOT = { age = 30 }
					is_ruler = no
					NOT = { same_sex = ROOT_FROMFROM }
					dynasty = PREV
					is_close_relative = PREV
					can_marry_trigger = yes
					NAND = { 
						cannot_outbreed_trigger = yes 
						NOT = { graphical_culture = ROOT_FROMFROM }
					}
					is_pregnant = no
					NOT = { trait = celibate }
					NOT = { trait = inbred }
					OR = {
						NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
						AND = {
							ROOT_FROMFROM = { age = 18 }
							age = 18
						}
					}
				}
				FROMFROM = { 
					event_target:spouse_to_evaluate = {
						remove_character_modifier = wedding
						remove_spouse = PREV
						break_betrothal = PREV
					}
				}	
				PREV = { 
					opinion = { who = ROOT modifier = opinion_recent_marriage } 
					reverse_opinion = { who = ROOT modifier = opinion_recent_marriage } 
				}
				add_spouse = ROOT_FROMFROM
				if = {
					limit = {
						age = 14
						ROOT_FROMFROM = { age = 14 }
					}
					ROOT_FROMFROM = { 
						if = {
							limit = {
								NOT = { any_spouse = { is_main_spouse = no } }	
							}
							add_character_modifier = {
								name = "wedding"
								duration = 60
							}
						}
						clr_character_flag = keep_lowborn_marriage
					}
				}	
				child_fertility_debuff = yes
				ROOT_FROMFROM = {
					child_fertility_debuff = yes
				}
				
				###old block, betrothal command is broken NOW WORKS...or maybe not
				# if = {
					# limit = {
						# age = 14
						# FROMFROM = { age = 14 }
					# }
					# add_spouse = FROMFROM
					# FROMFROM = { 
						# if = {
							# limit = {
								# NOT = { any_spouse = { is_main_spouse = no } }	
							# }
							# add_character_modifier = {
								# name = "wedding"
								# duration = 60
							# }
						# }
						# clr_character_flag = keep_lowborn_marriage
					# }
				# }
				# if = {
					# limit = {
						# OR = {
							# NOT = { age = 14 }
							# FROMFROM = { NOT = { age = 14 } }
						# }	
					# }
					# FROMFROM = { 
						# remove_character_modifier = wedding
						# add_betrothal = PREV 
					# }
					# add_betrothal = FROMFROM
				# }
			}
		}	
		FROMFROM = { clr_character_flag = no_wedding_event }
	}
	
	option = {
		name = "I LIKE PRETTY SILVER HAIR" #AI maybe go for valyrian ethnicity?
		trigger = {
			NOT = { has_global_flag = ai_marriage_correction_DIVINE_OFF }
			is_ruler = yes
			OR = {				
				has_silver_hair_ethnicity_trigger = yes
				true_valyrian_culture_trigger = yes
				high_valyrian_dynasty_trigger = yes
			}
			NOT = { trait = humble }
			FROMFROM = {
				dynasty = ROOT
				NOT = { #Dont remove marriages from children/grandchildren of the player
					any_player = {
						OR = {
							is_parent_of = PREV
							is_grandparent_of = PREV
						}
						dynasty = PREV
						higher_tier_than = PREV
						is_alive = yes
					}
				}
				event_target:spouse_to_evaluate = { 
					has_silver_hair_ethnicity_trigger = no
					NOT = { #Dont remove marriages from children/grandchildren of the player
						any_player = {
							OR = {
								is_parent_of = PREV
								is_grandparent_of = PREV
							}
							dynasty = PREV
							higher_tier_than = PREV
							is_alive = yes
						}
					}
				}
			}	
			NOT = { #Dont remove human made marriages
				event_target:spouse_to_evaluate = {
					OR = {
						AND = {
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							ai = no
						}
						any_close_relative = { 
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							ai = no
						}	
					}
				}
			}			
		}
		ai_chance = { 
			factor = 0.33
			modifier = {
				factor = 0.25
				trait = cynical
			}
			modifier = {
				factor = 4
				trait = proud
			}
			modifier = {
				factor = 2
				trait = zealous
			}
			modifier = {
				factor = 4
				trait = lunatic
			}
		}
		FROMFROM = { set_character_flag = no_wedding_event }
		random_realm_lord = {
			limit = {			
				ai = yes		
				religion = ROOT
				is_theocracy = no						
				opinion = { who = ROOT value = -15 }
				NOT = { dynasty = ROOT }
				NOT = { dynasty = 0 }
				any_courtier = {
					has_silver_hair_ethnicity_trigger = yes
					NOT = { age = 30 }
					is_ruler = no
					NOT = { same_sex = ROOT_FROMFROM }
					dynasty = PREV
					is_close_relative = PREV
					can_marry_trigger = yes
					NAND = { 
						cannot_outbreed_trigger = yes 
						NOT = { graphical_culture = ROOT_FROMFROM }
					}
					is_pregnant = no
					NOT = { trait = celibate }
					NOT = { trait = inbred }
					OR = {
						NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
						AND = {
							ROOT_FROMFROM = { age = 18 }
							age = 18
						}
					}
				}
			}
			random_courtier = {
				limit = {
					has_silver_hair_ethnicity_trigger = yes
					NOT = { age = 30 }
					is_ruler = no
					NOT = { same_sex = ROOT_FROMFROM }
					dynasty = PREV
					is_close_relative = PREV
					can_marry_trigger = yes
					NAND = { 
						cannot_outbreed_trigger = yes 
						NOT = { graphical_culture = ROOT_FROMFROM }
					}
					is_pregnant = no
					NOT = { trait = celibate }
					NOT = { trait = inbred }
					OR = {
						NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
						AND = {
							ROOT_FROMFROM = { age = 18 }
							age = 18
						}
					}
				}
				FROMFROM = { 
					event_target:spouse_to_evaluate = {
						remove_character_modifier = wedding
						remove_spouse = PREV
						break_betrothal = PREV
					}
				}	
				PREV = { 
					opinion = { who = ROOT modifier = opinion_recent_marriage } 
					reverse_opinion = { who = ROOT modifier = opinion_recent_marriage } 
				}
				add_spouse = ROOT_FROMFROM
				if = {
					limit = {
						age = 14
						ROOT_FROMFROM = { age = 14 }
					}
					ROOT_FROMFROM = { 
						if = {
							limit = {
								NOT = { any_spouse = { is_main_spouse = no } }	
							}
							add_character_modifier = {
								name = "wedding"
								duration = 60
							}
						}
						clr_character_flag = keep_lowborn_marriage
					}
				}	
				child_fertility_debuff = yes
				ROOT_FROMFROM = {
					child_fertility_debuff = yes
				}
				
				###old block, betrothal command is broken NOW WORKS...or maybe not
				# if = {
					# limit = {
						# age = 14
						# FROMFROM = { age = 14 }
					# }
					# add_spouse = FROMFROM
					# FROMFROM = { 
						# if = {
							# limit = {
								# NOT = { any_spouse = { is_main_spouse = no } }	
							# }
							# add_character_modifier = {
								# name = "wedding"
								# duration = 60
							# }
						# }
						# clr_character_flag = keep_lowborn_marriage
					# }
				# }
				# if = {
					# limit = {
						# OR = {
							# NOT = { age = 14 }
							# FROMFROM = { NOT = { age = 14 } }
						# }	
					# }
					# FROMFROM = { 
						# remove_character_modifier = wedding
						# add_betrothal = PREV 
					# }
					# add_betrothal = FROMFROM
				# }
			}
		}	
		FROMFROM = { clr_character_flag = no_wedding_event }
	}
	
	option = {
		name = "WHY AM I MARRYING A SAVAGE?" #Perhaps change nomad marriage, who can marry anyone freely for some reason (also applied to deserter marriages)
		trigger = {	
			event_target:savage = { always = yes }
		}
		ai_chance = { 
			factor = 9999 
			modifier = { #OK if a powerful neighbour
				factor = 0
				NOR = {
					trait = zealous
					trait = proud
				}
				event_target:savage = {
					tier = EMPEROR
					is_nomadic = yes
					relative_power = { who = ROOT power = 1 }
					prestige = 750
					any_realm_province = { any_neighbor_province = { owner = { same_realm = ROOT } } }
				}
			}
			modifier = { #OK if very powerful
				factor = 0
				NOR = {
					trait = zealous
					trait = proud
				}
				event_target:savage = {
					tier = EMPEROR
					is_nomadic = yes
					OR = {
						relative_power = { who = ROOT power = 2 }
						AND = {
							relative_power = { who = ROOT power = 0.75 }
							OR = {
								has_character_modifier = greatest_of_khans
								has_character_modifier = jhattar_of_jogos_nhai
							}
						}
					}	
					prestige = 1500
					OR = {
						any_realm_province = { region = world_westeros }
						ROOT = { any_realm_province = { NOT = { region = world_westeros } } }
					}
				}
			}
		}
		prestige = 75
		event_target:savage = {
			letter_event = { id = 500994 }
		}
		FROMFROM = { 
			set_character_flag = no_wedding_event #stop event triggering twice
			#Remove the nomadic spouse
			event_target:spouse_to_evaluate = {
				remove_spouse = PREV
				break_betrothal = PREV
				if = {
					limit = {
						cannot_outbreed_trigger = yes
						NOT = { graphical_culture = ROOT_FROMFROM }
						is_ruler = no
						liege = { NOT = { is_close_relative = PREV } }
					}
					random_playable_ruler = {
						limit = {
							valid_exile_destination_ROOT_trigger = yes						
							culture = PREV			
						}
						reverse_banish = PREV
					}
				}
			}
			if = {
				limit = { is_ruler = no }
				move_character = ROOT
			}
			#First try and find vassal with suitable bride
			ROOT = {
				random_realm_lord = { 
					limit = {
						OR = {
							AND = {
								tier = COUNT
								ROOT = { tier = DUKE }
							}
							AND = {
								tier = COUNT
								culture_group = valyrian
								culture_group = ROOT
							}
							higher_tier_than = COUNT	
						}
						ai = yes		
						religion = ROOT
						NOT = { dynasty = 0 }
						is_theocracy = no						
						opinion = { who = ROOT value = -15 }
						any_courtier = {
							NOT = { age = 30 }
							is_ruler = no
							NOT = { same_sex = ROOT_FROMFROM }
							dynasty = PREV
							is_close_relative = PREV
							can_marry_trigger = yes
							NAND = { 
								cannot_outbreed_trigger = yes 
								NOT = { graphical_culture = ROOT_FROMFROM }
							}
							is_pregnant = no
							NOT = { trait = celibate }
							NOT = { trait = inbred }
							OR = {
								NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
								AND = {
									ROOT_FROMFROM = { age = 18 }
									age = 18
								}
							}
						}
					}
					random_courtier = {
						limit = {
							NOT = { age = 30 }
							is_ruler = no
							NOT = { same_sex = ROOT_FROMFROM }
							dynasty = PREV
							is_close_relative = PREV
							can_marry_trigger = yes
							NAND = { 
								cannot_outbreed_trigger = yes 
								NOT = { graphical_culture = ROOT_FROMFROM }
							}
							is_pregnant = no
							NOT = { trait = celibate }
							NOT = { trait = inbred }
							OR = {
								NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
								AND = {
									ROOT_FROMFROM = { age = 18 }
									age = 18
								}
							}
						}						
						add_spouse = ROOT_FROMFROM
						PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }					
						child_fertility_debuff = yes
						ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
						
						# ###old block, betrothal command is broken NOW WORKS...or maybe not
						# if = {
							# limit = {
								# age = 14
								# ROOT_FROMFROM = { age = 14 }
							# }
							# add_spouse = ROOT_FROMFROM
							# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
							# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
						# }
						# if = {
							# limit = {
								# OR = {
									# NOT = { age = 14 }
									# ROOT_FROMFROM = { NOT = { age = 14 } }
								# }	
							# }
							# ROOT_FROMFROM = { 
								# remove_character_modifier = wedding
								# add_betrothal = PREV 
							# }
							# add_betrothal = ROOT_FROMFROM
						# }
						break = yes
					}
				}
				#Then try a fellow same tier vassal
				liege = { 
					random_realm_lord = { 
						limit = {
							tier = ROOT
							NOT = { character = ROOT }
							ai = yes		
							religion = ROOT
							culture_group = ROOT
							NOT = { dynasty = 0 }
							is_theocracy = no						
							opinion = { who = ROOT value = -15 }
							reverse_opinion = { who = ROOT value = -15 }
							any_courtier = {
								NOT = { age = 30 }
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								can_marry_trigger = yes
								NAND = { 
									cannot_outbreed_trigger = yes 
									NOT = { graphical_culture = ROOT_FROMFROM }
								}
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
								}
							}
						}
						random_courtier = {
							limit = {
								NOT = { age = 30 }
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								can_marry_trigger = yes
								NAND = { 
									cannot_outbreed_trigger = yes 
									NOT = { graphical_culture = ROOT_FROMFROM }
								}
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
								}
							}
							add_spouse = ROOT_FROMFROM
							PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }					
							child_fertility_debuff = yes
							ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							
							# ###old block, betrothal command is broken NOW WORKS...or maybe not
							# if = {
								# limit = {
									# age = 14
									# ROOT_FROMFROM = { age = 14 }
								# }
								# add_spouse = ROOT_FROMFROM
								# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							# }
							# if = {
								# limit = {
									# OR = {
										# NOT = { age = 14 }
										# ROOT_FROMFROM = { NOT = { age = 14 } }
									# }	
								# }
								# ROOT_FROMFROM = { 
									# remove_character_modifier = wedding
									# add_betrothal = PREV 
								# }
								# add_betrothal = ROOT_FROMFROM
							# }
							break = yes								
						}
					}
				}
				#Then try a any vassal in realm
				top_liege = { 
					random_realm_lord = { 
						limit = {
							OR = {
								tier = ROOT
								AND = {
									tier = COUNT
									ROOT = { tier = DUKE }
								}
								AND = {
									tier = COUNT
									culture_group = valyrian
									culture_group = ROOT
								}
								higher_tier_than = COUNT	
							}
							NOT = { character = ROOT }
							ai = yes		
							religion = ROOT
							culture_group = ROOT
							NOT = { dynasty = 0 }
							is_theocracy = no						
							opinion = { who = ROOT value = -15 }
							reverse_opinion = { who = ROOT value = -15 }
							any_courtier = {
								NOT = { age = 30 }
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								can_marry_trigger = yes
								NAND = { 
									cannot_outbreed_trigger = yes 
									NOT = { graphical_culture = ROOT_FROMFROM }
								}
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
								}
							}
						}
						random_courtier = {
							limit = {
								NOT = { age = 30 }
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								can_marry_trigger = yes
								NAND = { 
									cannot_outbreed_trigger = yes 
									NOT = { graphical_culture = ROOT_FROMFROM }
								}
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
								}
							}
							add_spouse = ROOT_FROMFROM
							PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }					
							child_fertility_debuff = yes
							ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							
							# ###old block, betrothal command is broken NOW WORKS...or maybe not
							# if = {
								# limit = {
									# age = 14
									# ROOT_FROMFROM = { age = 14 }
								# }
								# add_spouse = ROOT_FROMFROM
								# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							# }
							# if = {
								# limit = {
									# OR = {
										# NOT = { age = 14 }
										# ROOT_FROMFROM = { NOT = { age = 14 } }
									# }	
								# }
								# ROOT_FROMFROM = { 
									# remove_character_modifier = wedding
									# add_betrothal = PREV 
								# }
								# add_betrothal = ROOT_FROMFROM
							# }
							break = yes								
						}
					}
				}
			}
			clr_character_flag = no_wedding_event
			#If no marriage found, add temp fertility malus to prevent another marriage
			add_character_modifier = {
				name = child
				duration = 400
				hidden = yes
			}
		}	
	}
	
	option = {
		name = "WHY WOULD I MARRY THIS PERSON?"
		trigger = { #AI marrying off non-relative important heirs matrilineally
			NOT = { has_global_flag = ai_marriage_correction_LANDLESS_OFF }
			FROMFROM = {
				OR = {
					any_heir_title = { 
						higher_tier_than = BARON 
						NOT = { has_law = succ_open_elective }
					}
					any_pretender_title = {
						higher_tier_than = BARON 
						NOT = { has_law = succ_open_elective }
					}
				}
				is_ruler = no
				NOT = { dynasty = 0 }
				NOT = { dynasty = event_target:spouse_to_evaluate }
				NOT = { trait = bastard }
				OR = {
					AND = {
						is_female = no
						is_married_matrilineally = yes
					}
					AND = {
						is_female = yes
						is_married_matrilineally = no
						#females only if higher ranking primary heir
						any_heir_title = {
							higher_tier_than = BARON
							ROOT_FROMFROM = { 
								event_target:spouse_to_evaluate = { 
									NOR = {
										NOT = { lower_tier_than = PREVPREV } 
										AND = {
											is_ruler = no
											liege = {
												is_close_relative = PREV
												NOT = { lower_tier_than = PREVPREVPREV } 
											}
										}
										AND = {
											is_close_relative = ROOT_FROM
											ROOT_FROM = { higher_tier_than = DUKE }
										}
									}	
								} 
							}
						}	
					}
				}
				#Not if low rank marrying into a kingdom
				OR = {
					any_heir_title = { higher_tier_than = COUNT }
					any_pretender_title = { higher_tier_than = COUNT }
					event_target:spouse_to_evaluate = { 
						NOR = {
							higher_tier_than = DUKE
							liege = {
								is_close_relative = PREV
								higher_tier_than = DUKE
							}
							AND = {
								is_close_relative = ROOT_FROM
								ROOT_FROM = { higher_tier_than = DUKE }
							}
						}
					}
				}
				NOT = { is_close_relative = ROOT_FROM }
			}
		}
		ai_chance = { 
			factor = 9999 
		}	
		FROMFROM = {
			event_target:spouse_to_evaluate = {
				save_event_target_as = old_spouse			
				if = {
					limit = { is_ruler = no }
					liege = { letter_event = { id = 500993 } }
				}
				else = {
					letter_event = { id = 500993 }
				}
			}		
		}
	}
	
	option = {
		name = "I AM A DRAGON RIDER!"
		trigger = { #AI marrying off non-relative dragon riders against their will
			NOT = { has_global_flag = ai_marriage_correction_LANDLESS_OFF }
			FROMFROM = {
				can_use_dragon_abilities_trigger = yes
				is_ruler = no
				NOT = { #Acceptable if a good marriage
					event_target:spouse_to_evaluate = {
						OR = {
							AND = {
								is_ruler = yes
								ROOT_FROM = { NOT = { higher_tier_than = PREV } }
							}
							any_heir_title = { ROOT_FROM = { NOT = { higher_tier_than = PREV } } }
							any_claim = { ROOT_FROM = { lower_tier_than = PREV } }
							any_close_relative = { 
								ROOT_FROM = { NOT = { higher_tier_than = PREV } }
								OR = {
									is_ancestor_of = PREV
									is_descendant_of = PREV
									sibling = PREV
								}
							}
						}
					}
				}
				OR = { #Motives to reject marriage
					AND = { #male married matrilineally
						is_female = no
						is_married_matrilineally = yes
						NOT = { dynasty = 0 }
						NOT = { trait = bastard }
					}
					liege = { #dislike new liege
						OR = {					
							NOT = { reverse_opinion = { who = PREV value = -40 } }
							AND = {
								PREV = { NOT = { trait = content } }
								NOT = { reverse_opinion = { who = PREV value = 0 } }
							}
						}	
						NOT = { is_friend = PREV }
						NOT = { is_married = PREV }
						NOT = { is_lover = PREV }
						NAND = {
							OR = {
								is_close_relative = PREV
								dynasty = PREV
							}	
							OR = {
								PREV = { trait = familyperson }
								reverse_opinion = { who = PREV value = -25 }
							}	
							PREV = { NOT = { trait = ambitious } }
						}
					}	
				}
				NOT = { is_close_relative = ROOT_FROM }
			}
		}
		ai_chance = { 
			factor = 9999 
		}
		FROMFROM = {
			event_target:spouse_to_evaluate = {
				save_event_target_as = old_spouse			
				if = {
					limit = { is_ruler = no }
					liege = { letter_event = { id = 500993 } }
				}
				else = {
					letter_event = { id = 500993 }
				}
			}		
		}
	}
	
	option = {	
		name = OK
		ai_chance = { factor = 1 }
	}
}
character_event = { #ask for dowry
	id = 500998
	desc = "EVTDESC500"
	picture = "GFX_evt_marriage"
	
	is_triggered_only = yes
	show_from_from_from = yes
	
	trigger = { 
		NOT = { trait = wildling }
		NOT = { culture = moon_clansman }
		OR = {			
			FROMFROMFROM = { 
				is_married = yes 
				OR = {
					is_female = no
					liege = { character = ROOT }
					character = ROOT
				}	
			} 
			AND = {
				is_ruler = no
				is_married = FROMFROMFROM
				liege = { character = event_target:dowry_target }
			}
		}	
	}
	
	option = {
		name = "EVTOPTA500"
		trigger = {
			event_target:dowry_target = { always = yes }	
		}
		ai_chance = {
			factor = 75
			modifier = {
				factor = 5
				trait = greedy
			}
			modifier = {
				factor = 3
				trait = wroth
			}
			modifier = {
				factor = 3
				trait = ruthless
			}
			modifier = {
				factor = 3
				trait = diligent
			}
		}
		FROMFROMFROM = { 
			clr_character_flag = keep_lowborn_marriage
			hidden_tooltip = { character_event = { id = wedding.101 days = 2 } }
			if = {
				limit = {
					any_spouse = {
						is_main_spouse = yes
						event_target:dowry_target = {
							OR = {
								character = PREV
								dynasty = PREV
							}
						}	
					}
				}
				#set_character_flag = marriage_duty
				add_character_modifier = {
					name = "wedding"
					duration = 60
				}	
			}			
		}
		event_target:dowry_target = {
			hidden_tooltip = { 
				remove_opinion = { who = ROOT modifier = opinion_recent_marriage }
				reverse_remove_opinion = { who = ROOT modifier = opinion_recent_marriage }
			}
			custom_tooltip = { text = TOOLTIPwedding.1 }
		}
	}
	option = {
		name = "EVTOPTB500"
		trigger = {
			event_target:dowry_target = { always = yes }	
		}
		ai_chance = {
			factor = 25
			modifier = {
				factor = 5
				trait = charitable
			}
			modifier = {
				factor = 3
				trait = kind
			}
			modifier = {
				factor = 3
				trait = slothful
			}	
		}
		event_target:dowry_target = {
			if = {
				limit = {
					tier = BARON
					is_patrician = no
				}
				ROOT = { prestige = 10 }
			}
			if = {
				limit = {
					OR = {
						tier = COUNT
						AND = {
							tier = BARON
							is_patrician = yes
						}
					}
				}
				ROOT = { prestige = 20 }
			}
			if = {
				limit = {
					tier = DUKE
				}
				ROOT = { prestige = 40 }
			}
			if = {
				limit = {
					tier = KING
				}
				ROOT = { prestige = 75 }
			}
			if = {
				limit = {
					tier = EMPEROR
				}
				ROOT = { prestige = 150 }
			}
		}	
		FROMFROMFROM = { 
			clr_character_flag = keep_lowborn_marriage
			if = {
				limit = {
					any_spouse = {
						is_main_spouse = yes
						event_target:dowry_target = {
							OR = {
								character = PREV
								dynasty = PREV
							}
						}
					}
				}
				#set_character_flag = marriage_duty
				add_character_modifier = {
					name = "wedding"
					duration = 60
				}	
			}
			event_target:dowry_target = {
				hidden_tooltip = { 
					remove_opinion = { who = ROOT modifier = opinion_recent_marriage }
					reverse_remove_opinion = { who = ROOT modifier = opinion_recent_marriage }
				}
			}	
		}
	}
	
	option = {
		trigger = {
			NOT = { event_target:dowry_target = { always = yes }	}
		}
		name = {
			text = "EVTOPTC500"
			trigger = {
				NOT = { FROMFROMFROM = { has_character_flag = inherited_dowry } }
			}
		}	
		name = { #bride already has inheritance
			text = "EVTOPTD500"
			trigger = {
				FROMFROMFROM = { has_character_flag = inherited_dowry }
			}
		}	
		FROMFROMFROM = { 
			if = {
				limit = {
					NOT = { any_spouse = { is_main_spouse = no } }	
				}
				#set_character_flag = marriage_duty
				add_character_modifier = {
					name = "wedding"
					duration = 60
				}
			}
			clr_character_flag = inherited_dowry
			clr_character_flag = keep_lowborn_marriage
		}
	}
}
# Inform marriage cancelled because of cognatic inheritance
letter_event = {
	id = 500999
		
	is_triggered_only = yes
	
	desc = {
		text = "EVTDESC50099"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROM } }
			FROM = {
				primary_title = { 
					OR = {
						has_law = true_cognatic_succession 
						has_law = enatic_cognatic_succession
						has_law = enatic_succession
					}	
				}
			}
		}
	}
	desc = {
		text = "EVTDESC50099B"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROM } }
			NOT = {
				FROM = {
					primary_title = { 
						OR = {
							has_law = true_cognatic_succession 
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}	
					}
				}
			}	
		}
	}
	desc = {
		text = "EVTDESC50099C"
		trigger = {
			event_target:invalid_bride = { character = FROM }
		}
	}
	
	immediate = {
		if = {
			limit = { ai = no }
			FROMFROMFROM = { save_event_target_as = invalid_bride } #for loc
		}	
	}
	
	option = {
		name = OK
		tooltip = { remove_spouse = FROMFROMFROM }
		remove_character_modifier = wedding
		random_dynasty_member = { 
			limit = {
				is_close_relative = ROOT
				NOT = { character = ROOT }
				OR = {
					has_opinion_modifier = { who = FROM modifier = opinion_recent_marriage }
					is_liege_of = ROOT
				}	
			}
			remove_opinion = { who = FROM modifier = opinion_recent_marriage }
			letter_event = { id = 500997 }
		}
	}
}	
letter_event = {
	id = 500997
	
	is_triggered_only = yes
	show_from_from = yes
	
	desc = {
		text = "EVTDESC50097"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROMFROM } }
			FROMFROM = {
				primary_title = { 
					OR = {
						has_law = true_cognatic_succession 
						has_law = enatic_cognatic_succession
						has_law = enatic_succession
					}	
				}
			}
		}
	}
	desc = {
		text = "EVTDESC50097B"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROMFROM } }
			NOT = {
				FROMFROM = {
					primary_title = { 
						OR = {
							has_law = true_cognatic_succession 
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}	
					}
				}
			}	
		}
	}
	desc = {
		text = "EVTDESC50097C"
		trigger = {
			event_target:invalid_bride = { character = FROMFROM }
		}
	}
	
	immediate = {
		if = {
			limit = { ai = no }
			FROMFROMFROMFROM = { save_event_target_as = invalid_bride } #for loc
		}	
	}
	
	option = {
		name = OK
	}
}
# Inform marriage cancelled because of nomadic savage/deserter
letter_event = {
	id = 500994
	
	desc = {
		text = "EVTDESC500994"
		trigger = { is_nomadic = yes }
	}	
	desc = {
		text = "EVTDESC500994B"
		trigger = { trait = deserter }
	}
	desc = {
		text = "EVTDESC500994C"
		trigger = { 
			cannot_outbreed_trigger = yes
			NOT = { graphical_culture = ROOT_FROMFROMFROM }
		}
	}
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA500994
		trigger = { is_nomadic = yes }
	}
	option = {
		name = EVTOPTB500994
		trigger = { trait = deserter }
		if = {
			limit = { ai = yes }
			character_event = { id = maintenance.6 days = 1 } #find another marriage
		}
	}
	option = {
		name = EVTOPTC500994
		trigger = { 
			cannot_outbreed_trigger = yes
			NOT = { graphical_culture = ROOT_FROMFROMFROM }
		}
		if = {
			limit = { ai = yes }
			character_event = { id = maintenance.6 days = 1 } #find another marriage
		}
	}
}	
# Inform marriage cancelled because of heir/dragon rider
letter_event = {
	id = 500993	
	
	desc = {
		text = "EVTDESC500993"
		trigger = { 
			FROMFROMFROM = { NOT = { can_use_dragon_abilities_trigger = yes } } 
			NOT = { event_target:old_liege = { character = ROOT } }
		}
	}	
	desc = {
		text = "EVTDESC500993B"
		trigger = { 
			FROMFROMFROM = { can_use_dragon_abilities_trigger = yes }
			NOT = { event_target:old_liege = { character = ROOT } }
		}
	}
	desc = {
		text = "EVTDESC500993C"
		trigger = {
			FROMFROMFROM = { NOT = { can_use_dragon_abilities_trigger = yes } }
			event_target:old_liege = { character = ROOT }
		}
	}	
	desc = {
		text = "EVTDESC500993D"
		trigger = {
			FROMFROMFROM = { can_use_dragon_abilities_trigger = yes } 
			event_target:old_liege = { character = ROOT }
		}
	}
	
	is_triggered_only = yes
	show_from_from_from = yes
	
	immediate = {
		FROMFROMFROM = { diplomatic_immunity = yes }
	}
	
	option = {
		name = EVTOPTA500993
		ai_chance = {
			factor = 50
		}
		event_target:spouse_to_evaluate = {
			if = {
				limit = { is_married = FROMFROMFROM }
				remove_spouse = FROMFROMFROM
			}
			if = {
				limit = { is_betrothed = FROMFROMFROM }
				break_betrothal = FROMFROMFROM
			}
		}
		hidden_tooltip = {
			FROMFROMFROM = { #move the character
				character_event = { id = maintenance.6 days = 2 } #find another marriage?
				event_target:old_liege = { #if old liege was a player, can keep at that court
					if = {
						limit = {
							ai = no
							is_alive = yes
						}
						ROOT_FROMFROMFROM = { move_character = PREV }
						break = yes
					}
				}
				any_heir_title = {
					limit = {
						holder_scope = {
							valid_exile_destination_ROOT_trigger = yes
							NOT = { character = ROOT }		
						}
					}
					holder_scope = {
						ROOT_FROMFROMFROM = { move_character = PREV }
						break = yes
					}
				}
				any_pretender_title = {
					limit = {
						holder_scope = {
							valid_exile_destination_ROOT_trigger = yes
							NOT = { character = ROOT }		
						}
					}
					holder_scope = {
						ROOT_FROMFROMFROM = { move_character = PREV }
						break = yes
					}
				}
				random_dynasty_member = {
					limit = {
						valid_exile_destination_ROOT_trigger = yes	
						is_alive = yes
						NOT = { character = ROOT }
					}
					ROOT_FROMFROMFROM = { move_character = PREV }
					break = yes
				}
				random_playable_ruler = {
					limit = {
						valid_exile_destination_ROOT_trigger = yes
						
						culture_group = PREV		
						NOT = { character = ROOT }
					}
					ROOT_FROMFROMFROM = { move_character = PREV }
					break = yes
				}
				random_playable_ruler = {
					limit = {
						valid_exile_destination_ROOT_trigger = yes
						NOT = { character = ROOT }				
					}
					ROOT_FROMFROMFROM = { move_character = PREV }
					break = yes
				}			
			}
		}
	}
	option = {
		name = EVTOPTB500993 #Change to normal marriage
		trigger = { 
			ai = no 
			event_target:spouse_to_evaluate = { is_married = FROMFROMFROM }
		}
		FROMFROMFROM = {
			set_character_flag = no_wedding_event #stop event triggering twice
		}
		event_target:spouse_to_evaluate = {
			set_character_flag = no_wedding_event
		}
		if = {
			limit = { FROMFROMFROM = { is_female = no } }
			custom_tooltip = {
				text = TOOLTIP500993A				
				event_target:spouse_to_evaluate = {
					remove_spouse = FROMFROMFROM 
					add_spouse = FROMFROMFROM 
				}
			}
		}
		else = {
			custom_tooltip = {
				text = TOOLTIP500993B			
				event_target:spouse_to_evaluate = {
					remove_spouse = FROMFROMFROM 
					add_spouse_matrilineal = FROMFROMFROM 
				}
			}
		}
		FROMFROMFROM = {
			clr_character_flag = no_wedding_event
		}
		event_target:spouse_to_evaluate = {
			clr_character_flag = no_wedding_event
		}
	}
	option = {
		name = EVTOPTC500993 #Force the marriage
		trigger = { 
			event_target:old_liege = { character = ROOT } #Must of been original liege
			NOT = { trait = kind }
			NOT = { trait = honorable }
			is_incapable = no
			prisoner = no
			is_adult = yes
			FROMFROMFROM = {
				is_ruler = no
				#Can't be forced if they are strong
				NAND = {
					is_adult = yes
					OR = {
						is_female = no
						female_get_masculine_event_trigger = yes
						martial = 20
					}
					OR = {
						trait = authoritative
						martial = 15
						diplomacy = 15
					}
					NOR = {
						trait = craven
						trait = content
						trait = incapable
						trait = inbred
						trait = imbecile
					}
				}
			}
		}
		ai_chance = {
			factor = 25
			
			modifier = { #Ai motives
				factor = 0
				FROMFROMFROM = {
					#Target has a title or claim that is equal or higher to ROOT's rank
					lower_tier_than = ROOT
					NOT = { any_heir_title = { NOT = { lower_tier_than = ROOT } } }
					NOT = { any_claim = { NOT = { lower_tier_than = ROOT } } }
					NAND = { #Horny bastard
						has_fair_trait_trigger = yes
						event_target:spouse_to_evaluate = { 
							trait = lustful 
							character = ROOT							
						}
					}
				}	
			}
			modifier = {
				factor = 0
				FROMFROMFROM = { 
					is_female = yes
					age = 35
				}
			}
			modifier = {
				factor = 0
				trait = just
			}
			modifier = {
				factor = 0
				reverse_opinion = { who = FROMFROMFROM value = 20 }
				NOR = {
					trait = cruel
					trait = ruthless
					trait = lunatic
				}
			}
			modifier = {
				factor = 0
				FROMFROMFROM = {
					cannot_outbreed_trigger = yes
					NOT = { graphical_culture = event_target:spouse_to_evaluate }
				}	
			}
			modifier = {
				factor = 4
				FROMFROMFROM = {
					has_fair_trait_trigger = yes
				}	
				event_target:spouse_to_evaluate = { 
					trait = lustful
					character = ROOT
				}
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}		
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 0.66
				trait = patient
			}
		}
		custom_tooltip = {
			text = TOOLTIP500993C
		}
		FROMFROMFROM = {
			opinion = {
				who = ROOT
				modifier = opinion_forced_marriage
			}
			opinion = {
				who = event_target:spouse_to_evaluate
				modifier = opinion_forced_marriage
			}
			hidden_tooltip = {
				if = { #If this is a betrothal, mark it so it isn't cancelled again when carried out
					limit = {
						NOT = { is_married = event_target:spouse_to_evaluate }
					}
					set_character_flag = forced_betrothal
				}
				else = {
					event_target:spouse_to_evaluate = { add_character_modifier = { name = "wedding" duration = 60 } }
					add_character_modifier = { name = "wedding" duration = 60 }
				}	
				ROOT = { save_event_target_as = force_marriage_actor }
				event_target:spouse_to_evaluate = { save_event_target_as = forced_spouse }
				character_event = { id = 50062 }
			}
		}
		if = {
			limit = {
				NOR = {
					trait = cruel
					trait = kind
				}
				NOT = { personality_traits = 6 }
			}
			random = {
				chance = 10
				add_trait = cruel
				hidden_tooltip = { character_event = { id = 38259 } }
			}
		}

		if = {
			limit = { trait = kind }
			random = { 
				chance = 25
				remove_trait = kind
				hidden_tooltip = {
					character_event = { id = 38307 }
				}
			}
			hidden_tooltip = {
				random_list = {
					20 = {
						add_trait = stressed
						hidden_tooltip = { character_event = { id = 38282 } }
					}
					5 = {
						add_trait = depressed
						hidden_tooltip = { character_event = { id = 38288 } }
					}
					75 = {
						#nothing
					}
				}
			}
		}
		piety = -50
	}
	after = {
		hidden_tooltip = { FROMFROMFROM = { diplomatic_immunity = no } }
	}
}	
# Approve or disapprove of de facto Law Change
letter_event = {
	id = 290
	desc = "EVTDESC290"
	
	is_triggered_only = yes
	lacks_dlc = "Zeus"
	
	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
		hidden_tooltip = {
			reverse_remove_opinion = {
				modifier = opinion_approved_law
				who = FROM
			}
			reverse_remove_opinion = {
				modifier = opinion_ignored_law
				who = FROM
			}			
		}
		reverse_opinion = {
			modifier = opinion_approved_law
			who = FROM
			years = 5
		}		
	}
	
	option = {
		name = "EVTOPTB290"
		hidden_tooltip = {
			reverse_remove_opinion = {
				modifier = opinion_approved_law
				who = FROM
			}
			reverse_remove_opinion = {
				modifier = opinion_ignored_law
				who = FROM
			}
		}
		reverse_opinion = {
			modifier = opinion_ignored_law
			who = FROM
			years = 5
		}		
	}
}

# Zeus Version Approve or disapprove of de facto Law Change
letter_event = {
	id = 675
	desc = "EVTDESC290"
	
	is_triggered_only = yes
	has_dlc = "Zeus"
	
	trigger = {	
		ai = no
		is_voter = yes
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
		hidden_tooltip = {
			reverse_remove_opinion = {
				modifier = opinion_approved_law
				who = FROM
			}
			reverse_remove_opinion = {
				modifier = opinion_ignored_law
				who = FROM
			}			
		}
		reverse_opinion = {
			modifier = opinion_approved_law
			who = FROM
			years = 5
		}	
	}

	option = {
		name = "EVTOPTC290"
		decline_law = FROM
		hidden_tooltip = {
			reverse_remove_opinion = {
				modifier = opinion_approved_law
				who = FROM
			}
			reverse_remove_opinion = {
				modifier = opinion_ignored_law
				who = FROM
			}
		}
		reverse_opinion = {
			modifier = opinion_ignored_law
			who = FROM
			years = 5
		}
	}
	
	option = {
		name = "EVTOPTB290"
		hidden_tooltip = {
			reverse_remove_opinion = {
				modifier = opinion_approved_law
				who = FROM
			}
			reverse_remove_opinion = {
				modifier = opinion_ignored_law
				who = FROM
			}
		}
		reverse_opinion = {
			modifier = opinion_abstained_law
			who = FROM
			years = 3
		}		
	}
}


# Approve or disapprove of de jure Law Change
letter_event = {
	id = 291
	
	is_triggered_only = yes
	ai = no
	lacks_dlc = "Zeus"
	
	trigger = {	
		FROM = {
			holder_scope = {
				is_vassal_or_below = ROOT
			}
		}
	}

	desc = "EVTDESC291"
	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}
	
	option = {
		name = "EVTOPTB290"
	}
}

# Zeus Version Approve or disapprove of de jure Law Change
letter_event = {
	id = 676
	
	is_triggered_only = yes
	ai = no
	has_dlc = "Zeus"
	
	trigger = {
		is_voter = yes
		FROM = {
			holder_scope = {
				is_vassal_or_below = ROOT
			}
		}
	}

	desc = "EVTDESC291"
	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTC290"
		decline_law = FROM
	}
	
	option = {
		name = "EVTOPTB290"
	}
}

# Approve or disapprove of de jure Law Change
letter_event = {
	id = 292
	desc = "EVTDESC292"
	
	is_triggered_only = yes
	lacks_dlc = "Zeus"
	
	trigger = {
		ai = no
		FROM = {
			holder_scope = {
				NOT = { is_vassal_or_below = ROOT }
			}
		}
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}
	
	option = {
		name = "EVTOPTB290"
	}
}
# ASK_TO_EMBARGO_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 297

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC297"

	option = {
		name = "OK"
	}
}

# ASK_TO_EMBARGO_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 298

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC298"

	option = {
		name = "OK"
	}
}

# FORM_ALLIANCE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = diploresponse.1
	desc = "EVTDESCdiploresponse.1"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORM_ALLIANCE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = diploresponse.2
	desc = "EVTDESCdiploresponse.2"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}


# Rebels spawn
# NOTE THAT WITH "THE OLD GODS" DLC, THIS IS NO LONGER FIRED
# province_event = {
	# id = 600
	# desc = "EVTDESC600"
	# picture = GFX_evt_peasants
	# border = GFX_event_normal_frame_war
	
	# is_triggered_only = yes
	
	# trigger = {
		# NOT = { has_dlc = "The Old Gods" }
	# }

	# option = {
		# name = "EVTOPTA600"
		# hidden_tooltip = {
			# random_list = {
				# 50 = {
					# create_random_soldier = {
						# random_traits = yes
						# dynasty = random
						# religion = PREV
						# culture = PREV
						# female = no
						# age = 30
						# employer = e_rebels
					# }
					# new_character = {
						# spawn_unit = {
							# province = PREVPREV
							# home = PREVPREV
							# scaled_by_biggest_garrison = 1.25
							# troops = {
								# archers = { 6 6 }
								# light_cavalry = { 4 4 }
								# light_infantry = { 10 10 }
							# }
						# }
					# }
				# }
				# 25 = {
					# create_random_soldier = {
						# random_traits = yes
						# dynasty = random
						# religion = PREV
						# culture = PREV
						# female = no
						# age = 30
						# employer = e_rebels
					# }
					# new_character = {
						# spawn_unit = {
							# province = PREVPREV
							# home = PREVPREV
							# scaled_by_biggest_garrison = 1.25
							# troops = {
								# archers = { 6 6 }
								# light_cavalry = { 3 3 }
								# light_infantry = { 11 11 }
							# }
						# }
					# }
				# }
				# 25 = {
					# create_random_soldier = {
						# random_traits = yes
						# dynasty = random
						# religion = PREV
						# culture = PREV
						# female = no
						# age = 30
						# employer = e_rebels
					# }
					# new_character = {
						# spawn_unit = {
							# province = PREVPREV
							# home = PREVPREV
							# scaled_by_biggest_garrison = 1.25
							# troops = {
								# archers = { 6 6 }
								# light_infantry = { 14 14 }
							# }
						# }
					# }
				# }
			# }
			# # Lower revolt risk
			# remove_province_modifier = recent_revolt
			# add_province_modifier = {
				# name = recent_revolt
				# duration = 3650
			# }
			# # Inform barons about the rebels
			# owner = {
				# set_character_flag = informed_about_rebels
			# }
			# any_province_lord = {
				# limit = {
					# NOT = { has_character_flag = informed_about_rebels }
					# ai = no
				# }
				# character_event = { id = 601 days = 7 }
			# }
			# owner = {
				# clr_character_flag = informed_about_rebels
			# }
		# }
	# }
# }

# # Inform barons about the rebels
# character_event = {
	# id = 601
	# desc = "EVTDESC601"
	# picture = "GFX_evt_peasants"
	
	# is_triggered_only = yes
	
	# option = {
		# name = "EVTOPTA601"
	# }
# }

# Province defects to rebels
# Spawn for baron
# FROM = the province
character_event = {
	id = 610
	desc = "EVTDESC610"
	picture = "GFX_evt_peasants"
	
	is_triggered_only = yes

	option = {
		name = "EVTOPTA610"
		scaled_wealth = -0.2
	}
}

# Rebels disperse
# Spawn for baron
# FROM = the province
character_event = {
	id = 615
	desc = "EVTDESC615"
	picture = "GFX_evt_peasants"
	
	is_triggered_only = yes
	
	option = {
		name = "EXCELLENT"
	}
}

# # Crusade/Jihad Succeeds
# narrative_event = {
	
	# # ROOT is the target title
	# # new_character is the Enemy
	# # FROM is the taker
	
	# id = 620
	# title = "EVTNAME620"
	# desc = "EVTDESC620"
	# picture = "GFX_evt_battle"
	# border = "GFX_event_narrative_frame_religion"
	
	# major = yes
	
	# only_rulers = yes
	
	# is_triggered_only = yes
	
	# option = {
		# name = "EVTOPTA620"
		# trigger = {
			# religion_group = FROM
		# }
	# }
	
	# option = {
		# name = "EVTOPTB620"
		# trigger = {
			# NOT = {
				# religion_group = FROM
			# }
		# }
	# }
# }

# # Crusade/Jihad Fails
# narrative_event = {

	# # ROOT is the target title
	# # new_character is the Enemy
	# # FROM is the Pope/Caliph
	
	# id = 621
	# title = "EVTNAME621"
	# desc = "EVTDESC621"
	# picture = "GFX_evt_battle"
	# border = "GFX_event_narrative_frame_religion"
	
	# major = yes
	
	# only_rulers = yes
	
	# is_triggered_only = yes
	
	# option = {
		# name = "EVTOPTA621"
		# trigger = {
			# FROM = {
				# religion_group = PREV
			# }
		# }
	# }
	
	# option = {
		# name = "EVTOPTB621"
		# trigger = {
			# NOT = {
				# FROM = {
					# religion_group = PREV
				# }
			# }
		# }
	# }
# }

# ASK_TO_JOIN_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 293

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC293"

	option = {
		name = "OK"
	}
}

# ASK_TO_JOIN_WAR_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 294

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC294"

	option = {
		name = "OK"
	}
}

# ASK_TO_EMBARGO_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 295

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		OR = {
			ai = yes
			FROM = { NOT = { culture_group = unoccupied_group } }
		}		 
		FROM = {
			OR = {
				ai = no
				AND = {
					culture_group = ROOT
					NOT = { culture_group = valyrian }
				}
				NOT = { capital_scope = { region = world_westeros } }
				ROOT = { capital_scope = { region = world_westeros } }	
			}	
		}			
	}

	desc = "EVTDESC295"

	option = {
		name = "OK"
		if = {
			limit = { FROM = { culture_group = unoccupied_group } } 
			wealth = 200
			FROM = { wealth = -200 }
		}	
	}
}
#End AI Westerosi wars in Essos
character_event = { 
	id = 295665
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		any_war = {
			limit = {
				using_cb = embargo_cb
				attacker = { character = ROOT }
				defender = { character = FROMFROM }
			}
			any_attacker = {
				if = {
					limit = { 
						is_merchant_republic = yes
						NOT = { is_liege_or_above = ROOT } 
					}
					letter_event = { id = 295666 }
				}	
			}
			defender = {
				reverse_opinion = { who = ROOT modifier = opinion_ai_refused_embargo months = 120 } #try to block further requests
			}
			end_war = whitepeace
		}
		clr_character_flag = no_embargo_mega_wars
	}

	option = {
		name = "OK"	
	}
}
letter_event = { 
	id = 295666
	desc = "EVTDESC295666"
	
	is_triggered_only = yes

	option = {
		name = "OK"
		wealth = 200
		FROM = { 
			wealth = -200
		}	
	}
}

# ASK_TO_EMBARGO_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 296

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC296"

	option = {
		name = "OK"
	}
}

# on_forced_consort
character_event = {
	id = 660
	desc = { 
		text = EVTDESC660
		trigger = {
			is_female = yes
		}
	}
	desc = { 
		text = EVTDESC660_B
		trigger = {
			is_female = no
		}
	}
	picture = GFX_evt_scandal
	
	is_triggered_only = yes 
	
	# immediate = {
		# hidden_tooltip = {
			
		# }	
	# }
	
	option = {
		name = { 
			text = EVTOPTA660
			trigger = {
				is_female = yes
			}
		}
		name = { 
			text = EVTOPTA660
			trigger = {
				is_female = no
			}
		}
		# opinion = {
			# who = FROM
			# modifier = opinion_forced_consort
			# months = 1200
		# }
	}
}

character_event = {
	id = 661
	desc = "EVTDESC661"
	picture = GFX_evt_scandal
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTA661"
		opinion = {
			who = FROMFROM
			modifier = opinion_forced_relative_consort
			months = 1200
		}
	}
}

character_event = {
	id = 662
	desc = { 
		text = EVTDESC662_B
		trigger = {
			is_female = yes
		}
	}
	desc = { 
		text = EVTDESC662
		trigger = {
			is_female = no
		}
	}
	picture = GFX_evt_scandal
	
	is_triggered_only = yes 
	
	option = {
		name = "EVTOPTB662"
		trigger = {
			NOR = {
				is_rival = FROMFROM
				num_of_rivals = 3
			}
		}
		add_rival = FROMFROM
		hidden_tooltip = {
			opinion = {	
				who = FROM
				modifier = opinion_abducted_spouse
				months = 1200
			}
		}
	}
	option = {
		name = "EVTOPTA662"
		opinion = {
			who = FROMFROM
			modifier = opinion_forced_wife_consort
			months = 1200
		}
		hidden_tooltip = {
			opinion = {	
				who = FROM
				modifier = opinion_abducted_spouse
				months = 1200
			}
		}
	}
}
#REFORMATION
narrative_event = {
	id = 670
	title = "EVTNAME670"
	desc = {
		trigger = {
			has_dlc = "Holy Fury" 
			NOT = {
				has_alternate_start_parameter = { key = religion_names value = random }
			}
		}
		text = EVTDESC670_HF
		sound = pagan_reformation
	}
	desc = {
		trigger = {
			has_dlc = "Holy Fury" 
			has_alternate_start_parameter = { key = religion_names value = random }
		}
		text = EVTDESC670_HF_B
		sound = pagan_reformation
	}
	desc = {
		trigger = {
			NOT = { has_dlc = "Holy Fury" }
		}
		text = EVTDESC670
		sound = pagan_reformation
	}
	picture = { 
		trigger = { 
			is_old_gods_religion_trigger = yes
		} 
		picture = GFX_godswood
	}
	picture = { 
		trigger = { 
			religion_group = summer_rel_group
			NOR = {
				religion = nath_pagan_reformed
				religion = nath_pagan
			}
		} 
		picture = GFX_evt_west_african_ruler
	}
	picture = { 
		trigger = { 
			religion_group = drowned_god_group
		} 
		picture = GFX_drowned
	}
	picture = { 
		trigger = { 
			OR = {
				religion = moonsingers_reformed
				religion = moonsingers
			}
		} 
		picture = GFX_braavos
	}
	picture = { 
		trigger = { 
			OR = {
				religion = rhoynar_pagan_reformed
				religion = rhoynar_pagan
			}
		} 
		picture = GFX_MARTELL
	}
	picture = { 
		trigger = { 
			religion_group = valyrian_rel_group
		} 
		picture = GFX_evt_dragon_riding_1
	}
	picture = { 
		trigger = { 
			religion_group = ghiscar_rel
		} 
		picture = GFX_evt_dany_meereen_1
	}
	picture = { 
		trigger = { 
			OR = {
				religion = yiti_gods_reformed
				religion = yiti_gods
			}
		} 
		picture = GFX_god_emperor
	}
	picture = { 
		trigger = { 
			OR = {
				religion = gods_bone_mountains_reformed
				religion = gods_bone_mountains
			}
		} 
		picture = GFX_kayakayanaya
	}
	picture = { 
		trigger = { 
			religion_group = jogos_rel_group
		} 
		picture = GFX_evt_jogos_nhai
	}
	picture = { 
		trigger = { 
			OR = {
				religion = nath_pagan_reformed
				religion = nath_pagan
			}
		} 
		picture = GFX_naath_butterflies
	}
	
	picture = GFX_evt_pagan_reformation
	border = "GFX_event_narrative_frame_religion"
	
	is_triggered_only = yes
	major = yes
	show_ROOT = yes
	hide_new = yes
	
	only_rulers = yes
	
	immediate = {
		hidden_tooltip = {
			if = {
				limit = { #Modifier not applied correctly by pagan reformation screen.
					ROOT = { has_religion_feature = religion_cosmopolitan }
				}
				ROOT = { 	
					religion_authority = {
						modifier = cosmopolitan_religion
						years = 1000
					}
					any_playable_ruler = { 
						limit = { NOT = { distance_from_realm = { who = ROOT value = 1000 } } }
						add_intermarry = ROOT
						ROOT = { add_intermarry = PREV }
					}
					any_neighbor_independent_ruler = { 
						add_intermarry = ROOT
						ROOT = { add_intermarry = PREV }
					}
				} 
			}
			if = {
				limit = { #Modifier not applied correctly by pagan reformation screen.
					ROOT = { has_religion_feature = religion_dogmatic }
				}
				ROOT = { 	
					apply_dogmatic_on_start_effect = yes
				} 
			}
			if = {
				limit = { #Switch to matriarchy.
					ROOT = { has_religion_feature = religion_matriarchal }
				}
				ROOT = { 
					any_demesne_title = { 
						add_law = {
							law = enatic_succession
							cooldown = no
							opinion_effect = no
						}
					} 
					recalc_succession = yes
				} 
			}
			if = {
				limit = { #Switch to equality.
					ROOT = { 
						OR = { 
							has_religion_feature = religion_equal 
							has_religion_feature = religion_feature_rhoynar_pagan
						}
					}
				}
				ROOT = { 
					any_demesne_title = { 
						add_law = {
							law = true_cognatic_succession
							cooldown = no
							opinion_effect = no
						}
					}	
					recalc_succession = yes
				} 
			}
			if = {
				limit = { #Switch to patriarchy.
					ROOT = { has_religion_feature = religion_patriarchal }
				}
				ROOT = { 
					any_demesne_title = { 
						add_law = {
							law = agnatic_succession
							cooldown = no
							opinion_effect = no
						}
					} 
					recalc_succession = yes
				} 
			}
			if = {
				limit = { #Apply default special features if player doesn't have dlc.
					NOT = { has_dlc = "Holy Fury" } 
				}
				if = {
					limit = { ROOT = { religion = beyond_wall_old_gods_reformed } }
					ROOT = { 
						make_reformer_head_of_religion = yes
						set_ai_aggression = 2.0
					} 
				}
				else_if = {
					limit = {
						ROOT = { religion = norse_pagan_reformed } 
					}
					ROOT = { 
						set_allow_rivermovement = yes 
						set_seafaring = yes
						set_ai_aggression = 2.0
					} 
				}
				else_if = {
					limit = {
						ROOT = { religion = moonsingers_reformed } 
					}
					ROOT = { 
						set_character_modifier = {
							global_revolt_risk = -0.02
							westerosi_religion_opinion = 10
							wildling_religion_opinion = 10
							drowned_god_group_opinion = 10
							essos_group_opinion = 10
							sarnor_rel_opinion = 10
							qarth_rel_opinion = 10
							ghiscar_rel_opinion = 10
							far_east_group_opinion = 10
							ibben_rel_opinion = 10
							dothraki_rel_group_opinion = 10
							jogos_rel_group_opinion = 10
							lhazar_rel_group_opinion = 10
							summer_rel_group_opinion = 10
							pirate_group_opinion = 10
							corsair_group_opinion = 10
							islands_rel_opinion = 10
							sothoryos_rel_group_opinion = 10
							pagan_group_opinion = 10
						}
					} 
				}
				else_if = {
					limit = {
						ROOT = { religion = rhoynar_pagan_reformed } 
					}
					ROOT = { 
						set_allow_rivermovement = yes 
						set_feminist = yes 
						set_female_temple_holders = yes
					} 
				}
				else_if = {
					limit = {
						ROOT = { religion = valyrian_rel_reformed } 
					}
					ROOT = { 
						set_divine_blood = yes
						set_bs_marriage = yes
						set_max_consorts = 0
						set_max_wives = 3
						set_character_modifier = {
							dragon_hatching = 4
							dragon_taming = 4
							global_revolt_risk = -0.02
							westerosi_religion_opinion = 5
							wildling_religion_opinion = 5
							drowned_god_group_opinion = 5
							essos_group_opinion = 5
							sarnor_rel_opinion = 5
							qarth_rel_opinion = 5
							ghiscar_rel_opinion = 5
							far_east_group_opinion = 5
							ibben_rel_opinion = 5
							dothraki_rel_group_opinion = 5
							jogos_rel_group_opinion = 5
							lhazar_rel_group_opinion = 5
							summer_rel_group_opinion = 5
							pirate_group_opinion = 5
							corsair_group_opinion = 5
							islands_rel_opinion = 5
							sothoryos_rel_group_opinion = 5
							pagan_group_opinion = 5
						}
					} 
				}
				else_if = {
					limit = { ROOT = { religion = jogos_pagan_reformed } }
					ROOT = { 
						set_ai_aggression = 2.0
					} 
				}
				else_if = {
					limit = { ROOT = { religion = great_shepherd_reformed } }
					ROOT = { 
						set_ai_aggression = 0.5
					} 
				}
				else_if = {
					limit = { ROOT = { religion = nath_pagan_reformed } }
					ROOT = { 
						set_pacifist = yes
						set_peace_piety_gain = 1
						set_ai_aggression = 0.1
						set_short_reign_opinion_year_mult = 0
						set_character_modifier = {
							global_revolt_risk = -0.05
							westerosi_religion_opinion = 5
							wildling_religion_opinion = 5
							drowned_god_group_opinion = 5
							essos_group_opinion = 5
							sarnor_rel_opinion = 5
							qarth_rel_opinion = 5
							ghiscar_rel_opinion = 5
							far_east_group_opinion = 5
							ibben_rel_opinion = 5
							dothraki_rel_group_opinion = 5
							jogos_rel_group_opinion = 5
							lhazar_rel_group_opinion = 5
							valyrian_rel_group_opinion = 5
							pirate_group_opinion = 5
							corsair_group_opinion = 5
							islands_rel_opinion = 5
							sothoryos_rel_group_opinion = 5
							pagan_group_opinion = 5
						}
					} 
				}
				else_if = {
					limit = {
						ROOT = { religion = lady_of_the_waves_reformed } 
					}
					ROOT = { 
						set_allow_rivermovement = yes 
						set_seafaring = yes
						make_reformer_head_of_religion = yes
						set_ai_aggression = 2.0
					} 
				}
				else_if = {
					limit = {
						NOT = { religion = harpy_reformed }
						NOT = { religion = summer_rel_reformed }
						NOT = { religion = boash_reformed }
						NOT = { religion = shadowbinders_reformed }
					}
					ROOT = { 
						make_reformer_head_of_religion = yes
					} 
				}			
			}

			any_courtier = {
				limit = {
					is_heresy_of = ROOT
					employer = { character = ROOT }
					is_ruler = no
				}
				religion = ROOT
			}
			any_dynasty_member = {
				limit = {
					is_heresy_of = ROOT
					is_playable = no
				}
				religion = ROOT
			}
			any_vassal = {
				limit = {
					is_playable = no
					is_heresy_of = ROOT
				}
				religion = ROOT
			}
			capital_scope = {
				if = {
					limit = { is_heresy_of = ROOT }
					religion = ROOT
				}
			}
			hidden_effect = {
				if = { #Add the seven
					limit = {
						has_religion_feature = religion_feature_the_seven
					}
					add_god_name = GOD_FATHER
					add_god_name = GOD_MOTHER
					add_god_name = GOD_WARRIOR
					add_god_name = GOD_MAIDEN
					add_god_name = GOD_SMITH
					add_god_name = GOD_CRONE
					add_god_name = GOD_SEVEN
					add_evil_god_name = GOD_THE_STRANGER
				}
				reformation_god_names_changes_effect = yes			
			}
			if = { #valyrian reformer may gain divine blood status
				limit = {
					ROOT = { 
						religion = valyrian_rel_reformed 
						is_divine_blood_dynasty_trigger = no
						OR = {
							has_religion_feature = religion_feature_valyrian_rel
							NOT = { has_dlc = "Holy Fury" }
						}
						OR = {
							culture = high_valyrian
							graphical_culture = valyriangfx
						}
						NOT = { dynasty = 0 }
					} 
				}
				ROOT = { 
					custom_tooltip = {
						text = TOOLTIP_grant_purity_of_blood
						set_divine_blood = yes
						set_dynasty_flag = high_valyrian
						set_dynasty_flag = coin_flip_dynasty
					}
					if = {
						limit = { 
							NOT = { any_owned_bloodline = { has_flag = blood_of_the_dragon } }
						}
						create_bloodline = {
							type = blood_of_the_dragon
						}
					}	
					if = {
						limit = {
							graphical_culture = valyriangfx
							NOT = { culture = high_valyrian }
						}
						culture = high_valyrian
						hidden_tooltip = {
							any_dynasty_member = {
								limit = {
									graphical_culture = valyriangfx
									NOT = { culture = high_valyrian }
								}
								culture = high_valyrian
							}
						}	
					}
				} 
			}
			#Opinion boost to new religious head (if any) and Reformer.
			if = {
				limit = { 
					has_dlc = "Holy Fury" 
					OR = {
						has_religion_feature = religion_theocratic_head
						has_religion_feature = religion_autocephaly 
					} 

				}
				religion_head = { opinion = { who = ROOT modifier = opinion_my_reformer years = 50 } }
			}
		}
		# fixed
		if = {
			limit = { religion = old_gods_reformed }
			set_global_flag = old_gods_reformation
		}
		if = {
			limit = { religion = beyond_wall_old_gods_reformed }
			set_global_flag = beyond_wall_old_gods_reformation
		}
		if = {
			limit = { religion = drowned_god_reformed }
			set_global_flag = drowned_god_reformation
		}
		if = {
			limit = { religion = black_goat_reformed }
			set_global_flag = black_goat_reformation
		}
		if = {
			limit = { religion = gods_lorath_reformed }
			set_global_flag = gods_lorath_reformation
		}
		if = {
			limit = { religion = moonsingers_reformed }
			set_global_flag = moonsingers_reformation
		}
		if = {
			limit = { religion = trios_reformed }
			set_global_flag = trios_reformation
		}
		if = {
			limit = { religion = father_of_waters_reformed }
			set_global_flag = father_reformation
		}
		if = {
			limit = { religion = rhoynar_pagan_reformed }
			set_global_flag = rhoynar_pagan_reformation
		}
		if = {
			limit = { religion = boash_reformed }
			set_global_flag = boash_reformation
		}
		if = {
			limit = { religion = weeping_lady_reformed }
			set_global_flag = weeping_lady_reformation
		}
		if = {
			limit = { religion = valyrian_rel_reformed }
			set_global_flag = valyrian_rel_reformation
		}
		if = {
			limit = { religion = gods_sarnor_reformed }
			set_global_flag = gods_sarnor_reformation
		}
		if = {
			limit = { religion = harpy_reformed }
			set_global_flag = harpy_reformation
		}
		if = {
			limit = { religion = yiti_gods_reformed }
			set_global_flag = yiti_gods_reformation
			yi_ti_emperor_god_name_effect = yes # (crutch) because "basic" GOD_THE_EMPEROR variable is empty
		}
		if = {
			limit = { religion = lion_night_reformed }
			set_global_flag = lion_night_reformation
		}
		if = {
			limit = { religion = shadowbinders_reformed }
			set_global_flag = shadowbinders_reformation
		}
		if = {
			limit = { religion = gods_bone_mountains_reformed }
			set_global_flag = gods_bone_mountains_reformation
		}
		if = {
			limit = { religion = gods_nghai_reformed }
			set_global_flag = gods_nghai_reformation
		}
		if = {
			limit = { religion = stone_cow_reformed }
			set_global_flag = stone_cow_reformation
		}
		if = {
			limit = { religion = jogos_pagan_reformed }
			set_global_flag = jogos_pagan_reformation
		}
		if = {
			limit = { religion = great_shepherd_reformed }
			set_global_flag = great_shepherd_reformation
		}
		if = {
			limit = { religion = aztec_reformed }
			set_global_flag = aztec_reformation
		}
		if = {
			limit = { religion = summer_rel_reformed }
			set_global_flag = summer_rel_reformation
		}
		if = {
			limit = { religion = nath_pagan_reformed }
			set_global_flag = nath_pagan_reformation
		}
		if = {
			limit = { religion = lady_of_the_waves_reformed }
			set_global_flag = lady_of_the_waves_reformation
		}
		# fixed
	}

	option = {
		name = "EVTOPTA670" # The Reformer
		trigger = { religion = ROOT }
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_PLAYER_REFORMED_RELIGION
				portrait = [Root.GetID]
			}
		}
		hidden_tooltip = {
			if = {
				limit = { 
					ROOT = { has_religion_feature = religion_matriarchal }
				}
				ROOT = { 
					any_demesne_title = { 
						add_law = {
							law = enatic_succession
							cooldown = no
							opinion_effect = no
						}
					} 
					recalc_succession = yes
				} 
			}
			if = {
				limit = { 
					ROOT = { has_religion_feature = religion_patriarchal }
				}
				ROOT = { 
					any_demesne_title = { 
						add_law = {
							law = agnatic_succession
							cooldown = no
							opinion_effect = no
						}
					} 
					recalc_succession = yes
				} 
			}
			if = {
				limit = { 
					ROOT = {
						OR = { 
							has_religion_feature = religion_equal 
							has_religion_feature = religion_feature_rhoynar_pagan
						}
					}
				}
				ROOT = { 
					any_demesne_title = { 
						add_law = {
							law = true_cognatic_succession
							cooldown = no
							opinion_effect = no
						}
					} 
					recalc_succession = yes
				} 
			}
			ROOT = {
				if = {
					limit = { 
						has_religion_feature = religion_matriarchal 
					}
					any_close_relative = { 
					limit = { is_female = no }
						opinion = { 
							who = ROOT 
							modifier = bad_succ_law_change
							years = 100
						}
					}
					any_close_relative = { 
						limit = { is_female = yes }
						opinion = { 
							who = ROOT 
							modifier = good_succ_law_change
							years = 100
						}
					}
				}
				if = {
					limit = { 
						has_religion_feature = religion_patriarchal 
					}
					any_close_relative = { 
						limit = { is_female = yes }
						opinion = { 
							who = ROOT 
							modifier = bad_succ_law_change
							years = 100
						}
					}
					any_close_relative = { 
						limit = { is_female = no }
						opinion = { 
							who = ROOT 
							modifier = good_succ_law_change
							years = 100
						}
					}
				}
			}
		}
	}
	option = {
		name = "EVTOPTB670" # Rulers of the old Faith - Accept
		trigger = {
			is_heresy_of = ROOT # The old religion has become a heresy of the Reformed one
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = { has_religion_feature = religion_no_leader }
				ai = yes
			}		
			hidden_tooltip = { 
				any_demesne_title = { 
					add_law = {
						law = enatic_succession
						cooldown = no
						opinion_effect = no
					}
				} 
				recalc_succession = yes
			} 
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = { has_religion_feature = religion_patriarchal }
			}
			custom_tooltip = { text = tooltip_HF23015_A }
			hidden_tooltip = { 
				any_demesne_title = { 
					add_law = {
						law = agnatic_succession
						cooldown = no
						opinion_effect = no
					}
				} 
				recalc_succession = yes
			} 
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = {
					OR = { 
						has_religion_feature = religion_equal 
						has_religion_feature = religion_feature_rhoynar_pagan
					}
				}
			}
			custom_tooltip = { text = tooltip_HF23016_A }
			hidden_tooltip = { 
				any_demesne_title = { 
					add_law = {
						law = true_cognatic_succession
						cooldown = no
						opinion_effect = no
					}
				} 
				recalc_succession = yes
			} 
		}
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_OTHER_REFORMED_PLAYERS_RELIGION
				portrait = [Root.GetID]
			}
		}
		ai_chance = {
			factor = 50
			modifier = {
				factor = 5
				any_liege = { religion = ROOT }
			}
			modifier = {
				factor = 2
				same_realm = ROOT
			}
			modifier = {
				factor = 5
				trait = cynical
			}
			modifier = {
				factor = 10
				dynasty = ROOT
			}
			modifier = {
				factor = 0.1
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = content
			}
		}
		
		religion = ROOT
		
		hidden_tooltip = {
			any_courtier = {
				limit = {
					is_heresy_of = ROOT
					employer = { character = PREV }
				}
				religion = ROOT
			}
			any_dynasty_member = {
				limit = {
					is_heresy_of = ROOT
					is_playable = no
				}
				religion = ROOT
			}
			any_vassal = {
				limit = {
					is_playable = no
					is_heresy_of = ROOT
				}
				religion = ROOT
			}
			capital_scope = {
				if = {
					limit = { is_heresy_of = ROOT }
					religion = ROOT
				}
			}
		}
	}
	option = {
		name = "EVTOPTC670" # Rulers of the old Faith - Decline
		trigger = {
			is_heresy_of = ROOT # The old religion has become a heresy of the Reformed one
		}
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_OTHER_REFORMED_PLAYERS_RELIGION
				portrait = [Root.GetID]
			}
		}
		ai_chance = {
			factor = 50
			post_reformation_ruler_conversion_score = yes
		}
		tooltip = { religion = THIS }
	}
	option = {
		name = "EVTOPTD670" # Other playable rulers
		trigger = {
			NOT = { religion = ROOT }
			NOT = { is_heresy_of = ROOT }
		}
	}
}
####################################################
# Elective Gavelkind Succession:
# Vassal Junior Heir Can Choose Independence
####################################################

character_event = {
	id = 63103
	desc = EVTDESC_63103
	picture = GFX_evt_throne_room

	capable_only = yes
	prisoner = no
	min_age = 16
	
	is_triggered_only = yes
	has_dlc = "Charlemagne"
	
	trigger = {		
		top_liege = {
			in_revolt = no
		}
	}
	immediate = {
		sound_effect = pagan_reformation
	}
	
	option = {
		name = EVTOPTA_63103 # Remain a vassal
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = FROM
					value = 25
				}
			}
			modifier = {
				factor = 2
				opinion = {
					who = FROM
					value = 50
				}
			}
			modifier = {
				factor = 4
				trait = content
			}
		}
	}
	option = {
		name = EVTOPTB_63103 # Go independent
		
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				NOT = {
					opinion = {
						who = FROM
						value = -25
					}
				}
			}
			modifier = {
				factor = 2
				NOT = {
					opinion = {
						who = FROM
						value = -50
					}
				}
			}
			modifier = {
				factor = 2
				trait = ambitious
			}
		}
		
		hidden_tooltip = {
			FROM = { character_event = { id = 63104 } }
		}
		
		if = {
			limit = {
				liege = {
					independent = no
				}
			}
			liege = {
				liege = {
					ROOT = {
						set_defacto_liege = PREV
						set_character_flag = set_to_higher_liege
					}
				}
			}
		}
		
		if = {
			limit = {
				liege = {
					independent = yes
				}
				NOT = { has_character_flag = set_to_higher_liege }
			}
			set_defacto_liege = THIS
		}
		
		clr_character_flag = set_to_higher_liege
		
		any_demesne_title = {
			limit = {
				OR = {
					higher_tier_than = DUKE
					tier = ROOT
					is_primary_holder_title_tier = yes
					controls_religion = no
				}
				NOR = {
					has_de_jure_pretension = FROM 
					dejure_liege_title = { has_de_jure_pretension = FROM }
					dejure_liege_title = { dejure_liege_title = { has_de_jure_pretension = FROM } }
				}
			}
			add_claim = FROM
		}
	}
}

# The liege is notified of the independence
character_event = {
	id = 63104
	desc = EVTDESC_63104
	picture = GFX_evt_emissary

	is_triggered_only = yes
	
	notification = yes
	
	option = {
		name = EVTOPTA_63104
	}
	
}
# Safety check event for flag clearace - do_not_disturb etc
character_event = {
	id = 63106
	
	hide_window = yes
	
	is_triggered_only = yes
	has_character_flag = do_not_disturb
	
	trigger = { # Clears if flag has stayed on for 5 years approx
		had_character_flag = { flag = do_not_disturb days = 1800 }
	}
	
	immediate = {
		clr_character_flag = do_not_disturb
	}
}
#Realm informed of gender succession law change
letter_event = {
	id = 45343
	picture = GFX_evt_emissary

	is_triggered_only = yes
	
	trigger = {
		FROM = { NOT_mythical_creature_trigger = yes }
	}
	
	desc = {
		text = EVTDESC45343COGNATIC
		trigger = { FROM = { primary_title = { has_law = cognatic_succession } } }
	}
	desc = {
		text = EVTDESC45343AGNATIC
		trigger = { 
			FROM = { 
				primary_title = { has_law = agnatic_succession } 
				OR = {
					NOT = { has_character_flag = agnatic_female_heir }
					current_heir = { is_female = yes }
				}
			} 
		}
	}
	desc = {
		text = EVTDESC45343AGNATICCHANGE
		trigger = { 
			FROM = { 
				primary_title = { has_law = agnatic_succession }
				has_character_flag = agnatic_female_heir
				current_heir = { is_female = no }				
			} 
		}
	}
	desc = {
		text = EVTDESC45343TRUECOGNATIC
		trigger = { FROM = { primary_title = { has_law = true_cognatic_succession } } }
	}
	desc = {
		text = EVTDESC45343ENATIC
		trigger = { FROM = { primary_title = { has_law = enatic_succession } } }
	}
	
	option = {
		name = OK
	}	
}
#Inform player fired from council
letter_event = {
	id = 45344
	desc = EVTDESC45344
	
	is_triggered_only = yes
	prisoner = no
	capable_only = yes
	
	trigger = { 
		liege = { character = FROMFROM } 
		NOT = { is_inaccessible_trigger = yes }
		FROMFROM = { is_alive = yes higher_tier_than = ROOT }
		NOT = { has_character_flag = not_fired_from_council }
	}
	
	option = {
		name = OPTA45344
	}	
}

# BUY_FAVOR_ACCEPT_EVENT =
diploresponse_event = {
	id = 520
	desc = "EVTDESC520"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA520"
	}
}

# BUY_FAVOR_DECLINE_EVENT =
diploresponse_event = {
	id = 521
	desc = "EVTDESC521"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA521"
	}
}

# REQUEST_SUPPORT_ACCEPT_EVENT =
diploresponse_event = {
	id = 522
	desc = "EVTDESC522"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA522"
	}
}

# REQUEST_SUPPORT_DECLINE_EVENT =
diploresponse_event = {
	id = 523
	desc = "EVTDESC523"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA523"
	}
}

# FORM_NON_AGGRESSION_PACT_ACCEPT_EVENT =
diploresponse_event = {
	id = 524
	desc = "EVTDESC524"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA524"
	}
}

# FORM_NON_AGGRESSION_PACT_DECLINE_EVENT =
diploresponse_event = {
	id = 525
	desc = "EVTDESC525"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA525"
	}
}

# letter_event = {
	# id = 750
	# desc = "EVTDESC750"
	
	# is_triggered_only = yes
	
	# trigger = {
		# ai = no
		# is_voter = yes
	# }

	# option = {
		# name = "EVTOPTA290"
		# approve_law = FROM
	# }
	
	# option = {
		# name = "EVTOPTB290"
	# }
# }

# ASK_COUNCIL_POSITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 526
	desc = "EVTDESC526"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
		custom_tooltip = { text = EVT527_TOOLTIP }
	}
}

# ASK_COUNCIL_POSITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 527
	desc = "EVTDESC527"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ASK_REALM_PEACE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 528
	desc = "EVTDESC528"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ASK_REALM_PEACE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 529
	desc = "EVTDESC529"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORCE_JOIN_FACTION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 530
	desc = "EVTDESC530"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORCE_JOIN_FACTION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 531
	desc = "EVTDESC531"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}
# ASK_TO_JOIN_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 535

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC535"

	option = {
		name = "OK"
	}
}

# ASK_TO_JOIN_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 536

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC536"

	option = {
		name = "OK"
	}
}

# OFFER_CONSORT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 537
	desc = EVTDESC537

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# GIVE_ARTIFACT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 538
	desc = EVTDESC538

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
		FROM = { #player fulfills artefact promise for service rendered
			if = {
				limit = {
					has_character_flag = promised_gift_artefact
					reverse_has_opinion_modifier = { who = PREV modifier = opinion_service_rendered }
					check_variable = { which = "services_rendered" value = 1.9 }
				}
				hidden_tooltip = { set_variable = { which = "services_rendered" value = 0 } }
				clr_character_flag = promised_gift_artefact
				opinion = { who = PREV modifier = opinion_rewarded years = 5 }
				if = {
					limit = { has_character_flag = dirty_service }
					clr_character_flag = dirty_service
					PREV = {
						if = {
							limit = { tier = EMPEROR }
							prestige = -75
						}
						if = {
							limit = { tier = KING }
							prestige = -50
						}
						if = {
							limit = { tier = DUKE }
							prestige = -30
						}
						if = {
							limit = { lower_tier_than = DUKE }
							prestige = -15
						}
					}
				}
			}
		}
	}
}
#Preserve player religion if heir has DLC locked religion
character_event = {
	id = 680
	hide_window = yes
	is_triggered_only = yes
	ai = no
	trigger = {
		is_nomadic = no
		player_heir = {
			OR = {
				has_unsafe_secret_religion = yes
				has_unsafe_religion = yes
			}
		}
	}
	immediate = {
		player_heir = {
			if = {
				limit = { has_unsafe_secret_religion = yes }
				clear_secret_religion = yes
			}
			if = {
				limit = { has_unsafe_religion = yes }
				religion = ROOT
			}
		}
	}
}
# On-action event: Avoided title revokation, declared independence
character_event = {
	id = 681
	desc = "EVTDESC681"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA150"
		if = {
			limit = { 
				NOT = { war_with = FROM } 
				liege = { character = FROM }
				liege_before_war = { character = FROM }
			}	
			if = {
				limit = { FROM = { primary_title = { ROOT = { has_claim = PREV } } } }
				FROM = {
					primary_title = {
						reverse_war = {
							target = ROOT
							casus_belli = claim_on_liege
						}
					}	
				}
			}	
			else = {
				FROM = {
					reverse_war = {
						target = ROOT
						casus_belli = overthrow_ruler
					}					
				}
			}			
		}	
		if = {
			limit = { 
				war_with = FROM	
			}	
			FROM = { 
				#character_event = { id = 45431 } #other vassals may join
			}
		}
	}
}

# On-action event: Avoided vassal retraction, declared independence
character_event = {
	id = 682
	desc = "EVTDESC682"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA150"
		if = {
			limit = { 
				NOT = { war_with = FROM } 
				liege = { character = FROM }
				liege_before_war = { character = FROM }
			}	
			if = {
				limit = { FROM = { primary_title = { ROOT = { has_claim = PREV } } } }
				FROM = {
					primary_title = {
						reverse_war = {
							target = ROOT
							casus_belli = claim_on_liege
						}
					}	
				}
			}	
			else = {
				FROM = {
					reverse_war = {
						target = ROOT
						casus_belli = overthrow_ruler
					}					
				}
			}		
		}	
		if = {
			limit = { 
				war_with = FROM	
			}	
			FROM = { 
				#character_event = { id = 45431 } #other vassals may join
			}
		}
	}
}

# On-action event: Avoided clan absorb, declared independence
character_event = {
	id = 683
	desc = "EVTDESC683"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA150"
	}
}

# On-action event: Avoided clan split, declared independence
character_event = {
	id = 684
	desc = "EVTDESC684"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes 

	option = {
		name = "EVTOPTA150"
	}
}

# On-action event: Remove in-hiding trait on imprisonment
character_event = {
	id = 685
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		trait = in_hiding
	}
	
	immediate = {
		remove_trait = in_hiding
		clr_character_flag = hidden_from_siege
		clr_character_flag = do_not_disturb
	}
}
###### TODO REMOVE TEST EVENT
#character_event = {
#	id = 686
#	hide_window = yes
#	is_triggered_only = yes
#	
#	trigger = {
#		is_save_game = no
#		NOT = { has_global_flag = start_seed_bloodlines }
#		NOT = { is_shattered_world = yes }
#	}
#	
#	immediate = {
#		set_global_flag = start_seed_bloodlines
#		any_independent_ruler = {
#			count = 5
#			random_list = {
#				10 = {
#					create_bloodline = {
#						type = bloodline_martial
#					}
#				}
#				10 = {
#					create_bloodline = {
#						type = bloodline_steward
#					}
#				}
#				10 = {
#					create_bloodline = {
#						type = bloodline_intrigue
#					}
#				}
#				10 = {
#					create_bloodline = {
#						type = bloodline_learning
#					}
#				}
#				10 = {
#					create_bloodline = {
#						type = bloodline_diplomacy
#					}
#				}
#			}
#		}
#	}
#}

# character_event = {
	# id = 687
	# hide_window = yes
	
	# is_triggered_only = yes

	# trigger = {
		# FROM = {
			# ai = no
		# }
		# is_shattered_world = yes
		# has_character_flag = great_conqueror
	# }
	# immediate = {
		# FROM = {
			# set_character_flag = achievement_not_so_great
		# }
	# }
# }

# character_event = {
	# id = 688
	# hide_window = yes
	
	# is_triggered_only = yes

	# trigger = {
		# ai = no
		# is_shattered_world = yes
		# FROM = { 
			# has_character_flag = great_conqueror
		# }
	# }
	# immediate = {
		# set_character_flag = achievement_not_so_great
	# }
# }


# Scripted default elective token setup
character_event = {
	id = 689
	hide_window = yes
	
	is_triggered_only = yes
	
	only_rulers = yes
	
	immediate = {
		any_demesne_title = {
			if = {
				limit = {
					has_law = succ_elective_gavelkind
				}
				elective_voting_rules = elective_gavelkind
			}
			else_if = {
				limit = {
					has_law = succ_tanistry
				}
				elective_voting_rules = tanistry
			}
			else_if = {
				limit = {
					has_law = succ_feudal_elective
				}
				elective_voting_rules = feudal_elective
			}
			else_if = {
				limit = {
					has_law = noble_oligarchy_elective
				}
				elective_voting_rules = noble_oligarchy_elective
			}
			else_if = {
				limit = {
					has_law = succ_kingsmoot_elective
				}
				elective_voting_rules = succ_kingsmoot_elective
			}
		}
	}
}
###AGOT on death event### Is now hidden
character_event = {
	id = 45340
	desc = "EVTDESC45340"
	picture = "GFX_evt_death"
	
	is_triggered_only = yes 

	hide_window = yes
	
	immediate = {
		#dishonorable
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 19.9 }						
			}
			change_variable = { which = dishonorable value = -10 } #less 10 dishonour is inherited			
			current_heir = { 
				if = {
					limit = {
						OR = {								
							is_child_of = ROOT
							AND = { #Non-child heirs do not inherit if they've already inherited dishonour
								dynasty = ROOT
								NOR = {
									trait = dyn_dishonorable1
									trait = dyn_dishonorable2
									trait = dyn_dishonorable3
									trait = dyn_dishonorable4
									trait = dyn_dishonorable5
									trait = dyn_dishonorable6
									trait = dyn_dishonorable7
									trait = dyn_dishonorable8
									trait = dyn_dishonorable9
									trait = dyn_dishonorable10
								}
							}
						}
					}
					set_character_flag = heir	
					change_variable = { which = "dishonorable" which = ROOT }					
					if = { #add to existing dishonour
						limit = {
							OR = {
								trait = dishonorable1
								trait = dishonorable2
								trait = dishonorable3
								trait = dishonorable4
								trait = dishonorable5
								trait = dishonorable6
								trait = dishonorable7
								trait = dishonorable8
								trait = dishonorable9
								trait = dishonorable10
							}
						}
						remove_trait = dishonorable1
						remove_trait = dishonorable2
						remove_trait = dishonorable3
						remove_trait = dishonorable4
						remove_trait = dishonorable5
						remove_trait = dishonorable6
						remove_trait = dishonorable7
						remove_trait = dishonorable8
						remove_trait = dishonorable9
						remove_trait = dishonorable10
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 9.9 }
								NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
							}
							add_trait = dishonorable1		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 19.9 }
								NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
							}
							add_trait = dishonorable2		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 29.9 }
								NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
							}
							add_trait = dishonorable3		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 39.9 }
								NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
							}
							add_trait = dishonorable4		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 49.9 }
								NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
							}
							add_trait = dishonorable5		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 59.9 }
								NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
							}
							add_trait = dishonorable6	
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 69.9 }
								NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
							}
							add_trait = dishonorable7		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 79.9 }
								NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
							}
							add_trait = dishonorable8		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 89.9 }
								NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
							}
							add_trait = dishonorable9
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 99.9 }
							}
							add_trait = dishonorable10
							set_variable = { which = "dishonorable" value = 100 }	#MAX
						}
						set_character_flag = dishonorable_inherited
					}
					if = { #If no existing dishonor, add stain trait
						limit = { NOT = { has_character_flag = dishonorable_inherited } }
						remove_trait = dyn_dishonorable1
						remove_trait = dyn_dishonorable2
						remove_trait = dyn_dishonorable3
						remove_trait = dyn_dishonorable4
						remove_trait = dyn_dishonorable5
						remove_trait = dyn_dishonorable6
						remove_trait = dyn_dishonorable7
						remove_trait = dyn_dishonorable8
						remove_trait = dyn_dishonorable9
						remove_trait = dyn_dishonorable10
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 9.9 }
								NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
							}
							add_trait = dyn_dishonorable1		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 19.9 }
								NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
							}
							add_trait = dyn_dishonorable2		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 29.9 }
								NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
							}
							add_trait = dyn_dishonorable3		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 39.9 }
								NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
							}
							add_trait = dyn_dishonorable4		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 49.9 }
								NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
							}
							add_trait = dyn_dishonorable5		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 59.9 }
								NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
							}
							add_trait = dyn_dishonorable6	
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 69.9 }
								NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
							}
							add_trait = dyn_dishonorable7		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 79.9 }
								NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
							}
							add_trait = dyn_dishonorable8		
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 89.9 }
								NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
							}
							add_trait = dyn_dishonorable9
						}
						if = {
							limit = {
								check_variable = { which = "dishonorable" value = 99.9 }
							}
							add_trait = dyn_dishonorable10
							set_variable = { which = "dishonorable" value = 100 }	#MAX
						}
					}
					if = {
						limit = { NOT = { has_character_flag = dishonor_decay_check } }
						set_character_flag = dishonor_decay_check
						character_event = { id = maintenance.4 days = 3650 } #Dishonor decays every 10 years
					}
					clr_character_flag = dishonorable_inherited
				}					
			}
			any_child = { 
				limit = {
					is_alive = yes
					NOT = { has_character_flag = heir }
				}
				change_variable = { which = "dishonorable" which = ROOT }					
				if = { #add to existing dishonour
					limit = {
						OR = {
							trait = dishonorable1
							trait = dishonorable2
							trait = dishonorable3
							trait = dishonorable4
							trait = dishonorable5
							trait = dishonorable6
							trait = dishonorable7
							trait = dishonorable8
							trait = dishonorable9
							trait = dishonorable10
						}
					}
					remove_trait = dishonorable1
					remove_trait = dishonorable2
					remove_trait = dishonorable3
					remove_trait = dishonorable4
					remove_trait = dishonorable5
					remove_trait = dishonorable6
					remove_trait = dishonorable7
					remove_trait = dishonorable8
					remove_trait = dishonorable9
					remove_trait = dishonorable10
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 9.9 }
							NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
						}
						add_trait = dishonorable1		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 19.9 }
							NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
						}
						add_trait = dishonorable2		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 29.9 }
							NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
						}
						add_trait = dishonorable3		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 39.9 }
							NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
						}
						add_trait = dishonorable4		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 49.9 }
							NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
						}
						add_trait = dishonorable5		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 59.9 }
							NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
						}
						add_trait = dishonorable6	
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 69.9 }
							NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
						}
						add_trait = dishonorable7		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 79.9 }
							NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
						}
						add_trait = dishonorable8		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 89.9 }
							NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
						}
						add_trait = dishonorable9
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 99.9 }
						}
						add_trait = dishonorable10
						set_variable = { which = "dishonorable" value = 100 }	#MAX
					}
					set_character_flag = dishonorable_inherited
				}
				if = { #If no existing dishonor, add stain trait
					limit = { NOT = { has_character_flag = dishonorable_inherited } }
					remove_trait = dyn_dishonorable1
					remove_trait = dyn_dishonorable2
					remove_trait = dyn_dishonorable3
					remove_trait = dyn_dishonorable4
					remove_trait = dyn_dishonorable5
					remove_trait = dyn_dishonorable6
					remove_trait = dyn_dishonorable7
					remove_trait = dyn_dishonorable8
					remove_trait = dyn_dishonorable9
					remove_trait = dyn_dishonorable10
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 9.9 }
							NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
						}
						add_trait = dyn_dishonorable1		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 19.9 }
							NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
						}
						add_trait = dyn_dishonorable2		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 29.9 }
							NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
						}
						add_trait = dyn_dishonorable3		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 39.9 }
							NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
						}
						add_trait = dyn_dishonorable4		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 49.9 }
							NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
						}
						add_trait = dyn_dishonorable5		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 59.9 }
							NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
						}
						add_trait = dyn_dishonorable6	
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 69.9 }
							NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
						}
						add_trait = dyn_dishonorable7		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 79.9 }
							NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
						}
						add_trait = dyn_dishonorable8		
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 89.9 }
							NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
						}
						add_trait = dyn_dishonorable9
					}
					if = {
						limit = {
							check_variable = { which = "dishonorable" value = 99.9 }
						}
						add_trait = dyn_dishonorable10
						set_variable = { which = "dishonorable" value = 100 }	#MAX
					}
				}
				if = {
					limit = { NOT = { has_character_flag = dishonor_decay_check } }
					set_character_flag = dishonor_decay_check
					character_event = { id = maintenance.4 days = 3650 } #Dishonor decays every 10 years
				}
				clr_character_flag = dishonorable_inherited
			}	
			current_heir = { clr_character_flag = heir }			
		}	
		#Valyrian Steel Inheritance
		if = {
			limit = { NOT = { has_character_flag = do_not_inherit_sword } }
			# if = {
				# limit = { 
					# has_artifact = dawn 
					# OR = {
						# is_alive = no
						# is_dying = yes
					# }
				# }
				# add_trait = dawn
				# random_artifact = {
					# limit = { artifact_type = dawn }
					# unsafe_destroy_artifact = yes
				# }
			# }
			if = {
				limit = { 
					has_artifact = lightbringer
					OR = {
						is_alive = no
						is_dying = yes
					}
				}
				add_trait = lightbringer
				random_artifact = {
					limit = { artifact_type = lightbringer }
					unsafe_destroy_artifact = yes
				}
			}
			any_artifact = {
				limit = {
					OR = {
						has_artifact_flag = valyrian_steel
						has_artifact_flag = valyrian_armour
					}
				}
				save_event_target_as = valyrian_sword_to_inherit
				#set_artifact_flag = previous_holder_@ROOT
				
				#Add trait for history
				if = {
					limit = {
						ROOT = {
							OR = {
								is_alive = no
								is_dying = yes
							}
						}	
					}
					if = {
						limit = { artifact_type = dawn }
						ROOT = {
							if = {
								limit = {
									OR = { #only record sword of the morning
										has_character_flag = nick_the_sword_of_the_morning
										NOT = { dynasty = 16 }
									}
								}
								add_trait = dawn 
							}							
						}	
					}
					else_if = {
						limit = { artifact_type = ice }
						ROOT = {
							add_trait = ice
						}	
					}
					else_if = {
						limit = { artifact_type = longclaw }
						ROOT = {
							add_trait = longclaw
						}	
					}
					else_if = {
						limit = { artifact_type = longclaw_snow }
						ROOT = {
							add_trait = longclaw_snow
						}	
					}
					else_if = {
						limit = { artifact_type = blackfyre }
						ROOT = {
							add_trait = blackfyre
						}	
					}
					else_if = {
						limit = { artifact_type = darksister }
						ROOT = {
							add_trait = darksister
						}	
					}
					else_if = {
						limit = { artifact_type = widowswail }
						ROOT = {
							add_trait = widowswail
						}	
					}
					else_if = {
						limit = { artifact_type = oathkeeper }
						ROOT = {
							add_trait = oathkeeper
						}	
					}
					else_if = {
						limit = { artifact_type = brightroar }
						ROOT = {
							add_trait = brightroar
						}	
					}
					else_if = {
						limit = { artifact_type = heartsbane }
						ROOT = {
							add_trait = heartsbane
						}	
					}
					else_if = {
						limit = { artifact_type = nightfall }
						ROOT = {
							add_trait = nightfall
						}	
					}
					else_if = {
						limit = { artifact_type = ladyforlorn }
						ROOT = {
							add_trait = ladyforlorn
						}	
					}
					else_if = {
						limit = { artifact_type = redrain }
						ROOT = {
							add_trait = redrain
						}	
					}
					else_if = {
						limit = { artifact_type = vigilance }
						ROOT = {
							add_trait = vigilance
						}	
					}
					else_if = {
						limit = { artifact_type = orphan_maker }
						ROOT = {
							add_trait = orphan_maker
						}	
					}
					else_if = {
						limit = { artifact_type = crabspincer }
						ROOT = {
							add_trait = crabspincer
						}	
					}
					else_if = {
						limit = { artifact_type = strangers_mercy }
						ROOT = {
							add_trait = strangers_mercy
						}	
					}
					else_if = {
						limit = { artifact_type = truth }
						ROOT = {
							add_trait = truth
						}	
					}
					else_if = {
						limit = { artifact_type = lamentation }
						ROOT = {
							add_trait = lamentation
						}	
					}
					else_if = {
						limit = { artifact_type = poison }
						ROOT = {
							add_trait = poison
						}	
					}
					# else_if = { #no graphics are actually present
						# limit = { artifact_type = seafoam }
						# ROOT = {
							# add_trait = seafoam
						# }	
					# }
					else_if = {
						limit = { artifact_type = valyrian_armour }
						ROOT = {
							add_trait = valyrian_armour
						}	
					}
					else = {
						ROOT = {
							add_trait = valyrian_steel
						}	
					}	
				}	
				##
				
				ROOT = {
					#add_trait = held_important_artifact
					if = { #Died trying to defend sword from raider, raider seizes it
						limit = {
							is_dying = yes
							has_character_flag = reaving_sword_fight_target
							persistent_event_target:reaving_sword_duel = { 
								has_character_flag = reaving_sword_fight 
								is_alive = yes
								ROOT = { killer = { character = PREVPREV } }
							}
						}
						persistent_event_target:reaving_sword_duel = { 
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }				
							ROOT = { add_trait = dead_target }
						}
					}
					else_if = { #Targaryens give Dark Sister to dynasty head
						limit = { 
							event_target:valyrian_sword_to_inherit = { artifact_type = darksister }
							dynasty = 496
							dynasty_head = {
								NOT = { character = ROOT }
								is_alive = yes
								higher_tier_than = ROOT
							}
						}
						dynasty_head = {
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}
					else_if = { #Daynes give Dawn to dynasty head
						limit = { 
							event_target:valyrian_sword_to_inherit = { artifact_type = dawn }
							dynasty = 16
							dynasty_head = {
								NOT = { character = ROOT }
								is_alive = yes
								higher_tier_than = ROOT
							}
						}
						dynasty_head = {
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							#character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}
					else_if = { #Sword of the morning who somehow changes dynasty
						limit = { 
							event_target:valyrian_sword_to_inherit = { artifact_type = dawn }
							has_character_flag = nick_the_sword_of_the_morning
							NOT = { dynasty = 16 }
						}
						random_character = {
							limit = {
								is_alive = yes
								dynasty = 16
								dynasty_head = { character = PREV }
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							#character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}				
					else_if = { #Corbrays give Lady Forlorn to dynasty head
						limit = { 
							event_target:valyrian_sword_to_inherit = { artifact_type = ladyforlorn }
							dynasty = 176
							dynasty_head = {
								NOT = { character = ROOT }
								is_alive = yes
								higher_tier_than = ROOT
							}
						}
						dynasty_head = {
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}
					else_if = { #golden company always retain blackfyre
						limit = { 
							event_target:valyrian_sword_to_inherit = { artifact_type = blackfyre }
							has_landed_title = d_golden_company							
						}
						current_heir = {
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
						}
						if = {
							limit = { NOT = { current_heir = { always = yes } } }
							c_the_citadel = { 
								holder_scope = { 
									event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
									character_event = { id = invasions.106 days = 1 } 
								} 
							}
						}
						add_trait = dead_target
					}
					else_if = { #sword stolen by blacksmith
						limit = { 
							has_character_flag = black_thief
							NOT = { had_character_flag = { flag = black_thief days = 1095 } }
						}
						random_opinion_modifier_target = {
							limit = {
								has_character_flag = reforge_valyrian_steel
								has_opinion_modifier = { who = ROOT modifier = opinion_stole_sword }
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_resentful_agot }
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							set_character_flag = blacksmith_died
							character_event = { id = 250277 }
							clr_character_flag = reforge_valyrian_steel	
							ROOT = { add_trait = dead_target }
						}			
					}
					if = {
						limit = { 
							is_ruler = yes
							current_heir = { 
								OR = {
									dynasty = ROOT 
									is_child_of = ROOT
								}	
								is_alive = yes  
							}	
							NOT = { trait = dead_target }
						}
						current_heir = {
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
						}
						add_trait = dead_target
					}
					else_if = {
						limit = { 
							is_patrician = yes 
							NOT = { trait = dead_target }
						}
						family_palace = {
							current_heir = { 
								event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
								character_event = { id = 250277 }
								ROOT = { add_trait = dead_target }	
							}					
						}				
					}
					else_if = { #grandchild if dynasty head
						limit = { 
							NOT = { dynasty = 0 }
							NOT = { trait = dead_target }
						}
						dynasty_head = {
							if = {
								limit = { 
									NOT = { character = ROOT }
									is_alive = yes 
									can_inherit_titles_trigger = yes
									grandchild_of_root_trigger = yes
									NAND = {
										is_female = yes
										NOT = { is_married_matrilineally = yes }
									}
								}
								event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
								character_event = { id = 250277 }
								ROOT = { add_trait = dead_target }
							}	
						}	
					}
					if = { 
						limit = { NOT = { trait = dead_target } }
						random_child = {
							limit = { 
								dynasty = ROOT 
								is_alive = yes 
								can_inherit_titles_trigger = yes
								NOT = {
									ROOT = {
										any_child = {
											dynasty = ROOT 
											is_alive = yes 
											NOT = { character = PREVPREV }
											is_older_than = PREVPREV
											NOT = { lower_tier_than = PREVPREV }
											can_inherit_titles_trigger = yes 
										}
									}
								}
							}
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}
					if = { 
						limit = { NOT = { trait = dead_target } }
						random_child = {
							limit = { dynasty = ROOT is_alive = yes }
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}	
					if = { 
						limit = { NOT = { trait = dead_target } }
						random_close_relative = {
							limit = { 
								is_grandchild_of = ROOT
								dynasty = ROOT 
								is_alive = yes 
							}
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}
					if = {
						limit = { NOT = { trait = dead_target } }
						random_sibling = {
							limit = { dynasty = ROOT is_alive = yes }
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}	
					if = {
						limit = { 
							NOT = { trait = dead_target } 
							NOT = { dynasty = 0 } 
						}
						random_dynasty_member = {
							limit = { is_alive = yes }
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}
					}
					if = {
						limit = { NOT = { trait = dead_target } }
						random_child = {
							limit = { is_primary_heir = yes is_alive = yes }
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}
					}
					if = {
						limit = { NOT = { trait = dead_target } }
						random_child = {
							limit = { is_alive = yes NOT = { trait = incapable_dragon } }
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}
					}
					if = { 
						limit = { NOT = { trait = dead_target } }
						random_close_relative = {
							limit = { 
								is_grandchild_of = ROOT
								is_alive = yes 
							}
							preferred_limit = {
								is_ruler = yes
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_female = no
								NOT = { is_married_matrilineally = yes }
							}
							preferred_limit = {
								is_ruler = yes
								is_female = yes
								is_married_matrilineally = yes
							}
							preferred_limit = {
								is_female = yes
								is_married_matrilineally = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}	
					}
					if = {
						limit = { NOT = { trait = dead_target } }
						random_spouse = { 
							limit = { is_alive = yes }
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 } 
						}
						add_trait = dead_target
					}
					else_if = {
						limit = { 
							current_heir = { NOT = { character = ROOT } }
							NOT = { trait = dead_target }
						}
						current_heir = { 
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
						}
						add_trait = dead_target
					}
					else_if = {
						limit = { 
							liege = { NOT = { character = ROOT } }
							NOT = { trait = dead_target }
						}
						liege = { 
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 } 
						}
						add_trait = dead_target
					}			
					if = {
						limit = { 
							NOT = { trait = dead_target }	
						}
						random_vassal = { 
							limit = { 
								NOT = { character = ROOT } 
								NOT = { trait = dragon }
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}
					}
					if = {
						limit = { 
							NOT = { trait = dead_target }	
						}
						random_courtier = { 
							limit = { 
								NOT = { character = ROOT }
								can_press_claims_trigger = yes #no other disinheriting traits
								NOT_mythical_creature_trigger = yes
							}
							event_target:valyrian_sword_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }
							character_event = { id = 250277 }
							ROOT = { add_trait = dead_target }
						}
					}
					remove_trait = dead_target
				}
			}
		}
		#dragons
		if = {
			limit = { trait = dragon }
			any_friend = {
				if = {
					limit = { 
						NOT = { 
							any_friend = {
								trait = dragon
								is_alive = yes
								NOT = { character = ROOT }
							}
						}
					}
					remove_trait = dragon_rider	
					if = { #Check dragon riding dynasty status
						limit = {
							NOT = { dynasty = 0 }
							has_dynasty_flag = dragon_riding_dynasty
							NOT = { any_dynasty_member = { can_use_dragon_abilities_trigger = yes	is_alive = yes } }
						}
						clr_dynasty_flag = dragon_riding_dynasty
					}					
				}
				if = {  #Dany gets another dragon if possible
					limit = { c_77041 = { character = ROOT } } 
					dragon = { 
						limit = { 
							is_alive = yes
							has_character_flag = dany_dragon 
							NOT = { character = ROOT }
							NOT = { any_friend = { is_alive = yes } }
						} 
						add_friend = PREV	
						clr_character_flag = dany_dragon 						
					}
				}	
			}
			persistent_event_target:whip = { unsafe_destroy_artifact = yes }
		}
		if = { #Remove flags from Dany's dragons
			limit = { 
				c_77041 = { character = ROOT }
			}
			any_child = {
				limit = { trait = dragon }
				clr_character_flag = dany_dragon
			}
		}
		if = { 
			limit = { 
				any_friend = { trait = dragon is_alive = yes }
			}
			if = { #Check dragon riding dynasty status
				limit = {
					NOT = { dynasty = 0 }
					has_dynasty_flag = dragon_riding_dynasty
					NOT = { any_dynasty_member = { can_use_dragon_abilities_trigger = yes	is_alive = yes NOT = { character = ROOT } } }
				}
				clr_dynasty_flag = dragon_riding_dynasty
			}
			if = { 
				limit = { is_patrician = yes }
				family_palace = {
					current_heir = { 
						if = {
							limit = { 
								NOT = { any_friend = { trait = dragon is_alive = yes } } 
								age = 14
								is_incapable = no
							}
							ROOT = {
								any_friend = {
									limit = {
										trait = dragon
										is_alive = yes
									}
									add_friend = PREVPREV
								}
								any_artifact = {
									limit = { artifact_type = dragons_whip }
									transfer_artifact = { from = ROOT to = PREVPREV }
								}
							}
							ROOT = { add_trait = dead_target }
						}	
					}
				}				
			}
			if = { 
				limit = { 
					is_ruler = yes
					NOT = { trait = dead_target }
					current_heir = { 
						dynasty = ROOT 
						NOT = { any_friend = { trait = dragon is_alive = yes } }
						is_alive = yes
						age = 14
						is_incapable = no
						OR = {
							is_child_of = ROOT
							mother_even_if_dead = { is_child_of = ROOT }
							father_even_if_dead = { is_child_of = ROOT }
						}
						OR = {
							at_location = ROOT
							same_realm = ROOT
							has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
						}
					}
				}
				current_heir = { 
					ROOT = {
						any_friend = {
							limit = {
								trait = dragon
								is_alive = yes
							}
							add_friend = PREVPREV
						}
						any_artifact = {
							limit = { artifact_type = dragons_whip }
							transfer_artifact = { from = ROOT to = PREVPREV }
						}
					}
				}
				add_trait = dead_target
			}			
			if = {
				limit = { NOT = { trait = dead_target } }
				any_friend = {
					limit = {
						trait = dragon
						is_alive = yes
					}
					character_event = { id = dragon.2399 } #Goes wild
					persistent_event_target:whip = { transfer_artifact = { from = ROOT to = PREV } }
				} 
			}				
			remove_trait = dead_target
		}
		any_artifact = {
			limit = {
				artifact_type = dragon_egg
			}
			save_event_target_as = dragon_egg_to_inherit
			#set_artifact_flag = previous_holder_@ROOT
			#Add trait for history
			if = {
				limit = {
					ROOT = {
						OR = {
							is_alive = no
							is_dying = yes
						}
					}	
				}
				ROOT = { add_trait = dragon_egg }
			}	
			ROOT = {
				#add_trait = held_important_artifact
				if = { 
					limit = { is_patrician = yes }				
					family_palace = {
						current_heir = { 
							event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
							ROOT = { add_trait = dead_target }	
						}
					}					
				}
				if = { 
					limit = { 
						is_ruler = yes
						NOT = { trait = dead_target }
						current_heir = { 
							dynasty = ROOT 
							OR = {
								is_child_of = ROOT
								mother_even_if_dead = { is_child_of = ROOT }
								father_even_if_dead = { is_child_of = ROOT }
							}
							is_alive = yes
						}
					}
					current_heir = { 
						event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
						ROOT = { add_trait = dead_target }	
					}
				}
				if = { #grandchild if dynasty head
					limit = { 
						NOT = { trait = dead_target } 
						NOT = { dynasty = 0 }
					}
					dynasty_head = {
						if = {
							limit = { 
								NOT = { character = ROOT }
								is_alive = yes 
								can_inherit_titles_trigger = yes
								grandchild_of_root_trigger = yes
							}
							event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
							ROOT = { add_trait = dead_target }	
							character_event = { id = dragon.21 }
						}	
					}	
				}
				if = { 
					limit = { 
						NOT = { trait = dead_target }
					}
					random_child = {
						limit = { 
							dynasty = ROOT 
							is_alive = yes 
							can_inherit_titles_trigger = yes
							NOT = {
								ROOT = {
									any_child = {
										dynasty = ROOT 
										is_alive = yes 
										NOT = { character = PREVPREV }
										is_older_than = PREVPREV
										NOT = { lower_tier_than = PREVPREV }
										can_inherit_titles_trigger = yes
									}
								}
							}
						}
						event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
						ROOT = { add_trait = dead_target }	
						character_event = { id = dragon.21 }
					}
					if = { 
						limit = { 
							is_ruler = yes
							NOT = { trait = dead_target	}
							current_heir = { 
								dynasty = ROOT
								is_alive = yes
							}
						}
						current_heir = { 
							event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
							ROOT = { add_trait = dead_target }	
						}
						ROOT = { add_trait = dead_target }
					}
					if = {
						limit = {
							NOT = { trait = dead_target	}
						}
						random_sibling = {
							limit = { 
								dynasty = ROOT
								is_alive = yes
							}
							event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
							ROOT = { add_trait = dead_target }	
							character_event = { id = dragon.21 }
						}
					}	
					if = {
						limit = {
							NOT = { trait = dead_target	}
							NOT = { dynasty = 0 }
						}
						random_dynasty_member = { 
							limit = {
								is_alive = yes
							}
							event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
							ROOT = { add_trait = dead_target }	
							character_event = { id = dragon.21 }
						}
					}	
					if = {
						limit = {
							NOT = { trait = dead_target	}
						}
						random_child = {
							limit = { 
								is_primary_heir = yes 
								is_alive = yes
							}
							event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
							ROOT = { add_trait = dead_target }	
							character_event = { id = dragon.21 }
						}
						if = {
							limit = {
								NOT = { trait = dead_target }
							}
							random_child = { 
								limit = { is_alive = yes NOT = { trait = dragon } }
								event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
								ROOT = { add_trait = dead_target }	
								character_event = { id = dragon.21 }
							}
						}	
						if = {
							limit = {
								NOT = { trait = dead_target }
							}
							random_spouse = { 
								limit = { is_alive = yes }
								event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
								ROOT = { add_trait = dead_target }	
								character_event = { id = dragon.21 } 
							}
						}
						if = {
							limit = {
								NOT = { trait = dead_target }
								liege = { NOT = { character = ROOT } }
							}
							liege = { 
								event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
								ROOT = { add_trait = dead_target }	
								character_event = { id = dragon.21 } 
							}
						}
						if = {
							limit = {
								NOT = { trait = dead_target	}
							}
							random_vassal = { 
								event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
								ROOT = { add_trait = dead_target }	
								character_event = { id = dragon.21 } 
							}
						}
						if = {
							limit = {
								NOT = { trait = dead_target	}
							}
							random_courtier = { 
								limit = { 
									NOT = { character = ROOT }
									can_press_claims_trigger = yes #no other disinheriting traits
									NOT_mythical_creature_trigger = yes
								}
								event_target:dragon_egg_to_inherit = { transfer_artifact = { from = ROOT to = PREV } }					
								ROOT = { add_trait = dead_target }	
								character_event = { id = dragon.21 } 
							}
						}
					}
				}	
				remove_trait = dead_target
			}				
		}
		# if = { 
			# limit = { character = 77041 } #Dany gets her dragons as children back agains on death
			# dragon = { limit = { character = 77990026 } set_mother = ROOT clr_character_flag = dany_dragon }
			# dragon = { limit = { character = 77990027 } set_mother = ROOT clr_character_flag = dany_dragon }
			# dragon = { limit = { character = 77990028 } set_mother = ROOT clr_character_flag = dany_dragon }
		# }		
		#Check for spouse/betrothed disinherited
		if = {
			limit = { 
				spouse = {				
					trait = disinherited
					is_female = yes
					OR = {
						father = { has_character_flag = matri_inheritance_check }
						mother = { has_character_flag = matri_inheritance_check }
						any_sibling = { has_character_flag = matri_inheritance_check }
					}	
					NOT = { 
						any_child = {
							is_alive = yes
							NOT = { dynasty = PREV }
							NOT = { trait = bastard }
						}
					}	
				}	
			}
			spouse = {
				remove_trait = disinherited
				recalc_succession = yes				
			}			
		}	
		if = {
			limit = { 
				betrothed = {				
					trait = disinherited
					is_female = yes
					OR = {
						father = { has_character_flag = matri_inheritance_check }
						mother = { has_character_flag = matri_inheritance_check }
						any_sibling = { has_character_flag = matri_inheritance_check }
					}	
					NOT = { 
						any_child = {
							is_alive = yes
							NOT = { dynasty = PREV }
							NOT = { trait = bastard }
						}
					}	
				}	
			}
			betrothed = {
				remove_trait = disinherited
				recalc_succession = yes				
			}			
		}
		#if = { 
			#limit = { 
				#has_character_flag = primo_on_death 
			#}
			#current_heir = { 
				#set_character_flag = primogeniture
				#character_event = { id = royal_proclamations.15 days = 1 }				
			#}
		#}
		
		
		if = {
			limit = {
				trait = on_reaving
				has_character_flag = reaving_begins 
			}
			any_opinion_modifier_target = {
				limit = {
					trait = on_reaving
					has_opinion_modifier = { who = ROOT modifier = opinion_on_reaving }
				}
				remove_trait = on_reaving
				clr_character_flag = do_not_disturb
				clr_character_flag = reaving_begins_reaver
				clr_character_flag = disputed_lands_raid
				clr_character_flag = north_essos_raid
				clr_character_flag = summer_sea_raid
				clr_character_flag = slavers_bay_raid
				clr_character_flag = reaving_duel
			}	
		}		
		###Blood Feud
		if = {
			limit = { trait = blood_feud }
			random_dynasty_member = {
				limit = {
					is_alive = yes
					blood_feud = {
						is_alive = yes
						has_opinion_modifier = { who = PREV modifier = opinion_blood_feud }
					}
				}
				add_trait = blood_feud
				ROOT = { add_trait = dead_target }
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				clr_dynasty_flag = in_blood_feud
			}			
			remove_trait = blood_feud
			remove_trait = dead_target
		}
		# ##Inherit Base Value Upgrades
		# any_demesne_title = {
			# limit = {
				# tier = BARON
				# holding_type = castle
				# OR = {
					# has_building = ca_upgrade_bv_1
					# has_building = ca_upgrade_bv_2
					# has_building = ca_upgrade_bv_3
					# has_building = ca_upgrade_bv_4
					# has_building = ca_upgrade_bv_5
					# has_building = ca_upgrade_bv_6
				# }
			# }
			# location = { set_province_flag = inherited_upgrade }
		# }
		if = { #Junior
			limit = { 
				has_character_flag = triarch
				is_merchant_republic = no  
			}
			any_liege = {
				limit = { is_merchant_republic = yes }
				job_castellan = {
					if = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							eligible_triarch_trigger = yes
						}	
						character_event = { id = volantis.21 }
						ROOT = { add_trait = dead_target }
					}
				}
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_courtier = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							eligible_triarch_trigger = yes
							is_councillor = yes
							NOT = { has_job_title = job_physician }
							NOT = { has_job_title = job_spiritual }
							NOT = { has_job_title = job_spymaster }
						}
						character_event = { id = volantis.21 }
						ROOT = { add_trait = dead_target }
					}
				}	
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_vassal = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							eligible_triarch_trigger = yes
							OR = {
								is_voter = yes
								is_councillor = yes
							}
						}
						character_event = { id = volantis.21 }
						ROOT = { add_trait = dead_target }
					}
				}	
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_courtier = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							eligible_triarch_trigger = yes
							OR = {
								is_voter = yes
								is_councillor = yes
							}
						}
						character_event = { id = volantis.21 }
						ROOT = { add_trait = dead_target }
					}
				}
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_vassal = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							eligible_triarch_trigger = yes
						}
						character_event = { id = volantis.21 }
						ROOT = { add_trait = dead_target }
					}
				}
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_courtier = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							eligible_triarch_trigger = yes
						}
						character_event = { id = volantis.21 }
						ROOT = { add_trait = dead_target }
					}
				}
			}
			remove_trait = dead_target
		}
		#Special Sansa-Harrold Arryn/Littlefinger betrothal
		if = {
			limit = {
				c_9266059 = { character = ROOT }
			}
			if = {
				limit = { has_character_flag = betrothed_to_harry_the_heir }
				c_94027 = {
					remove_trait = forbid_marriage
				}
			}
			if = {
				limit = { has_character_flag = betrothed_to_littlefinger }
				c_94043 = {
					remove_trait = forbid_marriage
				}
			}
		}
		#Jeor Mormont dies, set jorah as son
		if = {
			limit = {
				c_336 = { character = ROOT }
				c_102 = { always = yes }
			}
			c_102 = {
				set_father = ROOT
			}
		}
		if = { #if great council heir dies restore laws
			limit = {
				OR = {
					has_character_modifier = great_council_heir
					has_character_modifier = nominated_heir
				}	
			}
			random_playable_ruler = {
				limit = {
					current_heir = { character = ROOT }
					has_character_flag = has_great_council_heir
				}	
				character_event = { id = dynasty.38 days = 2 }
				clr_character_flag = has_great_council_heir
			}
		}
		#Funeral check
		if = {
			limit = {
				NOR = { # No funerals for stillbriths or youn children
					trait = stillborn
					NOT = { age = 10 }
					trait = incapable_dragon
					has_character_flag = no_funeral
				}
				OR = {
					AND = { # Ruler
						is_ruler = yes
						NOT = { dynasty = 0 }
						current_heir = { dynasty = ROOT } 
						OR = {
							ai = no # Player can do funerals whenever they want
							AND = { # Ai requirements
								ai = yes
								wealth = 100
								OR = { # Good character
									prestige = 3000
									piety = 3000
									can_use_dragon_abilities_trigger = yes
									trait = chosen_by_rhllor
									trait = dragon_slayer
									trait = master_warrior
									tier = EMPEROR
									# High stats
									diplomacy = 18
									martial = 18
									stewardship = 18
									intrigue = 18
									learning = 18
									current_heir = { opinion = { who = ROOT value = 75 } } #Friends
								}
							}
						}
					}
					AND = { # Non-ruler
						is_ruler = no
						liege = { 
							OR = {
								is_married = ROOT
								AND = {
									dynasty = ROOT 
									NOT = { dynasty = 0 }
								}	
								is_friend = ROOT
							}	
						}
						OR = {
							liege = { ai = no }
							AND = {
								liege = {
									ai = yes
									wealth = 100
								}
								OR = { # Good character
									prestige = 3000
									piety = 3000
									can_use_dragon_abilities_trigger = yes
									trait = chosen_by_rhllor
									trait = dragon_slayer
									trait = master_warrior
									tier = EMPEROR
									# High stats
									diplomacy = 18
									martial = 18
									stewardship = 18
									intrigue = 18
									learning = 18
									liege = { opinion = { who = ROOT value = 75 } } #Friends
								}
							}
						}
					}
				}
			}
			if = {
				limit = { is_ruler = yes }
				current_heir = { 
					set_character_flag = funeral_for_ruler
					character_event = { id = funeral.1 days = 1 } 
				}
			}
			if = {
				limit = { is_ruler = no }
				liege = {
					set_character_flag = funeral_for_courtier
					character_event = { id = funeral.1 }
				}
			}
		}
		if = {
			limit = { has_artifact = gift_zorse }
			destroy_artifact = gift_zorse
		}
		if = { #check for pregnant consorts
			limit = { 
				OR = {
					is_consort = yes 
					is_senior_consort_party = yes
				}
				is_female = no
			}
			any_consort = {
				limit = {
					is_pregnant = yes
					OR = {
						father_of_unborn = { character = ROOT }
						NOT = { has_character_flag = flag_no_cuckoo }		
					}					
				}
				set_character_flag = unborn_child_is_consorts
			}
		}
		###Debt Inheritance
		if = {
			limit = { 				
				is_ruler = no			
				OR = {
					has_character_flag = given_personal_loan
					check_variable = { which = loan_amount value = 1 }
				}	
			}
			random_child = {
				limit = {
					is_female = no
					is_alive = yes	
					can_press_claims_trigger = yes
					NOT = {
						any_sibling = {
							is_older_than = PREV
							is_female = no
							is_alive = yes
							can_press_claims_trigger = yes					
						}
					}
				}
				save_event_target_as = debt_inheritor
			}
			if = {
				limit = { NOT = { event_target:debt_inheritor = { always = yes } } }
				random_child = {
					limit = {
						is_alive = yes	
						can_press_claims_trigger = yes
					}
					save_event_target_as = debt_inheritor
				}
				if = {
					limit = { NOT = { event_target:debt_inheritor = { always = yes } } }
					random_child_even_if_dead = {
						limit = {
							any_child = {
								is_alive = yes	
								can_press_claims_trigger = yes
							}	
						}
						random_child = {
							limit = {
								is_alive = yes	
								can_press_claims_trigger = yes
							}
							save_event_target_as = debt_inheritor
						}
					}
					if = {
						limit = { NOT = { event_target:debt_inheritor = { always = yes } } }
						random_spouse = {
							limit = {
								is_alive = yes	
								can_press_claims_trigger = yes
							}
							save_event_target_as = debt_inheritor
						}
						if = {
							limit = { NOT = { event_target:debt_inheritor = { always = yes } } }
							random_sibling = {
								limit = {
									is_alive = yes	
									can_press_claims_trigger = yes
								}
								save_event_target_as = debt_inheritor
							}
							if = {
								limit = { NOT = { event_target:debt_inheritor = { always = yes } } }
								random_dynasty_member = {
									limit = {
										is_alive = yes	
										is_close_relative = ROOT
										NOT = { character = ROOT }
										can_press_claims_trigger = yes
									}
									save_event_target_as = debt_inheritor
								}
								if = {
									limit = { NOT = { event_target:debt_inheritor = { always = yes } } }
									liege = {
										save_event_target_as = debt_inheritor
									}
								}
							}
						}
					}
				}
			}
			inherit_debt_effect = yes
		}
		##Bank shares inheritance
		if = {
			limit = {
				is_in_society = yes
				society = { has_flag = bank_society }
				check_variable = { which = shares value = 1 }
				is_ruler = no
			}
			society = { save_event_target_as = bank_society }
			character_event = { id = bankruptcy.36 }
		}
		#Bank recover debt quest
		if = {
			limit = {
				is_in_society = yes
				has_quest = quest_bank_recover_debt
			}
			quest_target = { #start again
				character_event = { id = bankruptcy.45 days = 5 }
			}
		}
		#Check traditional dynastic claims for relatives
		any_owned_bloodline = {
			limit = {
				has_bloodline_flag = dynastic_bloodline
			}
			any_bloodline_member = {
				limit = {
					OR = {
						sibling = ROOT
						is_child_of = ROOT
						is_grandchild_of = ROOT
					}
				}
				character_event = { id = traditional_claims.199 days = 1 }
			}
		}
		#Destroy all maester links
		any_artifact = {
			limit = { has_artifact_flag = maester_link }
			unsafe_destroy_artifact = yes
		}
		#Destroy all crystal swords
		if = {
			limit = { trait = white_walker }
			any_artifact = {
				limit = { has_artifact_flag = crystal_sword }
				unsafe_destroy_artifact = yes
			}
		}	
		#Return citadel glass candles
		if = {
			limit = { has_character_flag = given_citadel_glass_candle }
			c_the_citadel = {
				holder_scope = {
					save_event_target_as = citadel_holder
				}
			}		
			any_artifact = {
				limit = { 
					artifact_type = glass_candle
					has_artifact_flag = citadel_owned
				}
				transfer_artifact = { from = ROOT to = event_target:citadel_holder }
			}
			clr_character_flag = given_citadel_glass_candle
		}
		#Poisoned in duel, inform poisoner if found out
		if = {
			limit = { 
				has_character_flag = poisoned_in_duel 
				persistent_event_target:poisoner = { is_alive = yes }
				OR = {
					is_alive = no
					is_dying = yes
				}
			}
			persistent_event_target:poisoner = { character_event = { id = duel.210 days = 2 } }
		}
	}

	option = {
		name = "EVTOPTA45340"
	}
}
###AGOT on death/abdication event### #RULER ONLY ACTIONS
character_event = { 
	id = 45341
	desc = "EVTDESC45340"
	picture = "GFX_evt_death"
	
	is_triggered_only = yes 
	only_rulers = yes

	hide_window = yes
	
	immediate = {
		if = {
			limit = { demesne_size = 1 }
			add_trait = high_valyrian #to stop their realm turning into a ruin
		}
		if = {
			limit = {
				diplomatic_immunity = yes
				leads_faction = yes
			}
			any_faction_backer = {
				limit = {
					diplomatic_immunity = yes
				}
				diplomatic_immunity = no
			}
		}
		if = {
			limit = { ai = no }
			clr_global_flag = maintenance_pulse
		}	
		#tyrant
		if = {
			limit = {
				#ai = no
				check_variable = { which = "tyrant" value = 9.9 }				
			}	
			multiply_variable = { which = tyrant value = 0.5 } #50% of tyranny is inherited
			current_heir = { 
				if = {
					limit = {
						OR = {								
							is_child_of = ROOT
							AND = { #Non-child heirs do not inherit if they've already inherited tyranny
								dynasty = ROOT
								NOT = { trait = tyrannical_stain }
							}
						}
						NOT = { higher_tier_than = ROOT }
					}
					set_character_flag = tyranny_heir
					change_variable = { which = "tyrant" which = ROOT }
					if = { #add to existing tyranny
						limit = {
							OR = {
								trait = tyrant1
								trait = tyrant2
								trait = tyrant3
								trait = tyrant4
								trait = tyrant5
								trait = tyrant6
								trait = tyrant7
								trait = tyrant8
								trait = tyrant9
								trait = tyrant10
								trait = tyrant11
								trait = tyrant12
								trait = tyrant13
								trait = tyrant14
								trait = tyrant15
								trait = tyrant16
								trait = tyrant17
								trait = tyrant18
								trait = tyrant19
								trait = tyrant20
							}
						}
						remove_trait = tyrant1
						remove_trait = tyrant2
						remove_trait = tyrant3
						remove_trait = tyrant4
						remove_trait = tyrant5
						remove_trait = tyrant6
						remove_trait = tyrant7
						remove_trait = tyrant8
						remove_trait = tyrant9
						remove_trait = tyrant10
						remove_trait = tyrant11
						remove_trait = tyrant12
						remove_trait = tyrant13
						remove_trait = tyrant14
						remove_trait = tyrant15
						remove_trait = tyrant16
						remove_trait = tyrant17
						remove_trait = tyrant18
						remove_trait = tyrant19
						remove_trait = tyrant20
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 4.9 }
								NOT = { check_variable = { which = "tyrant" value = 9.9 } }
							}
							add_trait = tyrant1		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 9.9 }
								NOT = { check_variable = { which = "tyrant" value = 14.9 } }
							}
							add_trait = tyrant2		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 14.9 }
								NOT = { check_variable = { which = "tyrant" value = 19.9 } }
							}
							add_trait = tyrant3		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 19.9 }
								NOT = { check_variable = { which = "tyrant" value = 24.9 } }
							}
							add_trait = tyrant4		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 24.9 }
								NOT = { check_variable = { which = "tyrant" value = 29.9 } }
							}
							add_trait = tyrant5		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 29.9 }
								NOT = { check_variable = { which = "tyrant" value = 34.9 } }
							}
							add_trait = tyrant6	
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 34.9 }
								NOT = { check_variable = { which = "tyrant" value = 39.9 } }
							}
							add_trait = tyrant7		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 39.9 }
								NOT = { check_variable = { which = "tyrant" value = 44.9 } }
							}
							add_trait = tyrant8		
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 44.9 }
								NOT = { check_variable = { which = "tyrant" value = 49.9 } }
							}
							add_trait = tyrant9
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 49.9 }
								NOT = { check_variable = { which = "tyrant" value = 54.9 } }
							}
							add_trait = tyrant10
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 54.9 }
								NOT = { check_variable = { which = "tyrant" value = 59.9 } }
							}
							add_trait = tyrant11
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 59.9 }
								NOT = { check_variable = { which = "tyrant" value = 64.9 } }
							}
							add_trait = tyrant12
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 64.9 }
								NOT = { check_variable = { which = "tyrant" value = 69.9 } }
							}
							add_trait = tyrant13
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 69.9 }
								NOT = { check_variable = { which = "tyrant" value = 74.9 } }
							}
							add_trait = tyrant14
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 74.9 }
								NOT = { check_variable = { which = "tyrant" value = 79.9 } }
							}
							add_trait = tyrant15
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 79.9 }
								NOT = { check_variable = { which = "tyrant" value = 84.9 } }
							}
							add_trait = tyrant16
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 84.9 }
								NOT = { check_variable = { which = "tyrant" value = 89.9 } }
							}
							add_trait = tyrant17
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 89.9 }
								NOT = { check_variable = { which = "tyrant" value = 94.9 } }
							}
							add_trait = tyrant18
						}
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 94.9 }
								NOT = { check_variable = { which = "tyrant" value = 99.9 } }
							}
							add_trait = tyrant19
						}						
						if = {
							limit = {
								check_variable = { which = "tyrant" value = 99.9 }
							}
							add_trait = tyrant20	
							set_variable = { which = "tyrant" value = 100 }	#MAX
						}
						set_character_flag = tyrant_inherited
					}
					if = { #If no existing tyranny, add stain trait
						limit = { NOT = { has_character_flag = tyrant_inherited } }
						add_trait = tyrannical_stain
					}
					clr_character_flag = tyrant_inherited
					if = {
						limit = { NOT = { has_character_flag = tyranny_decay_check } }
						set_character_flag = tyranny_decay_check
						character_event = { id = maintenance.2 days = 1825 } #Tyranny decays every 5 years
					}
				}	
			}
			any_child = { 
				limit = { 
					is_alive = yes 
					NOT = { has_character_flag = tyranny_heir } 
					NOT = { higher_tier_than = ROOT }
				} 
				change_variable = { which = "tyrant" which = ROOT }
				if = { #add to existing tyranny
					limit = {
						OR = {
							trait = tyrant1
							trait = tyrant2
							trait = tyrant3
							trait = tyrant4
							trait = tyrant5
							trait = tyrant6
							trait = tyrant7
							trait = tyrant8
							trait = tyrant9
							trait = tyrant10
							trait = tyrant11
							trait = tyrant12
							trait = tyrant13
							trait = tyrant14
							trait = tyrant15
							trait = tyrant16
							trait = tyrant17
							trait = tyrant18
							trait = tyrant19
							trait = tyrant20
						}
					}
					remove_trait = tyrant1
					remove_trait = tyrant2
					remove_trait = tyrant3
					remove_trait = tyrant4
					remove_trait = tyrant5
					remove_trait = tyrant6
					remove_trait = tyrant7
					remove_trait = tyrant8
					remove_trait = tyrant9
					remove_trait = tyrant10
					remove_trait = tyrant11
					remove_trait = tyrant12
					remove_trait = tyrant13
					remove_trait = tyrant14
					remove_trait = tyrant15
					remove_trait = tyrant16
					remove_trait = tyrant17
					remove_trait = tyrant18
					remove_trait = tyrant19
					remove_trait = tyrant20
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 4.9 }
							NOT = { check_variable = { which = "tyrant" value = 9.9 } }
						}
						add_trait = tyrant1		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 9.9 }
							NOT = { check_variable = { which = "tyrant" value = 14.9 } }
						}
						add_trait = tyrant2		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 14.9 }
							NOT = { check_variable = { which = "tyrant" value = 19.9 } }
						}
						add_trait = tyrant3		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 19.9 }
							NOT = { check_variable = { which = "tyrant" value = 24.9 } }
						}
						add_trait = tyrant4		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 24.9 }
							NOT = { check_variable = { which = "tyrant" value = 29.9 } }
						}
						add_trait = tyrant5		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 29.9 }
							NOT = { check_variable = { which = "tyrant" value = 34.9 } }
						}
						add_trait = tyrant6	
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 34.9 }
							NOT = { check_variable = { which = "tyrant" value = 39.9 } }
						}
						add_trait = tyrant7		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 39.9 }
							NOT = { check_variable = { which = "tyrant" value = 44.9 } }
						}
						add_trait = tyrant8		
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 44.9 }
							NOT = { check_variable = { which = "tyrant" value = 49.9 } }
						}
						add_trait = tyrant9
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 49.9 }
							NOT = { check_variable = { which = "tyrant" value = 54.9 } }
						}
						add_trait = tyrant10
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 54.9 }
							NOT = { check_variable = { which = "tyrant" value = 59.9 } }
						}
						add_trait = tyrant11
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 59.9 }
							NOT = { check_variable = { which = "tyrant" value = 64.9 } }
						}
						add_trait = tyrant12
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 64.9 }
							NOT = { check_variable = { which = "tyrant" value = 69.9 } }
						}
						add_trait = tyrant13
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 69.9 }
							NOT = { check_variable = { which = "tyrant" value = 74.9 } }
						}
						add_trait = tyrant14
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 74.9 }
							NOT = { check_variable = { which = "tyrant" value = 79.9 } }
						}
						add_trait = tyrant15
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 79.9 }
							NOT = { check_variable = { which = "tyrant" value = 84.9 } }
						}
						add_trait = tyrant16
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 84.9 }
							NOT = { check_variable = { which = "tyrant" value = 89.9 } }
						}
						add_trait = tyrant17
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 89.9 }
							NOT = { check_variable = { which = "tyrant" value = 94.9 } }
						}
						add_trait = tyrant18
					}
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 94.9 }
							NOT = { check_variable = { which = "tyrant" value = 99.9 } }
						}
						add_trait = tyrant19
					}						
					if = {
						limit = {
							check_variable = { which = "tyrant" value = 99.9 }
						}
						add_trait = tyrant20	
						set_variable = { which = "tyrant" value = 100 }	#MAX
					}
					set_character_flag = tyrant_inherited
				}
				if = { #If no existing tyranny, add stain trait
					limit = { NOT = { has_character_flag = tyrant_inherited } }
					add_trait = tyrannical_stain
				}
				clr_character_flag = tyrant_inherited
				if = {
					limit = { NOT = { has_character_flag = tyranny_decay_check } }
					set_character_flag = tyranny_decay_check
					character_event = { id = maintenance.2 days = 1825 } #Tyranny decays every 5 years
				}
			}				
			current_heir = { clr_character_flag = tyranny_heir }					
		}
		###Septon Investiture inheritance fix
		if = {
			limit = {
				is_theocracy = yes
				primary_title = { has_law = succ_catholic_bishopric }
			}
			if = {
				limit = { 
					current_heir = {
						OR = {
							trait = maester 
							trait = archmaester 
							trait = kingsguard
							trait = incapable_dragon
							trait = slave
							trait = horse
						}	
					}
				}
				primary_title = { 
					succession = open_elective
				}
				recalc_succession = yes
			}
			current_heir = {
				character_event = { id = religious.1 days = 1 } #priest trait
			}	
		}
		
		###Secondary Kingdom heir fixes
		#If in war against vassal in secondary kingdom, end wars if heir is different
		any_demesne_title = {
			limit = {
				tier = ROOT
				higher_tier_than = DUKE
				is_primary_holder_title = no
				current_heir = { 
					ROOT = { current_heir = { NOT = { character = PREVPREV } } }
				}
			}
			any_playable_ruler = {
				limit = {
					liege_before_war = { character = ROOT }
					lower_tier_than = ROOT
					capital_scope = {
						OR = {
							kingdom = { title = PREVPREVPREV }
							empire = { title = PREVPREVPREV }
						}
					}
				}
				set_defacto_liege = THIS
				set_defacto_liege = ROOT
				any_war = {
					limit = {
						attacker = { character = PREVPREV }
						defender = { character = ROOT }
					}
					end_war = invalid
				}
				any_demesne_title = {
					limit = { 
						OR = {
							tier = COUNT
							tier = DUKE
						}
					}				
					set_variable = { which = "de_facto_kingdom" value = 0 }
				}
				any_demesne_title = {
					limit = { 
						NOT = { tier = BARON }
						NOT = { tier = EMPEROR }
					}				
					set_variable = { which = "de_facto_empire" value = 0 }
				}
			}			
		}
		#make sure secondary heir gets correct inheritance
		any_demesne_title = {
			limit = {
				tier = KING
				is_primary_holder_title = no
				current_heir = { 
					NOT = { demesne_size = 1 } 
					ROOT = { current_heir = { NOT = { character = PREVPREV } } }
				}
			}
			if = {
				limit = { ROOT = { NOT = { num_of_count_titles = 2 } } }
				current_heir = { PREV = { grant_kingdom_w_adjudication = PREV } }
			}			
			if = {
				limit = { ROOT = { num_of_count_titles = 2 } }
				ROOT = {
					random_demesne_title = {
						limit = { 
							tier = COUNT
							ROOT = { de_jure_vassal_or_below = PREV }
						}
						location = { set_province_flag = kingdom_capital }
						ROOT = { add_trait = dead_target }
					}
					if = {
						limit = { NOT = { trait = dead_target  } }
						random_demesne_title = {
							limit = { 
								tier = COUNT
								location = { is_capital = no }
							}
							location = { set_province_flag = kingdom_capital }
						}
					}
					remove_trait = dead_target
				}
				current_heir = {
					ROOT = {
						random_demesne_title = {
							limit = {
								tier = COUNT
								location = { has_province_flag = kingdom_capital }
							}
							gain_title = PREVPREV
							location = { clr_province_flag = kingdom_capital }
						}
					}
				}
			}				
		}
		
		###Feudal Elective Fixes	
		# #Make sure heirs to sub elective titles get correct titles
		# any_demesne_title = {
			# limit = {
				# has_law = succ_feudal_elective
				# lower_tier_than = ROOT
				# higher_tier_than = COUNT
				# current_heir = { 
					# dynasty = ROOT 
					# OR = {
						# NOT = { demesne_size = 1 }
						# NOT = { num_of_count_titles = 1 }
					# }
				# }
			# }
			# current_heir = {
				# ROOT = {
					# any_demesne_title = {
						# limit = { 
							# de_jure_liege_or_above = PREVPREVPREV 
							# location = { is_capital = no }
						# }
						# gain_title = PREVPREV
					# }
				# }
			# }	
		# }
		###Mega War Flags
		if = {
			limit = {
				OR = {
					has_character_flag = supporting_king
					has_character_flag = neutral
					has_character_flag = against_king
				}
				civil_war = {
					tier = EMPEROR
					is_alive = yes
					war = yes
					OR = {
						war_with = ROOT
						is_vassal_or_below = ROOT
						any_demesne_title = {	
							tier = EMPEROR
							ROOT = {
								primary_title = {
									is_variable_equal = { which = "de_facto_empire" which = PREVPREV }
								}
							}
						}
					}
				}								
			}
			if = {
				limit = { #heir only inherits stance if...
					NOT = {
						current_heir = {
							NOT = { trait = rebel_leader }
							NOT = { tier = EMPEROR }
							OR = {
								lower_tier_than = ROOT
								NOR = {
									has_character_flag = supporting_king
									has_character_flag = neutral
									has_character_flag = against_king 
								}
							}
						}
					}	
				}
				#if not inherit stance, clear stance flags from vassals so they can redecide
				any_vassal = {
					clr_character_flag = supporting_king
					clr_character_flag = neutral
					clr_character_flag = against_king 
				}
				add_trait = dead_target
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				if = { 	
					limit = { has_character_flag = supporting_king } 
					current_heir = {
						set_character_flag = inherit_war	
						character_event = { id = mega_wars.23 days = 1 }	
						set_character_flag = supporting_king					
					}
					clr_character_flag = supporting_king
				}
				if = { 	
					limit = { has_character_flag = neutral  } 
					current_heir = {
						set_character_flag = neutral 
						character_event = { id = mega_wars.21 days = 5 }	#AI vassal yearly pulse				
					}
					clr_character_flag = neutral
				}
				
				if = { 	
					limit = { has_character_flag = against_king } 
					current_heir = {
						rebel_leader = {
							limit = {
								is_ruler = yes
								is_alive = yes
								reverse_has_opinion_modifier = {
									who = ROOT
									modifier = opinion_with_rebel_leader
								}
							}
							save_event_target_as = inherited_rebel_leader
							reverse_opinion = {
								who = PREV
								modifier = opinion_deciding_rebel_leader
								years = 1
							}
						}
						set_character_flag = inherit_war	
						character_event = { id = mega_wars.23 days = 1 }	
						set_character_flag = against_king 
					}
					clr_character_flag = against_king
				}
				if = { 	
					limit = { has_character_flag = against_loyal_liege } 
					current_heir = {
						set_character_flag = against_loyal_liege
					}
					clr_character_flag = against_loyal_liege
				}
				if = { 	
					limit = { has_character_flag = against_rebel_liege } 
					current_heir = {
						set_character_flag = against_rebel_liege
					}
					clr_character_flag = against_rebel_liege
				}
			}	
			remove_trait = dead_target
		}	
		if = {	
			limit = { trait = civil_war } 
			if = { 	
				limit = { tier = EMPEROR } 
				current_heir = {
					add_trait = civil_war  
					any_playable_ruler = {
						limit = {
							has_opinion_modifier = {
								who = ROOT
								modifier = opinion_with_king
							}
						}
						opinion = {
							who = PREV
							modifier = opinion_with_king
							years = 100
						}
					}
				}
				# Opinion passed on so council can be restored
				current_heir = { 
					ROOT = {
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_castellan }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_castellan }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_castellan }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_chancellor }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_chancellor }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_chancellor }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_marshal }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_marshal }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_marshal }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_treasurer }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_treasurer }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_treasurer }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_spymaster }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_spymaster }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_spymaster }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_learned }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_learned }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_learned }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_priest }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_priest }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_priest }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_ships }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_ships }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_ships }
						}
						random_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_admiral }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_admiral }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_admiral }
						}
						any_opinion_modifier_target = {
							limit = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_pre_mega_war_advisor }
							}
							reverse_remove_opinion  = { who = ROOT modifier = opinion_pre_mega_war_advisor }
							reverse_opinion  = { who = PREVPREV modifier = opinion_pre_mega_war_advisor }
						}
					}
				}
				any_independent_ruler = { #maintain defacto vassal links
					limit = {
						has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
					}
					character_event = { id = mega_wars.42 days = 1 }
				}
			}
			remove_trait = civil_war 
		}
		if = { 	
			limit = { 
				war = yes
				any_current_enemy = { tier = EMPEROR }
			} 
			if = { 	
				limit = { has_character_flag = rebel_leader } 
				current_heir = { set_character_flag = rebel_leader }
				clr_character_flag = rebel_leader
			}
			if = { 	
				limit = { trait = rebel_leader } 
				current_heir = {
					add_trait = rebel_leader
					any_playable_ruler = {
						limit = {
							has_opinion_modifier = {
								who = ROOT
								modifier = opinion_with_rebel_leader
							}
						}
						opinion = {
							who = PREV
							modifier = opinion_with_rebel_leader
							years = 100
						}
					}
				}		
				remove_trait = rebel_leader
			}
		}
		if = { 	
			limit = { has_character_flag = independant } 
			current_heir = {
				set_character_flag = independant
			}
			clr_character_flag = independant
		}
		if = { 	
			limit = { has_character_flag = post_civil_war_wars } 
			current_heir = {
				set_character_flag = post_civil_war_wars
			}
			clr_character_flag = post_civil_war_wars
		}
		if = { 	
			limit = { has_character_flag = joined_independance_war } 
			current_heir = {
				set_character_flag = joined_independance_war
			}
			clr_character_flag = joined_independance_war
		}
		#De facto mega war liege opinion link
		if = { 	
			limit = { tier = KING } 
			any_independent_ruler = { #maintain defacto vassal links
				limit = {
					has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
				}
				character_event = { id = mega_wars.42 days = 1 }
			}
		}
		current_heir = { 
			character_event = { id = mega_wars.42 days = 2 }	
		}
		#Clash of Kings
		if = { 
			limit = { has_character_flag = promised_iron_crown }
			current_heir = { set_character_flag = promised_iron_crown }
			clr_character_flag = promised_iron_crown
		}
		if = { 
			limit = { 
				OR = {
					c_5317  = { character = ROOT } #Renly
					c_4317  = { character = ROOT } #Stannis
				}	
				e_iron_throne = { holder_scope = { trait = civil_war } }
				any_sibling = { 
					OR = {
						character = 5317 #Renly
						character = 4317 #Stannis
					}
				}
				NOT = { has_character_flag = abdication } #does not apply to abdications
			} 
			random_sibling = { 
				limit = { 
					OR = {
						character = 4317 #Stannis 
						character = 5317 #Renly
					}
					NOT = { character = ROOT }		
					is_alive = yes
				}
				character_event = { id = clash_of_kings.6 days = 1 }
			}	
		}
		#Tourney
		if = { 
			limit = { has_character_flag = tourny_in_progress } 
			any_opinion_modifier_target = {
				limit = {
					has_character_flag = attending_tournament
					has_opinion_modifier = { who = ROOT modifier = opinion_attending_tournament }
				}
				character_event = { id = 70037 }
			}
		}
		if = { #reset harry the heir's dynasty
			limit = { 
				father_even_if_dead = { character = 94002 } #Jon Arryn
				OR = {
					has_landed_title = k_vale
					has_landed_title = e_vale
				}	
				current_heir = { NOT = { character = 94027 } }	 #harry the heir
				current_heir = { NOT = { father_even_if_dead = { character = 94002 } } }		
			}
			random_dynasty_member = {
				limit = { character = 94018 } #harry the heir's mother
				dynasty=182
			}
			random_dynasty_member = {
				limit = { character = 94027 }
				dynasty = 184
				k_vale = { add_weak_pressed_claim = PREV }
				c_the_eyrie = { add_weak_pressed_claim = PREV }
				father_even_if_dead = {
					spouse_even_if_dead = {
						if = {
							limit = { dynasty = ROOT }
							dynasty=182
						}
					}
				}
			}
		}
		#Night's Watch election
		if = { #now uses sepcial succession law
			limit = { 
				primary_title = { title = d_nightswatch }
				trait = nightswatch					
			}
			#set_global_flag = new_NW_LC_needed
			#d_nightswatch_dummy = { copy_title_history = d_nightswatch }
			if = { #if landless, check the watch can continue
				limit = { NOT = { demesne_size = 1 } }
				c_the_citadel = { holder_scope = { character_event = { id = nightswatch.110 days = 3 } } }
			}
			primary_title = { current_heir = { save_event_target_as = NW_heir } }
			if = { #If titles will be split, make sure they aren't
				limit = { 
					OR = {
						ai = no
						any_demesne_title = { NOT = { current_heir = { character = event_target:NW_heir } } } 
					}	
				}
				e_rebels = {
					holder_scope = {
						event_target:NW_heir = {
							if = {
								limit = { is_ruler = yes } 
								if = {
									limit = { ai = no }
									set_player_character = ROOT
								}
								abdicate_to = ROOT
							}
							if = {
								limit = { NOT = { liege = { character = ROOT } } }
								move_character = ROOT
							}	
							ROOT = {
								any_demesne_title = { succession = open_elective }
								any_courtier = { #temporarily move everyone else out
									limit = {
										liege = { character = ROOT }
										is_ruler = no
										NOT = { character = event_target:NW_heir } 
									}
									move_character = PREVPREVPREV
									character_event = { id = nightswatch.2902 days = 1 }
								}
								recalc_succession = yes
								#Check if it worked
								if = {
									limit = { current_heir = { character = event_target:NW_heir } }
									#OK!
								}	
								else = {
									any_demesne_title = { succession = open_elective }
									any_demesne_title = {
										add_law = {
											law = succ_open_elective
											cooldown = no
											opinion_effect = no
										}		
									}
									d_nightswatch = {
										add_law = {
											law = nightswatch_elective
											cooldown = no
											opinion_effect = no
										}	
									}	
									recalc_succession = yes
									set_player_character = event_target:NW_heir
									transfer_scaled_wealth = { to = event_target:NW_heir value = all }
									abdicate_to = event_target:NW_heir						
								}
							}				
						}
					}
				}	
			}	
			event_target:NW_heir = { character_event = { id = nightswatch.29 days = 1 } }
			# if = {
				# limit = { ai = no }
				# current_heir = {
					# clear_wealth = THIS
					# character_event = { id = nightswatch.2900 days = 2 }
				# }
				# if = {
					# limit = { current_heir = { always = no } }
					# job_castellan = {
						# clear_wealth = THIS
						# ROOT = { abdicate_to = PREV }
						# character_event = { id = nightswatch.2900 days = 2 }
					# }
					# if = {
						# limit = { job_castellan = { always = no } }
						# random_courtier = {
							# limit = { 
								# OR = {
									# is_voter = yes
									# is_councillor = yes
								# }
								# trait = nightswatch
							# }
							# clear_wealth = THIS							
							# ROOT = { abdicate_to = PREV }
							# character_event = { id = nightswatch.2900 days = 2 }
						# }
					# }	
				# }
			# }	
		}
		###Kingsmoot
		if = {
			limit = { 
				any_demesne_title = { 
					has_law = succ_kingsmoot_elective
					OR = { 
						tier = ROOT
						holder_scope = { primary_title = { title = PREVPREV } }
					}
				}	
			}		
			any_demesne_title = { 
				limit = {
					has_law = succ_kingsmoot_elective
					OR = { 
						tier = ROOT
						holder_scope = { primary_title = { title = PREVPREV } }
					}
					current_heir = { NOT = { has_character_flag = kingsmoot } }
				}	
				save_event_target_as = kingsmoot_title
				any_pretender = {
					add_character_modifier = { name = kingsmoot_pretender duration = 3 hidden = yes } #so special loc can be shown
				}
				current_heir = { 
					set_character_flag = kingsmoot
					save_event_target_as = kingsmoot_heir
					if = { #If not a ruler and not same dynasty grant random county
						limit = { 
							NOT = { dynasty = ROOT } 
							NOT = { higher_tier_than = BARON }
						}
						if = {
							limit = { ROOT = { num_of_count_titles = 2 } }
							ROOT = {
								random_demesne_title = {
									limit = { 
										tier = COUNT
										NOT = { location = { is_capital = yes }	}
									}	
									usurp_title = event_target:kingsmoot_heir
									add_law = succ_primogeniture
								}
							}	
						}
						if = {
							limit = {
								event_target:kingsmoot_heir = { NOT = { num_of_count_titles = 1 } }
								event_target:kingsmoot_title = { title = e_iron_isles }
								c_old_wyk = {
									holder_scope = {
										ai = yes
										OR = {
											character = ROOT
											is_liege_or_above = ROOT
										}
									}
								}
							}
							c_old_wyk = {
								holder_scope = {
									b_naggas_hill = { 
										usurp_title = PREV
										province_capital = yes
									}
									PREV = { usurp_title = event_target:kingsmoot_heir }
									b_drumm_tower = { gain_title = PREV }
								}
								succession = primogeniture							
							}				
						}
						if = {
							limit = { event_target:kingsmoot_heir = { NOT = { num_of_count_titles = 1 } } }
							random_realm_lord = {
								limit = { num_of_count_titles = 2 }
								random_demesne_title = {
									limit = { 
										tier = COUNT
										NOT = { location = { is_capital = yes }	}
									}	
									usurp_title = event_target:kingsmoot_heir
									add_law = succ_primogeniture
								}
							}						
						}
						if = {
							limit = { event_target:kingsmoot_heir = { NOT = { num_of_count_titles = 1 } } }
							random_realm_lord = {
								limit = { tier = COUNT ai = yes }
								random_demesne_title = {
									limit = { tier = COUNT }	
									usurp_title = event_target:kingsmoot_heir
									add_law = succ_primogeniture
								}
							}						
						}
						recalc_succession = yes
					}
					character_event = { id = kingsmoot.19 days = 1 } 
				}
			}		
		}
		###Prince of Pentos
		if = {
			limit = { 
				has_landed_title = d_prince_pentos
				is_feudal = yes
				NOT = { higher_tier_than = DUKE }
				is_patrician = no
				OR = {
					liege = {
						is_republic = yes
						has_landed_title = k_pentos
					}
					liege_before_war = {
						is_republic = yes
						has_landed_title = k_pentos
					}
				}
			}			
			liege = {
				random_realm_character = {
					limit = {
						is_female = no
						age = 14
						NOT = { age = 40 }
						is_ruler = no
						is_primary_heir = no
						is_incapable = no
						can_press_claims_trigger = yes
						liege = {
							dynasty = PREV
							OR = {
								is_patrician = yes
								has_landed_title = k_pentos
								AND = {
									NOT = { tier = BARON }
									OR = {					
										capital_scope = { region = world_pentos }
										culture = pentosi
									}
								}	
							}						
						}
					}
					move_character = ROOT
					set_character_flag = prince_heir
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				liege = {
					random_realm_character = {
						limit = {
							is_female = no
							age = 14
							NOT = { age = 40 }
							is_ruler = no
							is_primary_heir = no
							is_incapable = no
							can_press_claims_trigger = yes
						}
						move_character = ROOT
						set_character_flag = prince_heir
						ROOT = { add_trait = dead_target }
					}
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				liege = {
					create_character = {
						random_traits = yes
						dynasty = none
						religion = ROOT
						culture = ROOT
						female = no
						age = 20
					}
					new_character = {
						move_character = ROOT
						set_character_flag = prince_heir
					}
				}
			}
			e_rebels = {
				holder_scope = {
					ROOT = {
						random_courtier = {
							limit = {
								liege = { character = ROOT }
								has_character_flag = prince_heir
							}
							save_event_target_as = prince_successor
							ROOT = {
								primary_title = { succession = open_elective }
								any_courtier = { #temporarily move everyone else out
									limit = {
										liege = { character = ROOT }
										is_ruler = no
										NOT = { has_character_flag = prince_heir }
									}
									move_character = PREVPREVPREVPREV
									character_event = { id = free_cities.1926 days = 1 }
								}
								recalc_succession = yes
								#Check if it worked
								if = {
									limit = { current_heir = { character = PREVPREV } }
									current_heir = { 
										add_weak_claim = k_pentos
										add_trait = disinherited
										recalc_succession = yes
										character_event = { id = free_cities.1025 }
									}
								}	
								if = {
									limit = { NOT = { current_heir = { character = PREVPREV } } }
									primary_title = { succession = appointment }
									recalc_succession = yes
								}
							}
							clr_character_flag = prince_heir							
						}						
					}
				}
			}	
			remove_trait = dead_target
			remove_trait = disinherited
		}
		###Prince of Lorath
		if = {
			limit = { 
				has_landed_title = d_prince_lorath
				is_feudal = yes
				NOT = { higher_tier_than = DUKE }
				is_patrician = no
				OR = {
					liege = {
						is_republic = yes
						has_landed_title = k_lorath
					}
					liege_before_war = {
						is_republic = yes
						has_landed_title = k_lorath
					}
				}
			}	
			liege = {
				random_realm_character = {
					limit = {
						is_female = no
						age = 14
						NOT = { age = 40 }
						is_ruler = no
						is_primary_heir = no
						is_incapable = no
						can_press_claims_trigger = yes
						liege = {
							dynasty = PREV
							OR = {
								is_patrician = yes
								has_landed_title = k_lorath
								AND = {
									NOT = { tier = BARON }
									OR = {					
										capital_scope = { region = world_lorath }
										culture = lorathi
									}
								}	
							}						
						}
					}
					move_character = ROOT
					set_character_flag = prince_heir
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				liege = {
					random_realm_character = {
						limit = {
							is_female = no
							age = 14
							NOT = { age = 40 }
							is_ruler = no
							is_primary_heir = no
							is_incapable = no
							can_press_claims_trigger = yes
						}
						move_character = ROOT
						set_character_flag = prince_heir
						ROOT = { add_trait = dead_target }
					}
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				liege = {
					create_character = {
						random_traits = yes
						dynasty = none
						religion = ROOT
						culture = ROOT
						female = no
						age = 20
					}
					new_character = {
						move_character = ROOT
						set_character_flag = prince_heir
					}
				}
			}
			e_rebels = {
				holder_scope = {
					ROOT = {
						random_courtier = {
							limit = {
								liege = { character = ROOT }
								has_character_flag = prince_heir
							}
							save_event_target_as = prince_successor
							ROOT = {
								primary_title = { succession = open_elective }
								any_courtier = { #temporarily move everyone else out
									limit = {
										liege = { character = ROOT }
										is_ruler = no
										NOT = { has_character_flag = prince_heir }
									}
									move_character = PREVPREVPREVPREV
									character_event = { id = free_cities.1926 days = 1 }
								}
								recalc_succession = yes
								#Check if it worked
								if = {
									limit = { current_heir = { character = PREVPREV } }
									current_heir = { 
										add_weak_claim = k_lorath
										add_trait = disinherited
										recalc_succession = yes
										character_event = { id = free_cities.11025 }
									}
								}	
								if = {
									limit = { NOT = { current_heir = { character = PREVPREV } } }
									primary_title = { succession = appointment }
									recalc_succession = yes
								}
							}
							clr_character_flag = prince_heir							
						}						
					}
				}
			}
			remove_trait = dead_target
			remove_trait = disinherited
		}
		###Inherit Slaves
		if = {
			limit = { NOT = { has_game_rule = { name = slavery value = off } } }
			if = {
				limit = { trait = slave_owner }
				if = {
					limit = { is_merchant_republic = no }
					current_heir = {
						ROOT = {
							any_courtier = {
								limit = { 
									trait = slave 
									reverse_has_opinion_modifier = { who = ROOT modifier = opinion_my_slave }
								}
								reverse_opinion = { who = PREVPREV modifier = opinion_my_slave }
								opinion = { who = PREVPREV modifier = opinion_my_owner }
							}
						}
						character_event = { id = slavery.12 days = 1 }
					}
				}	
				if = {
					limit = { is_merchant_republic = yes }
					family_palace = {
						current_heir = { 
							ROOT = {
								any_courtier = {
									limit = { 
										trait = slave 
										reverse_has_opinion_modifier = { who = ROOT modifier = opinion_my_slave }
									}
									reverse_opinion = { who = PREVPREV modifier = opinion_my_slave }
									opinion = { who = PREVPREV modifier = opinion_my_owner }
								}
							}
							character_event = { id = slavery.12 days = 1 } 
						}
					}
				}
				remove_trait = slave_owner				
			}
			if = { #Unsullied training
				limit = { 
					capital_scope = { culture = astapori }		
				}
				if = {
					limit = { has_character_flag =  training_unsullied_1000 }
					if = {
						limit = { is_patrician = yes }
						family_palace = { current_heir = { set_character_flag =  training_unsullied_1000 } }
					}
					if = {
						limit = { is_patrician = no }
						current_heir = { set_character_flag =  training_unsullied_1000 }
					}
				}	
				if = {
					limit = { has_character_flag =  training_unsullied_2000 }
					if = {
						limit = { is_patrician = yes }
						family_palace = { current_heir = { set_character_flag =  training_unsullied_2000 } }
					}
					if = {
						limit = { is_patrician = no }
						current_heir = { set_character_flag =  training_unsullied_2000 }
					}
				}	
				if = {
					limit = { has_character_flag =  training_unsullied_3000 }
					if = {
						limit = { is_patrician = yes }
						family_palace = { current_heir = { set_character_flag =  training_unsullied_3000 } }
					}
					if = {
						limit = { is_patrician = no }
						current_heir = { set_character_flag =  training_unsullied_3000 }
					}
				}	
				if = {
					limit = { has_character_flag =  training_unsullied_4000 }
					if = {
						limit = { is_patrician = yes }
						family_palace = { current_heir = { set_character_flag =  training_unsullied_4000 } }
					}
					if = {
						limit = { is_patrician = no }
						current_heir = { set_character_flag =  training_unsullied_4000 }
					}
				}	
				if = {
					limit = { has_character_modifier =  training_unsullied }
					if = {
						limit = { is_patrician = yes }
						family_palace = { current_heir = { add_character_modifier = { name = training_unsullied duration = 3650 } } }
					}
					if = {
						limit = { is_patrician = no }
						current_heir = { add_character_modifier = { name = training_unsullied duration = 3650 } }
					}
				}	
			}	
		}	
		#Check cognatic realm inheritance
		if = {
			limit = { has_character_flag = matri_inheritance_check }		
			if = { 
				limit = { 
					current_heir = { #If heir is valid, no alternative heir is needed
						OR = {
							dynasty = ROOT
							AND = { #son
								is_child_of = ROOT
								is_female = no
							}
							AND = { #patri grandson
								is_grandchild_of = ROOT
								is_female = no
								father_even_if_dead = { is_child_of = ROOT }
							}
							AND = { #eldest daughter
								is_child_of = ROOT
								is_female = yes
								NOT = { any_sibling = { is_older_than = PREV is_alive = yes } }
							}
						}	
					} 
				}
				current_heir = { 
					if = { #If heir is dynast, check if their inheritance needs to be checked
						limit = { 
							any_close_relative = { dynasty = ROOT trait = disinherited }
						}
						set_character_flag = matri_inheritance_check
					}	
				}	
			}	
			else = { #if not, try to find closest dynasty heir
				current_heir = { #First try removing heir
					if = {
						limit = { NOT = { trait = disinherited } }
						save_event_target_as = cancelled_heir_1
						add_trait = disinherited
						set_character_flag = temp_disinherited
					}
				}
				recalc_succession = yes
				if = {
					limit = { current_heir = { NOT = { dynasty = ROOT } } }
					current_heir = { #Then try removing siblings
						if = {
							limit = { NOT = { trait = disinherited } }
							save_event_target_as = cancelled_heir_2
							add_trait = disinherited
							set_character_flag = temp_disinherited
						}
						any_sibling = {
							if = {
								limit = { NOT = { trait = disinherited } }
								add_trait = disinherited
								set_character_flag = temp_disinherited
							}
						}
					}
					recalc_succession = yes
					if = {
						limit = { current_heir = { NOT = { dynasty = ROOT } } }
						primary_title = { #Record gender law
							if = {
								limit = { has_law = cognatic_succession }
								set_title_flag = cognatic_succession
							}
							if = {
								limit = { has_law = true_cognatic_succession }
								set_title_flag = true_cognatic_succession
							}
							if = {
								limit = { has_law = enatic_cognatic_succession }
								set_title_flag = enatic_cognatic_succession
							}
							if = {
								limit = { has_law = enatic_succession }
								set_title_flag = enatic_succession
							}
						}
						#Then try setting to male only inheritance to find dynastic heir
						primary_title = { gender_succ = agnatic }
						recalc_succession = yes
						if = { #Then try Seniority
							limit = { current_heir = { NOT = { dynasty = ROOT } } }
							primary_title = { succession = seniority }		
							recalc_succession = yes
						}
						if = { #If no dynastic heir can be found reset gender law and allow disinherited daughters to inherit
							limit = { current_heir = { NOT = { dynasty = ROOT } } }
							any_child = {
								limit = { is_female = yes }
								remove_trait = disinherited
							}
							event_target:cancelled_heir_1 = {
								remove_trait = disinherited
								clr_character_flag = temp_disinherited
							}
							event_target:cancelled_heir_2 = {
								remove_trait = disinherited
								clr_character_flag = temp_disinherited
								any_sibling = {
									limit = {
										trait = disinherited
										has_character_flag = temp_disinherited
									}
									remove_trait = disinherited
									clr_character_flag = temp_disinherited
								}
							}
							primary_title = { 
								succession = primogeniture
								if = {
									limit = { has_title_flag = cognatic_succession }
									clr_title_flag = cognatic_succession
									gender_succ = cognatic
								}
								if = {
									limit = { has_title_flag = true_cognatic_succession }
									clr_title_flag = true_cognatic_succession
									gender_succ = true_cognatic
								}
								if = {
									limit = { has_title_flag = enatic_cognatic_succession }
									clr_title_flag = enatic_cognatic_succession
									gender_succ = enatic_cognatic
								}
								if = {
									limit = { has_title_flag = enatic_succession }
									clr_title_flag = enatic_succession
									gender_succ = enatic
								}					 
							}			
							recalc_succession = yes
						}	
					}	
				}	
				current_heir = { character_event = { id = maintenance.28 days = 1 } }	
			}	
		}	
		#Destroy Special Titles
		if = {
			limit = { has_landed_title = d_deep_lake }
			activate_title = { status = no title = d_deep_lake }
			d_deep_lake = { destroy_landed_title = THIS }
		}
		if = {
			limit = { has_landed_title = d_great_grass_sea }
			activate_title = { status = no title = d_great_grass_sea }
			d_great_grass_sea = { destroy_landed_title = THIS }
		}	
		if = {
			limit = { has_landed_title = k_great_grass_sea }
			activate_title = { status = no title = k_great_grass_sea }
			k_great_grass_sea = { destroy_landed_title = THIS }
		}	
		if = {
			limit = { has_landed_title = e_aurions_host }
			activate_title = { status = no title = e_aurions_host }
			e_aurions_host = { destroy_landed_title = THIS }
		}		
		#Special Rhaenyra Inheritance
		if = {
			limit = {
				c_77012 = { character = ROOT }
				current_heir = { dynasty = 52 }
			}
			if = {
				limit = { ai = no }
				current_heir = { 
					dynasty = 496 
					character_event = { id = dance_of_dragons.7 days = 1 }
				}
			}	
			any_child = {
				limit = { NOT = { trait = bastard } }
				e_iron_throne = { add_pressed_claim = PREV }
			}
		}
		#Special Nymeria Inheritance
		if = {
			limit = { ai = no }
			if = {
				limit = {
					independent = yes
					c_2100001 = { character = ROOT }
					c_2000001 = { #Nymeria
						is_alive = yes
						is_married = ROOT
						can_inherit_titles_trigger = yes
						prisoner = no
						is_incapable = no
						is_liege_or_above = ROOT
					}
				}
				c_2000001 = {
					dynasty = 1
					father_even_if_dead = { save_event_target_as = actual_father }
					set_father = ROOT
					ROOT = { recalc_succession = yes }
					character_event = { id = rhoynish_wars.2 days = 1 }
				}
			}
			if = {
				limit = {
					# character = 2000001
					c_2000001 = { character = ROOT }
					current_heir = {
						dynasty = 1
						NOT = { dynasty = ROOT }
					}
				}
				current_heir = {
					dynasty = ROOT
					character_event = { id = rhoynish_wars.3 days = 1 }
				}
			}
		}	
		#Khal's wife is moved to Dosh Kaleen
		if = {
			limit = {
				culture = dothraki
				is_female = no
				is_nomadic = yes
				NOT = { has_character_flag = abdication } #does not apply to abdications
			}
			any_spouse = { character_event = { id = dothraki.202 } }
		}	
		#Check Nomadic Heir
		if = {
			limit = { is_nomadic = yes }
			current_heir = { 
				character_event = { id = dothraki.204 days = 1 } #Rename titles
				character_event = { id = dothraki.406 days = 2 } 
				ROOT = {
					clan_title = {
						current_heir = {
							if = {
								limit = { NOT = { character = PREVPREVPREV } }
								character_event = { id = dothraki.204 days = 1 } #Rename titles
								character_event = { id = dothraki.406 days = 2 } 
							}
						}
					}
				}
			} 
			if = { #pass on total leadership?
				limit = {
					independent = yes
					has_character_modifier = greatest_of_khans
				}
				current_heir = { 
					add_character_modifier = { name = greatest_of_khans duration = -1 }
					character_event = { id = dothraki.407 days = 2 } 
				}			
			}
			if = { #pass on total leadership?
				limit = {
					independent = yes
					has_character_modifier = jhattar_of_jogos_nhai
				}
				current_heir = { 
					add_character_modifier = { name = jhattar_of_jogos_nhai duration = -1 }
					character_event = { id = dothraki.407 days = 2 } 
				}			
			}
		}	
		#Bloodriders		
		if = {
			limit = {
				culture = dothraki 	
				NOT = { has_character_flag = abdication } #does not apply to abdications
			}
			any_realm_character = { 
				limit = {
					has_minor_title = title_bloodrider
					liege = { character = ROOT }
				}
				character_event = { id = dothraki.411 days = 5 random = 3 }
			}
		}	
		#Check Dosh Khaleen Heir
		if = {
			limit = {
				has_landed_title = c_dosh_khaleen		
			}
			if = {
				limit = { NOT = { current_heir = { trait = dosh_khaleen } } }
				random_courtier = {
					limit = {
						NOT = { character = ROOT }
						trait = dosh_khaleen
						religion = dothraki_pagan
					}
					save_event_target_as = debt_inheritor 
					ROOT = { inherit_debt_effect = yes }
					c_dosh_khaleen = { gain_title = PREV }
					c_vaes_dothrak = { 
						if = {
							limit = { 
								holder_scope = { 
									culture = dothraki 
									OR = {
										is_nomadic = yes
										religion = dothraki_pagan
									}
								}
							}
							gain_title = PREV 
						}	
					}
					set_defacto_liege = THIS
					ROOT = { add_trait = dead_target }
					character_event = { id = dothraki.203 days = 2 } #Dosh Khaleen Maintenance
				}
				if = {
					limit = { NOT = { trait = dead_target } }
					create_character = {
						is_female = yes
						random_traits = yes
						culture = dothraki
						religion = dothraki_pagan
						dynasty = random
						trait = dosh_khaleen
						min_age = 40
					}
					new_character = {
						save_event_target_as = debt_inheritor 
						ROOT = { inherit_debt_effect = yes }
						c_dosh_khaleen = { gain_title = PREV }
						c_vaes_dothrak = { 
							if = {
								limit = { 
									holder_scope = { 
										culture = dothraki 
										OR = {
											is_nomadic = yes
											religion = dothraki_pagan
										}
									}
								}
								gain_title = PREV 
							}	
						}
						set_defacto_liege = THIS
						character_event = { id = dothraki.203 days = 2 } #Dosh Khaleen Maintenance
					}
				}
				remove_trait = dead_target
			}	
			current_heir = { character_event = { id = dothraki.203 days = 2 } }#Dosh Khaleen Maintenance
		}
		#High Septon Dynasty Fix
		if = {
			limit = {
				is_theocracy = yes
				has_landed_title = k_the_most_devout
				current_heir = { dynasty = 0 }
			}
			current_heir = { dynasty = 777777 }
		}	
		#Human pass on special flags
		if = {
			limit = { 
				ai = no
				has_character_flag = auto_assign_minor_titles
			}
			if = {
				limit = { is_patrician = no }
				current_heir = {	
					if = {
						limit = { ai = yes }
						set_character_flag = auto_assign_minor_titles
						character_event = { id = maintenance.31 days = 3 } 
					}	
				}	
			}	
			if = {
				limit = { is_patrician = yes }
				family_palace = {
					current_heir = {	
						if = {
							limit = { ai = yes }
							set_character_flag = auto_assign_minor_titles
							character_event = { id = maintenance.31 days = 3 } 
						}	
					}
				}	
			}	
		}
		if = {
			limit = { 
				ai = no
				has_character_flag = inform_available_unsullied
			}
			if = {
				limit = { is_patrician = no }
				current_heir = { set_character_flag = inform_available_unsullied }	
			}	
			if = {
				limit = { is_patrician = yes }
				family_palace = { current_heir = { set_character_flag = inform_available_unsullied } }	
			}	
		}
		#Abolish Night's king if no valid heir
		if = {
			limit = { 
				has_landed_title = k_nightswatch
				OR = {
					has_character_flag = destroy_nights_king
					current_heir = { 
						OR = {
							NOT = { dynasty = ROOT } 
							AND = {
								is_ruler = yes
								NOT = {
									OR = {
										trait = nightswatch
										is_liege_or_above = ROOT
										liege_before_war = { character = ROOT }
									}
								}
							}
						}	
					}
				}	
			}
			any_vassal = {
				limit = { NOT = { trait = nightswatch } }
				set_defacto_liege = THIS
			}
			k_nightswatch = { destroy_landed_title = THIS	}
			if = {
				limit = { has_landed_title = d_nightswatch }
				d_nightswatch = {
					succession = open_elective
					gender_succ = agnatic 
					holder_scope = { 
						recalc_succession = yes 
						set_government_type = NW_government
						set_global_flag = new_NW_LC_needed
					}
				}
			}	
			clr_character_flag = destroy_nights_king
		}
		#Make sure heir to religion head is the same religion
		#Most Devout
		if = {
			limit = { 
				has_landed_title = k_the_most_devout
				#controls_religion = yes
				is_theocracy = yes	
				primary_title = { 
					NOT = { has_law = succ_papal_succession }
					NOT = { current_heir = { trait = septon } }
				}				
			}
			top_liege = {
				random_realm_character = {
					limit = {
						NOT = { character = ROOT }
						prisoner = no
						is_incapable = no
						trait = septon
						religion = rhllor
						is_ruler = no
					}
					move_character = ROOT
					save_event_target_as = debt_inheritor 
					ROOT = {
						if = {
							limit = { primary_title = { title = k_the_most_devout } }
							inherit_debt_effect = yes
							abdicate_to = PREV 
							add_trait = dead_target
						}
						else = {
							k_the_most_devout = { gain_title = PREVPREV }
						}
					}	
				}
			}	
			if = {
				limit = { NOT = { trait = dead_target } }
				create_random_priest = {
					random_traits = yes
					dynasty = none
					female = no
					religion = the_seven
					culture = ROOT
					trait = septon
				}
				new_character = {
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					save_event_target_as = debt_inheritor 
					ROOT = {
						if = {
							limit = { primary_title = { title = k_the_most_devout } }
							inherit_debt_effect = yes
							abdicate_to = PREV 
							add_trait = dead_target
						}
						else = {
							k_the_most_devout = { gain_title = PREVPREV }
						}
					}	
				}
			}				
			remove_trait = dead_target
		}
		#Rhllor
		if = {
			limit = { 
				has_landed_title = d_rhllor
				#controls_religion = yes
				is_theocracy = yes				
			}
			if = {
				limit = {
					primary_title = { 
						has_law = succ_open_elective 
						NOT = { current_heir = { trait = red_priest } }
					}
				}
				top_liege = {
					random_realm_character = {
						limit = {
							NOT = { character = ROOT }
							prisoner = no
							is_incapable = no
							trait = red_priest
							religion = rhllor
							is_ruler = no
						}
						move_character = ROOT
						if = {
							limit = { ROOT = { NOT = { has_landed_title = c_templelordoflight } } }
							c_templelordoflight = { add_claim = PREV }
						}
						save_event_target_as = debt_inheritor 
						ROOT = {
							inherit_debt_effect = yes
							abdicate_to = PREV 
							add_trait = dead_target
						}	
					}
				}	
				if = {
					limit = { NOT = { trait = dead_target } }
					create_random_priest = {
						random_traits = yes
						dynasty = none
						female = no
						religion = rhllor
						culture = ROOT
						trait = red_priest
					}
					new_character = {
						remove_trait = imbecile
						remove_trait = inbred
						remove_trait = slow
						if = {
							limit = { ROOT = { NOT = { has_landed_title = c_templelordoflight } } }
							c_templelordoflight = { add_claim = PREV }
						}
						save_event_target_as = debt_inheritor 
						ROOT = {
							inherit_debt_effect = yes
							abdicate_to = PREV 
							add_trait = dead_target
						}	
					}
				}
				
			}	
			if = {
				limit = { 
					NOT = { trait = dead_target } 
					NOT = { has_landed_title = c_templelordoflight }
				}
				current_heir = {
					c_templelordoflight = { add_claim = PREV }
				}
				#add_trait = dead_target
			}	
			remove_trait = dead_target
		}
		#Faceless Men
		if = {
			limit = { 
				has_landed_title = d_faceless_men
				#controls_religion = yes
				is_theocracy = yes				
				primary_title = { 
					has_law = succ_open_elective 
					NOT = { current_heir = { has_character_flag = faceless_man } }
				}
			}
			top_liege = {
				random_realm_character = {
					limit = {
						NOT = { character = ROOT }
						prisoner = no
						is_female = no
						is_incapable = no
						has_character_flag = faceless_man
						religion = many_faced_god
						is_ruler = no
					}
					move_character = ROOT
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
						abdicate_to = PREV 
						add_trait = dead_target
					}			
				}
			}	
			if = {
				limit = { NOT = { trait = dead_target } }
				create_random_intriguer = {
					random_traits = yes
					dynasty = none
					female = no
					culture = braavosi
					religion = many_faced_god
				}
				new_character = {
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
						abdicate_to = PREV 
					}	
					set_character_flag = faceless_man
				}
			}
			remove_trait = dead_target
		}
		#Warlocks
		if = {
			limit = { 
				has_landed_title = d_warlocks
				#controls_religion = yes
				is_theocracy = yes				
				primary_title = { 
					has_law = succ_open_elective 
					NOT = { current_heir = { trait = warlock } }
				}
			}
			top_liege = {
				random_realm_character = {
					limit = {
						NOT = { character = ROOT }
						prisoner = no
						is_incapable = no
						trait = warlock
						religion = qarth_warlocks
						is_ruler = no
						is_female = no
					}
					move_character = ROOT
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
						abdicate_to = PREV 
						add_trait = dead_target
					}			
				}
			}	
			if = {
				limit = { NOT = { trait = dead_target } }
				create_random_priest = {
					random_traits = yes
					dynasty = none
					female = no
					religion = qarth_warlocks
					culture = qartheen
					trait = warlock
					trait = mystic
				}
				new_character = {
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
						abdicate_to = PREV 
					}	
				}
			}
			remove_trait = dead_target
		}
		#Thenn
		if = {
			limit = { 
				has_landed_title = c_thenn_rel
				religion = thenn_rel
				c_thenn_rel = { current_heir = { NOT = { religion = thenn_rel } } }
			}
			c_thenn = {
				holder_scope = {
					if = {
						limit = {
							NOT = { character = ROOT }
							religion = thenn_rel
						}
						save_event_target_as = debt_inheritor 
						ROOT = {
							inherit_debt_effect = yes
							add_trait = dead_target
						}	
						c_thenn_rel = { gain_title = PREV }
					}	
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_playable_ruler = {
					limit = {
						NOT = { character = ROOT }
						religion = thenn_rel
					}
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
						add_trait = dead_target
					}	
					c_thenn_rel = { gain_title = PREV }
				}
			}	
			if = {
				limit = { NOT = { trait = dead_target } }
				create_random_soldier = {
					random_traits = yes
					dynasty = actually_culture
					female = no
					religion = thenn_rel
					culture = thenn
				}
				new_character = {
					random_list = {
						30 = { add_trait = poor_warrior }
						50 = { add_trait = trained_warrior }
						20 = { add_trait = skilled_warrior }
					}
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
					}	
					c_thenn_rel = { gain_title = PREV }
				}
			}
			remove_trait = dead_target
		}
		#Three Daughters Succession
		if = {
			limit = { 
				is_feudal = yes
				is_patrician = no
				government = alliance_government
			}
			random_realm_character = {
				limit = {
					is_female = no
					age = 25
					is_ruler = no
					is_primary_heir = no
					is_incapable = no
					NOT = { trait = eunuch }
					NOT = { trait = blinded }
					NOT = { trait = maester }
					NOT = { trait = slave }
					NOT = { dynasty = 0 }
					any_dynasty_member = {
						is_patrician = yes
						same_realm = ROOT
						any_liege = {
							any_demesne_title = { has_law = republic_alliance_member }
						}
					}
				}
				save_event_target_as = debt_inheritor 
				ROOT = {
					inherit_debt_effect = yes
					abdicate_to = PREV 
					add_trait = dead_target
				}	
				character_event = { id = free_cities.13 days = 1 }
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_realm_character = {
					limit = {
						is_female = no
						age = 25
						is_ruler = no
						is_primary_heir = no
						is_incapable = no
						NOT = { trait = eunuch }
						NOT = { trait = blinded }
						NOT = { trait = maester }
						NOT = { trait = slave }
						NOT = { dynasty = 0 }
						any_liege = {
							any_demesne_title = { has_law = republic_alliance_member }
						}
						stewardship = 8
					}
					save_event_target_as = debt_inheritor 
					ROOT = {
						inherit_debt_effect = yes
						abdicate_to = PREV 
						add_trait = dead_target
					}	
					character_event = { id = free_cities.13 days = 1 }
				}
				if = {
					limit = { NOT = { trait = dead_target } }
					capital_scope = {
						ROOT = {
							create_random_steward = {
								random_traits = yes
								dynasty = actually_culture
								female = no
								culture = PREV
							}
							new_character = {
								remove_trait = imbecile
								remove_trait = inbred
								remove_trait = slow
								remove_trait = infirm
								remove_trait = incapable
								remove_trait = leper
								remove_trait = possessed
								remove_trait = ill
								remove_trait = pneumonic
								remove_trait = maimed
								save_event_target_as = debt_inheritor 
								ROOT = {
									inherit_debt_effect = yes
									abdicate_to = PREV 
									add_trait = dead_target
								}	
								character_event = { id = free_cities.13 days = 1 }
							}
						}
					}	
				}
			}
			remove_trait = dead_target
		}
		#Held great Council, restore previous laws
		if = {
			limit = {
				has_character_flag = has_great_council_heir
				current_heir = { has_character_modifier = great_council_heir }
			}
			clr_character_flag = has_great_council_heir
			#Remove Disinherited Trait from Initial Heir
			random_opinion_modifier_target = {
				limit = {
					trait = disinherited
					has_character_flag = disinherited_by_council
					has_opinion_modifier = { who = ROOT modifier = opinion_disinherited_me_great_council }
				}
				save_event_target_as = disinherited_heir
				hidden_tooltip = { 
					ROOT = { 
						any_demesne_title = { 
							limit = { tier = PREV }
							add_pressed_claim = PREVPREV 
						} 
					} 
				}
			}
			current_heir = { character_event = { id = dynasty.38 days = 2 } }
			
		}
		###Triarch die
		if = { #Senior
			limit = { 
				government = triarch_merchant_republic_government
			}
			family_palace = {
				current_heir = { character_event = { id = volantis.300 days = 1 } }
			}
			if = { #Triarch for life
				limit = { 
					primary_title = { has_law = republic_triarch_for_life } 
				}
				family_palace = { #if heir is co_triarch they inherit
					current_heir = {
						if = { 
							limit = {
								has_character_flag = title_triarch_for_life
								has_character_flag = triarch
							}
							set_character_flag = changed_heir
							prestige = 50000
							character_event = { id = volantis.210 days = 1 }
							ROOT = { 
								recalc_succession = yes
								add_trait = dead_target 
							}
						}
					}				
				}	
				if = { #else revert to default law
					limit = { NOT = { trait = dead_target } }			
					primary_title = { add_law = republic_law_0 }
				}	
			}
			if = { 
				limit = { NOT = { trait = dead_target } }
				if = { #If heir is Triarch all is well
					limit = { current_heir = { has_character_flag = triarch } }
					current_heir = { 
						set_character_flag = triarch_half_term
						character_event = { id = volantis.210 days = 1 }
					}
					add_trait = dead_target 
				}
				if = { #If heir is not Triarch select another patrician Triarch to be heir
					limit = { NOT = { trait = dead_target } }
					random_realm_character = {
						limit = { 
							has_character_flag = triarch
							OR = {
								AND = {
									is_patrician = yes
									liege = { character = ROOT }
								}
								ROOT = { family_palace = { current_heir = { character = PREVPREVPREV } } }
							}
						}
						set_character_flag = changed_heir
						set_character_flag = triarch_half_term
						prestige = 50000
						character_event = { id = volantis.210 days = 1 }
						ROOT = { 
							recalc_succession = yes
							add_trait = dead_target 
						}
					}
					if = { #If still no heir hold a new election
						limit = { NOT = { trait = dead_target } }
						current_heir = { 
							clr_character_flag = volantene_election 
							set_character_flag = interim_senior_triarch
							character_event = { id = volantis.1 days = 2 } 
						}					
					}
				}	
			}
			if = { #If no election is held promote a councillor to junior Triarch
				limit = { trait = dead_target } 
				remove_trait = dead_target
				random_courtier = {
					limit = { 
						OR = {
							is_voter = yes
							is_councillor = yes
						}
						NOT = { trait = slave } 
						NOT = { has_character_flag = triarch } 
						
						is_ruler = yes
						NOT = { has_job_title = job_physician }
						NOT = { has_job_title = job_spiritual }
						NOT = { has_job_title = job_spymaster }
					}
					character_event = { id = volantis.21 days = 2 }
					ROOT = { add_trait = dead_target }
				}
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_courtier = {
						limit = { 
							OR = {
								is_voter = yes
								is_councillor = yes
							}
							NOT = { trait = slave } 
							NOT = { has_character_flag = triarch } 
							
							is_female = no
							NOT = { has_job_title = job_physician }
							NOT = { has_job_title = job_spiritual }
							NOT = { has_job_title = job_spymaster }
						}
						character_event = { id = volantis.21 days = 2 }
						ROOT = { add_trait = dead_target }
					}
				}
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_courtier = {
						limit = { 
							OR = {
								is_voter = yes
								is_councillor = yes
							}
							NOT = { trait = slave } 
							NOT = { has_character_flag = triarch } 
							
							NOT = { has_job_title = job_physician }
							NOT = { has_job_title = job_spiritual }
							NOT = { has_job_title = job_spymaster }
						}
						character_event = { id = volantis.21 days = 2 }
						ROOT = { add_trait = dead_target }
					}
				}
				if = {
					limit = { ROOT = { NOT = { trait = dead_target } } }
					random_vassal = {
						limit = { 
							NOT = { has_character_flag = triarch } 
							is_theocracy = no
							OR = {
								trait = elephant
								trait = tiger
							}	
						}
						character_event = { id = volantis.21 days = 2 }
						ROOT = { add_trait = dead_target }
					}
				}
			}
			remove_trait = dead_target
		}	
		#Senior Archon in valyrian freehold dies
		if = { 
			limit = { is_valyrian_freehold_trigger = yes }
			if = { #capital/title oligarchy maintenance
				limit = { government = noble_oligarchy }
				capital_holding = { save_event_target_as = oligarchy_capital }
				primary_title = {	
					add_law = republic_law_oligarchy #ensure law stays
				}	
			}
			# if = { #Triarch for life
				# limit = { 
					# primary_title = { has_law = republic_triarch_for_life } 
				# }
				# family_palace = { #if heir is co_triarch they inherit
					# current_heir = {
						# if = { 
							# limit = {
								# has_character_flag = title_triarch_for_life
								# has_character_flag = triarch
							# }
							# set_character_flag = changed_heir
							# prestige = 50000
							# character_event = { id = volantis.210 days = 1 }
							# ROOT = { 
								# recalc_succession = yes
								# add_trait = dead_target 
							# }
						# }
					# }				
				# }	
				# if = { #else revert to default law
					# limit = { NOT = { trait = dead_target } }			
					# primary_title = { add_law = republic_law_0 }
				# }	
			# }
			
			if = { 
				limit = { NOT = { trait = dead_target } }
				if = { #If heir is valid, all is well
					limit = { primary_title = { current_heir = { eligible_archon_trigger = yes } } }
					primary_title = { 
						current_heir = { 
							set_character_flag = valyria_half_term
							save_event_target_as = freehold_heir
							character_event = { id = valyria.35 days = 1 }
						}
					}	
					add_trait = dead_target 
				}
				if = { #If heir is not elected select another elected councillor to be heir
					limit = { NOT = { trait = dead_target } }
					primary_title = { 
						random_pretender = {
							limit = { 
								eligible_archon_trigger = yes								
								liege = { character = ROOT }
								OR = {
									ROOT = { is_merchant_republic = no }
									AND = {
										is_patrician = yes
										liege = { character = ROOT }
									}
									ROOT = { family_palace = { current_heir = { character = PREVPREVPREV } } }
								}
							}
							preferred_limit = {
								has_character_flag = elected_valyrian_councillor
							}
							set_character_flag = changed_heir
							set_character_flag = valyria_half_term
							prestige = 50000
							save_event_target_as = freehold_heir
							character_event = { id = valyria.35 days = 1 }
							ROOT = { 
								recalc_succession = yes
								add_trait = dead_target 
							}
						}
					}	
					if = { #If still no heir hold a new election
						limit = { NOT = { trait = dead_target } }
						primary_title = { 
							current_heir = { 
								clr_character_flag = valyrian_election
								save_event_target_as = freehold_heir
								character_event = { id = valyria.1 days = 2 } 
							}	
						}	
					}
				}	
				remove_trait = dead_target		
				if = { #non republic handover
					limit = { ROOT = { is_merchant_republic = no } }
					ROOT = {
						if = { #no own personal titles
							limit = {
								NOT = {
									any_demesne_title = {
										tier = COUNT
										NOT = { 
											dejure_liege_title = { 
												has_title_flag = valyria_colony
											} 
										}
										NOT = { 
											dejure_liege_title = { 
												dejure_liege_title = { 
													has_title_flag = valyria_colony 
												} 
											}	
										}
										NOT = { location = { is_capital = yes } }
									}
								}
							}
							if = { #try and find relative's title to assume
								limit = {
									is_alive = yes
									is_dying = no
								}							
								random_realm_title = { 
									limit = {
										tier = COUNT
										holder_scope = {
											dynasty = ROOT
											OR = {
												is_child_of = ROOT
												is_grandchild_of = ROOT
												AND = {
													sibling = ROOT
													NOT = { is_older_than = ROOT }
												}	
											}
											NAND = {
												trait = dragon_rider
												any_friend = {
													trait = dragon
													martial = 50
												}
											}
										}
										NOT = { 
											dejure_liege_title = { 
												has_title_flag = valyria_colony 
											} 
										}
										NOT = { 
											dejure_liege_title = { 
												dejure_liege_title = { 
													has_title_flag = valyria_colony 
												} 
											}	
										}
										OR = {
											location = { is_capital = no }
											holder_scope = { ai = yes }
										}
									}
									preferred_limit = {
										location = { is_capital = no }
										holder_scope = {
											OR = {
												is_child_of = ROOT
												is_grandchild_of = ROOT
											}
										}
									}
									preferred_limit = {
										location = { is_capital = no }
									}
									preferred_limit = {
										holder_scope = {
											OR = {
												is_child_of = ROOT
												is_grandchild_of = ROOT
											}
										}
									}
									gain_title = ROOT
									ROOT = { add_trait = dead_target }
								}
							}	
							if = { #if none found, abdicate to freehold heir
								limit = { NOT = { trait = dead_target } }
								event_target:freehold_heir = { save_event_target_as = debt_inheritor }
								inherit_debt_effect = yes
								abdicate_to = event_target:freehold_heir
							}
						}
						remove_trait = dead_target
						if = {
							limit = { tier = EMPEROR } #check havent already abdicated						
							primary_title = {
								if = {
									limit = { NOT = { current_heir = { character = event_target:freehold_heir } } }
									gain_title = event_target:freehold_heir
								}	
							}
							capital_scope = {
								kingdom = {
									if = {
										limit = { 
											holder_scope = { character = ROOT } 
											NOT = { current_heir = { character = event_target:freehold_heir } }
										}
										gain_title = event_target:freehold_heir
									}
								}
								duchy = {
									if = {
										limit = { 
											holder_scope = { character = ROOT } 
											NOT = { current_heir = { character = event_target:freehold_heir } }
										}
										gain_title = event_target:freehold_heir
									}
								}
								county = {
									if = {
										limit = { 
											holder_scope = { character = ROOT } 
											NOT = { current_heir = { character = event_target:freehold_heir } }
										}
										gain_title = event_target:freehold_heir
									}
								}															
							}							
						}						
					}
				}
				any_demesne_title = { #transfer any directly held colonies
					limit = { has_title_flag = valyria_colony }
					score_value = { #higher titles first
						value = 1
						additive_modifier = {
							value = 1
							higher_tier_than = COUNT
						}
					}	
					gain_title = event_target:freehold_heir
					add_law = valyria_colony
					hidden_tooltip = { revoke_law = republic_law_oligarchy }
					any_de_jure_vassal_title = {
						limit = { holder_scope = { character = ROOT } }
						gain_title = event_target:freehold_heir
						clr_title_flag = valyria_colony_assigned
						if = {
							limit = { has_title_flag = valyria_colony }
							add_law = valyria_colony
							hidden_tooltip = { revoke_law = republic_law_oligarchy }
						}
					}
					clr_title_flag = valyria_colony_assigned
				}
			}			
		}
		#Valyrian colony archon dies, revert titles to liege
		if = { 
			limit = { 
				liege = { 
					is_valyrian_freehold_trigger = yes 
					NOT = { character = ROOT }
				} 
			}
			liege = {
				save_event_target_as = debt_inheritor 
				ROOT = {					
					any_demesne_title = {
						limit = { has_title_flag = valyria_colony }
						ROOT = { set_character_flag = archon_died_in_office }
						save_event_target_as = valyrian_colony
						gain_title = PREVPREV
						add_law = valyria_colony
						hidden_tooltip = { revoke_law = republic_law_oligarchy }
						any_de_jure_vassal_title = {
							limit = { holder_scope = { character = ROOT } }
							gain_title = PREVPREVPREV
							clr_title_flag = valyria_colony_assigned
							if = {
								limit = { has_title_flag = valyria_colony }
								add_law = valyria_colony
								hidden_tooltip = { revoke_law = republic_law_oligarchy }
							}
						}
						clr_title_flag = valyria_colony_assigned
					}
					if = {
						limit = { is_ruler = yes }
						if = {
							limit = { is_patrician = yes }
							family_palace = { current_heir = { save_event_target_as = debt_inheritor } }
						}
						else = {
							current_heir = { save_event_target_as = debt_inheritor }
						}
					}	
					inherit_debt_effect = yes
				}	
				if = {
					limit = { ROOT = { has_character_flag = archon_died_in_office } }
					character_event = { id = valyria.46 }
				}
			}
			clr_character_flag = archon_died_in_office
		}	
		###Designated regent vanilla fixes
		if = {
			limit = { ai = no }
			random_courtier_or_vassal = {
				limit = {
					liege = { character = ROOT }
					has_minor_title = title_appointed_regent
				}
				character_event = { id = regency.54 days = 1 }
			}
		}
		if = {
			limit = {
				any_courtier_or_vassal = {
					ai = no 
					has_minor_title = title_appointed_regent
					liege = { character = ROOT }
				}	
			}
			random_courtier_or_vassal = {
				limit = {
					ai = no 
					has_minor_title = title_appointed_regent
					liege = { character = ROOT }
				}
				character_event = { id = regency.54 days = 1 }
			}
		}
		if = {
			limit = { 
				current_heir = {
					is_ruler = yes
					any_courtier_or_vassal = {
						has_minor_title = title_appointed_regent
						liege = { character = ROOT }
					}
				}
				any_courtier_or_vassal = {
					has_minor_title = title_appointed_regent
					liege = { character = ROOT }
				}
			}
			random_courtier_or_vassal = {
				limit = {
					has_minor_title = title_appointed_regent
					liege = { character = ROOT }
				}
				remove_title = title_appointed_regent
			}
		}
		##Blackfyre Claimant
		if = {
			limit = {
				war = yes
				has_character_flag = blackfyre_claimant
			}
			remove_trait = forbid_marriage
			current_heir = {
				if = {
					limit = { dynasty = 57 }
					set_character_flag = blackfyre_claimant
				}
			}
		}
		#ACOK - Decree of northern succession
		if = {
			limit = { 
				has_landed_title = e_north
				current_heir = {
					NOT = { has_character_flag = jon_snow }
				}
				any_sibling = {
					has_character_flag = jon_snow
					trait = legit_bastard 
				}
			}
			e_north_dummy = { copy_title_history = e_north }
			any_sibling = {
				limit = { has_character_flag = jon_snow }
				character_event = { id = clash_of_kings.44 }
			}
		}
		#Appointed Military Command Heir
		if = {
			limit = { 
				is_military_command_trigger = yes			
			}
			if = {
				limit = { NOT = { tier = BARON } }
				e_rebels = {
					holder_scope = {
						ROOT = {
							random_courtier = {
								limit = {
									liege = { character = ROOT }
									dynasty = ROOT
									has_minor_title = title_military_command_successor
								}
								save_event_target_as = military_command_successor
								ROOT = {
									primary_title = { succession = open_elective }
									any_courtier = { #temporarily move everyone else out
										limit = {
											liege = { character = ROOT }
											is_ruler = no
											NOT = { has_minor_title = title_military_command_successor }
										}
										move_character = PREVPREVPREVPREV
										character_event = { id = dynasty.63 days = 1 }
									}
									recalc_succession = yes
									#Check if it worked
									if = {
										limit = { current_heir = { character = PREVPREV } }
										current_heir = { character_event = { id = dynasty.64 days = 1 } }
									}	
									if = {
										limit = { NOT = { current_heir = { character = PREVPREV } } }
										primary_title = { succession = appointment }
										recalc_succession = yes
									}
								}							
							}						
						}
					}
				}
			}
			if = { #Maximum 3 years income sent to liege, rest sent to heir if possible	
				limit = { 
					scaled_wealth = 3
					current_heir = { 
						is_liege_of = ROOT
						NOT = { is_immediate_relative_ROOT_trigger = yes }
					}
				}	
				liege = { ROOT = { transfer_scaled_wealth = { to = PREV value = 3 } } }
				random_close_relative = {
					limit = {
						can_press_claims_trigger = yes
						is_alive = yes
						prisoner = no
					}
					preferred_limit = {
						is_child_of = ROOT
						is_female = no
						NOT = { trait = bastard }
					}
					preferred_limit = {
						is_child_of = ROOT
						NOT = { trait = bastard }
					}
					preferred_limit = {
						is_grandchild_of = ROOT
						dynasty = ROOT
						is_female = no
						NOT = { trait = bastard }
					}
					preferred_limit = {
						is_grandchild_of = ROOT
						dynasty = ROOT
						NOT = { trait = bastard }
					}
					preferred_limit = {
						dynasty = ROOT
						is_female = no
					}
					preferred_limit = {
						dynasty = ROOT
					}
					ROOT = { transfer_scaled_wealth = { to = PREV value = all } }
				}
			}
					
		}		
		if = { #Lord protector dies in middle of Interregnum
			limit = { 
				is_in_interregnum_trigger = yes			
			}
			remove_special_character_title = LORD_PROTECTOR
			remove_special_character_title = LADY_PROTECTOR
			clr_character_flag = called_interregnum_council
			clr_character_flag = suspended_interregnum_council
			primary_title = {
				current_heir = {
					set_character_flag = suspended_interregnum_council
					clr_character_flag = called_interregnum_council
					ROOT = {
						any_demesne_title = {
							limit = {
								tier = COUNT
								OR = {
									has_title_flag = interregnum_title
									is_variable_equal = { which = "lord_paramount_status" value = 2 }
								}
							}
							gain_title = PREVPREV
						}
						any_demesne_title = {
							limit = {
								tier = DUKE
								OR = {
									has_title_flag = interregnum_title
									is_variable_equal = { which = "lord_paramount_status" value = 2 }
								}
							}
							gain_title = PREVPREV
						}
					}
					character_event = { id = interregnum.1 days = 1 }
					
				}
			}	
		}
		#Merc Company Inheritance
		if = {
			limit = { primary_title = { mercenary = yes } }
			current_heir = { #Mercenary culture fix, (stop new commanders taking the culture of the merc company)
				ROOT = {
					create_random_soldier = { #create temp dummy so culture can be copied later
						random_traits = yes
						dynasty = none
						religion = PREV
						culture = PREV
						female = no
					}
					new_character = {
						set_character_flag = merc_culture_dummy
					}				
				}
				character_event = { id = maintenance.45 days = 1 }
			}
			# if = { #Special Golden Company Inheritance
				# limit = {
					# primary_title = { title = d_golden_company }
					# NOT = { current_heir = { always = yes } }
				# }
			# }
		}	
		#if no blood heir, decides inheritance
		if = {
			limit = { 
				is_feudal = yes
				current_heir = {
					NOT = { dynasty = ROOT }
					NOT = { is_close_relative = ROOT }
				}
				primary_title = {
					OR = {
						has_law = succ_primogeniture
						has_law = succ_gavelkind
						has_law = succ_seniority
						has_law = dornish_succession
					}
				}
			}
			if = { #if split during mega war rejoin so liege can be heir
				limit = { 
					independent = yes 
					NOT = { tier = EMPEROR }
					primary_title = { check_variable = { which = "de_facto_empire" value = 1 } } #has a defacto empire
				}
				if = {
					limit = { 
						primary_title = { check_variable = { which = "de_facto_kingdom" value = 1 } } 
						lower_tier_than = KING
					}
					random_playable_ruler = {
						limit = {
							liege = {
								higher_tier_than = DUKE
								primary_title = {
									ROOT = { primary_title = { is_variable_equal = { which = "de_facto_kingdom" which = PREVPREV } } }
								}
							}	
						}
						liege = { ROOT = { set_defacto_liege = PREV } }
					}
				}	
				if = {
					limit = { 
						independent = yes
					}
					random_independent_ruler = {
						limit = {
							tier = EMPEROR
							primary_title = {
								ROOT = { primary_title = { is_variable_equal = { which = "de_facto_empire" which = PREVPREV } } }
							}
						}
						ROOT = { set_defacto_liege = PREV }
					}	
				}
				recalc_succession = yes
			}
			if = { #If Heir is unrelated liege, they decide inheritance
				limit = { 
					current_heir = {
						NOT = { dynasty = ROOT }
						NOT = { is_close_relative = ROOT }
						is_liege_of = ROOT
					}
				}
				primary_title = {
					save_event_target_as = succession_title
					current_heir = {
						if = {
							limit = { has_claim = PREV }
							set_character_flag = title_claimant
						}
					}	
					
					#Store debts in title
					save_event_target_as = debt_inheritor 
					ROOT = { inherit_debt_effect = yes }
				}
				random_ward = {
					limit = {
						can_press_claims_trigger = yes
						NOT = { is_liege_of = ROOT }
						is_female = no
					}
					save_event_target_as = ward_claimant
				}
				any_courtier = { #mark courtiers so they can be returned to new holder
					limit = {
						is_ruler = no
						liege = { character = PREVPREV }
					}
					set_character_flag = courtier_@PREV
				}
				current_heir = {
					character_event = { id = 45350 days = 1 }
				}
			}	
			else_if = { #If independent king, an Interregnum may begin
				limit = { 
					higher_tier_than = DUKE
					government = feudal_government
					current_heir = {
						NOT = { dynasty = ROOT }
						NOT = { is_close_relative = ROOT }
					}					
				}
				current_heir = { save_event_target_as = interregnum_heir }
				start_interregnum_effect = yes	
			}			
		}	
		#Trial by Seven
		if = { 
			limit = { 
				has_character_modifier = trial_by_seven 
				has_character_flag = trial_by_seven_begun
			} 
			current_heir = {
				add_character_modifier = {
					name = trial_by_seven
					days = 50
				}
				ROOT = {
					any_opinion_modifier_target = {
						limit = {
							reverse_has_opinion_modifier = { who = ROOT modifier = opinion_seven_champion }
						}
						reverse_opinion = { who = PREVPREV modifier = opinion_seven_champion }
						opinion = { who = PREVPREV modifier = opinion_seven_championing_for } 
					}
					any_opinion_modifier_target = {
						limit = {
							reverse_has_opinion_modifier = { who = ROOT modifier = opinion_seven_trial_enemy }
						}
						reverse_opinion = { who = PREVPREV modifier = opinion_seven_trial_enemy }
					}
					any_opinion_modifier_target = {
						limit = {
							prisoner = yes
							host = { character = ROOT }
							reverse_has_opinion_modifier = { who = ROOT modifier = opinion_trial_by_seven }
						}
						reverse_opinion = { who = PREVPREV modifier = opinion_trial_by_seven }
						opinion = { who = PREVPREV modifier = opinion_trial_by_seven }
						character_event = { id = trial_by_seven.19 days = 1 }
					}
				}	
			}	
		}
		if = {
			limit = { #preserve important courtiers from culling
				OR = {
					ai = no
					higher_tier_than = DUKE
					AND = {
						rules_in_active_region_trigger = yes
						OR = {
							higher_tier_than = COUNT
							is_patrician = yes
						}
					}	
				}
			}
			any_courtier = {
				limit = {
					is_ruler = no
					NOT = { father_even_if_dead = { always = yes } }
					NOT = { mother_even_if_dead = { always = yes } }
					OR = {
						ROOT = { ai = no }
						is_councillor = yes
						is_voter = yes
						has_minor_title = title_regent
						has_minor_title = title_commander
						martial = 18
						trait = master_warrior
					}
				}	
				set_immune_to_pruning = yes
			}
		}
		#Preserve tributary status
		if = {
			limit = { 
				is_tributary = yes
				current_heir = { lower_tier_than = ROOT }
				NAND = {
					is_nomadic = no
					any_demesne_title = { is_variable_equal = { which = "de_facto_kingdom" value = 45 } }
					suzerain = { 
						has_landed_title = k_sarnor
						is_nomadic = no						
					}
				}
			}
			suzerain = { save_event_target_as = old_suzerain }
			current_heir = {
				character_event = { id = dothraki.851 days = 1 }
			}
		}
		#Flagship building inheritance
		if = {
			limit = { 
				has_character_flag = construct_a_flagship
				current_heir = {
					NOR = {
						has_character_flag = construct_a_flagship
						any_artifact = { has_artifact_flag = flagship }
					}					
				}
			}
			if = {
				limit = { has_character_flag = enormous_flagship }
				current_heir = { set_character_flag = enormous_flagship }
			}
			else_if = {
				limit = { has_character_flag = regular_flagship }
				current_heir = { set_character_flag = regular_flagship }
			}
			else = {
				current_heir = { set_character_flag = small_flagship }
			}
			current_heir = {
				set_character_flag = construct_a_flagship
				character_event = { id = ironborn_events.86 days = 150 random = 50 }
			}
		}
		#Spouse bastard murder
		if = {
			limit = { trait = lustful }
			any_spouse = {
				limit = { is_alive = yes }
				character_event = { id = bastard.1 days = 7 }
			}
		}	
		#Heir prisoner release bug workaround
		if = {
			limit = {
				current_heir = {
					prisoner = yes
					NOT = { host = { character = ROOT } }
				}
			}
			current_heir = { 
				host = { save_event_target_as = heir_prisoner_host }
				character_event = { id = maintenance.60 days = 1 }
			}	
		}
		#Elective law maintenance
		if = { #Noble oligarchy rules
			limit = {
				government = noble_oligarchy
				is_valyrian_freehold_trigger = no #has seperate maintenance
				NOT = { #these titles do not transfer capitals
					primary_title = { 
						OR = {
							NOT = { capital_scope = { always = yes } }
							capital_scope = { 
								OR = {
									region = world_westeros 
									region = world_rhoynar
									region = world_north_valyria
								}	
							}
							title = e_yi_ti
							title = k_hyrkoon
						}
						NAND = { 
							title = e_iron_throne
							NOT = { has_global_flag = non_iron_throne_westeros }
						}
					}
				}	
			}
			capital_holding = { save_event_target_as = oligarchy_capital }
			primary_title = {	
				add_law = republic_law_oligarchy #ensure law stays
				if = { #ensure heir gains capital
					limit = { has_elective_law_trigger = yes }				
					current_heir = {
						save_event_target_as = oligarchy_heir
						character_event = { id = maintenance.72 days = 1 } #capital maintenance
						ROOT = {
							random_demesne_title = {
								limit = {
									tier = COUNT
									location = { is_capital = yes }
								}
								if = {
									limit = { NOT = { current_heir = { character = PREVPREVPREV } } }
									gain_title = PREVPREV
								}
								dejure_liege_title = { #ensure duchy and kingdom is also passed on
									if = {
										limit = { 
											holder_scope = { character = ROOT } 
											NOT = { current_heir = { character = event_target:oligarchy_heir } }
										}
										gain_title = event_target:oligarchy_heir
									}
									dejure_liege_title = {
										if = {
											limit = { 
												holder_scope = { character = ROOT } 
												NOT = { current_heir = { character = event_target:oligarchy_heir } }
											}
											gain_title = event_target:oligarchy_heir
										}
									}
								}
								event_target:oligarchy_capital = {
									make_capital_holding = yes
									event_target:oligarchy_heir = { capital = PREV }
								}								
							}
						}	
					}	
				}
			}
		}
		else_if = {
			limit = { primary_title = {	 has_elective_law_trigger = yes } }
			if = { #Ensure lower tier titles stay in dynasty
				limit = { primary_title = {	 current_heir = { NOT = { dynasty = ROOT } } } }
				any_demesne_title = {
					limit = { 
						lower_tier_than = ROOT
						current_heir = { NOT = { dynasty = ROOT } }
					}
					succession = primogeniture
				}
				recalc_succession = yes
			}			
		}
		if = { #Wikid valyria quest
			limit = {
				trait = wikid
				has_character_flag = wikid_quest_claim_valyria				
			}			
			any_playable_ruler = { #inform world
				limit = { 
					ai = no
					NOT = { character = ROOT } 
				}
				narrative_event = { id = wikid.52 }
			}
			if = { #aurion loses title
				limit = { c_50012300 = { character = ROOT } }
				activate_title = { status = no title = e_aurions_host }
				e_aurions_host = { destroy_landed_title = THIS }
			}
		}
		#If heir is military commander, they abdicate
		current_heir = {
			if = {
				limit = {
					is_military_command_trigger = yes
					ai = yes
					current_heir = {
						is_liege_of = PREV
						NOT = { character = PREV }
						NOT = { character = ROOT }
					}
				}
				primary_title = { save_event_target_as = military_command }
				abdicate = yes
				event_target:military_command = { remove_claim = PREV }
			}
		}
		#Coronation flags
		if = {
			limit = { 
				religion = the_seven
				OR = {
					has_character_modifier = coronation_request_cooldown
				}
			}
			if = {
				limit = { has_character_flag = flag_antipope_for_coronation }
				current_heir = { set_character_flag = flag_antipope_for_coronation }
			}
			if = {
				limit = { has_character_flag = flag_excommunicated_for_coronation  }
				current_heir = { set_character_flag = flag_excommunicated_for_coronation  }
			}
			if = {
				limit = { has_character_flag = flag_pepin_for_coronation  }
				current_heir = { set_character_flag = flag_pepin_for_coronation  }
			}
		}
		if = {
			limit = { 
				has_character_flag = supposed_to_crown
				OR = {
					is_alive = no
					is_dying = yes
				}	
			}
			any_independent_ruler = { 
				limit = { 
					religion = the_seven
					has_opinion_modifier = { 
						who = ROOT 
						modifier = opinion_supposed_to_crown 
					}
				}
				character_event = { id = HF.20232 }
			}
		}
		if = { #New Vassals must pay homage to a crowned King.
			limit = {
				has_dlc = "Holy Fury"
				religion_group = westerosi_religion
				is_feudal = yes 
				independent = no
				higher_real_tier_than = COUNT #Avoid spamming.
				current_heir = { age = 12 } #At the very least
				liege = { 
					NOT = { character = ROOT }
					NOT = { 
						current_heir = { character = PREV } 
					}
					NOT = { #Prevent same vassal from giving homage multiple times when inheriting new titles within the realm (from siblings and such)
						current_heir = { vassal_of = PREV } 
					}
					religion = the_seven
					is_feudal_monarch_trigger = yes
					has_character_flag = crowned_by_high_septon
				}
			}
			current_heir = { character_event = { id = HF.20394 days = 4 random = 4 } }
		}
		#Has special crown equipped, set trait so dead portrait retains it
		if = {
			limit = {
				OR = {
					is_alive = no
					is_dying = yes
				}
			}
			random_artifact = {
				limit = {	
					is_artifact_equipped = yes
					has_artifact_flag = portrait_headgear			
				}	
				if = {
					limit = { artifact_type = aegon_IV_crown }
					ROOT = { add_trait = dead_aegon_IV_crown }
				}
				else_if = {
					limit = { artifact_type = aegons_crown }
					ROOT = { add_trait = dead_aegons_crown }
				}
				else_if = {
					limit = { artifact_type = jaehaerys_crown }
					ROOT = { add_trait = dead_jaehaerys_crown }
				}
				else_if = {
					limit = { artifact_type = maekars_crown }
					ROOT = { add_trait = dead_maekars_crown }
				}
				else_if = {
					limit = { artifact_type = aegon_III_crown }
					ROOT = { add_trait = dead_aegon_III_crown }
				}
				else_if = {
					limit = { artifact_type = aenys_crown }
					ROOT = { add_trait = dead_aenys_crown }
				}
				else_if = {
					limit = { artifact_type = baelors_crown }
					ROOT = { add_trait = dead_baelors_crown }
				}
				else_if = {
					limit = { artifact_type = joffreys_crown }
					ROOT = { add_trait = dead_joffreys_crown }
				}
				else_if = {
					limit = { artifact_type = daenerys_crown }
					ROOT = { add_trait = dead_daenerys_crown }
				}
				else_if = {
					limit = {
						OR = {
							artifact_type = crown_of_winter
							artifact_type = crown_of_winter_mid
						}
					}
					ROOT = { add_trait = dead_crown_of_winter }
				}
				else_if = {
					limit = { artifact_type = river_kings_crown }
					ROOT = { add_trait = dead_river_kings_crown }
				}
				else_if = {
					limit = { artifact_type = crown_of_shadows }
					ROOT = { add_trait = dead_crown_of_shadows }
				}
				else_if = {
					limit = { artifact_type = ghiscar_crown }
					ROOT = { add_trait = dead_ghiscar_crown }
				}
				else_if = {
					limit = { artifact_type = durrandon_crown }
					ROOT = { add_trait = dead_durrandon_crown }
				}
				else_if = {
					limit = { artifact_type = renlys_crown }
					ROOT = { add_trait = dead_renlys_crown }
				}
				else_if = {
					limit = { artifact_type = stannis_crown }
					ROOT = { add_trait = dead_stannis_crown }
				}
				else_if = {
					limit = { artifact_type = lannister_crown }
					ROOT = { add_trait = dead_lannister_crown }
				}
				else_if = {
					limit = { artifact_type = gardener_crown }
					ROOT = { add_trait = dead_gardener_crown }
				}
				else_if = {
					limit = { artifact_type = falcon_crown }
					ROOT = { add_trait = dead_falcon_crown }
				}
				else_if = {
					limit = { artifact_type = martell_crown }
					ROOT = { add_trait = dead_martell_crown }
				}
				else_if = {
					limit = { 
						OR = {
							artifact_type = driftwood_crown
							artifact_type = driftwood_crown_mid
						}
					}
					ROOT = { add_trait = dead_driftwood_crown }
				}
			}
		}
		###Debt Inheritance
		if = {
			limit = { 
				is_ruler = yes
				OR = {
					has_character_flag = loan_taken
					has_character_flag = offended_moneylenders
					has_character_flag = loan_insurer
					has_character_flag = given_personal_loan
					any_vassal = {
						has_opinion_modifier = {
							who = ROOT
							modifier = opinion_liege_loan
						}
					}
				}
			}
			if = {
				limit = { is_patrician = yes }
				family_palace = { current_heir = { save_event_target_as = debt_inheritor } }
			}	
			else = {
				current_heir = { save_event_target_as = debt_inheritor }
			}
			inherit_debt_effect = yes
		}
		##Bank shares inheritance
		if = {
			limit = {
				is_in_society = yes
				society = { has_flag = bank_society }
				check_variable = { which = shares value = 1 }
				is_ruler = yes
			}
			society = { save_event_target_as = bank_society }
			character_event = { id = bankruptcy.36 }
		}
		#Dynastic Loyalty Maintenance
		if = {
			limit = { has_any_opinion_modifier = opinion_dynasty_loyalist }
			any_dynasty_member = {
				limit = {
					OR = {
						is_child_of = ROOT
						is_grandchild_of = ROOT
						sibling = ROOT
						ROOT = { current_heir = { character = PREVPREV } }
					}
				}
				ROOT = {
					any_opinion_modifier_target = {
						limit = { 
							reverse_has_opinion_modifier = { who = ROOT modifier = opinion_dynasty_loyalist }
							NOT = { reverse_has_opinion_modifier = { who = PREVPREV modifier = opinion_dynasty_loyalist } }
						}
						reverse_opinion = { who = PREVPREV modifier = opinion_dynasty_loyalist }	
						opinion = { who = PREVPREV modifier = opinion_my_loyalist }
					}
				}
				character_event = { id = dynastic_loyalty.4 days = 3 } #maintenance
			}	
		}
		if = {
			limit = { has_character_flag = has_dynasty_loyalist }
			if = {
				limit = { is_patrician = yes }
				family_palace = { current_heir = { save_event_target_as = loyalist_heir } }
			}
			else_if = {
				limit = { current_heir = { dynasty = ROOT } }
				current_heir = { save_event_target_as = loyalist_heir }
			}
			any_opinion_modifier_target = {
				limit = { 
					reverse_has_opinion_modifier = { who = ROOT modifier = opinion_my_loyalist }
					NOT = { reverse_has_opinion_modifier = { who = event_target:loyalist_heir modifier = opinion_my_loyalist } }
				}
				opinion = { who = event_target:loyalist_heir modifier = opinion_dynasty_loyalist }	
				reverse_opinion = { who = event_target:loyalist_heir modifier = opinion_my_loyalist }
				character_event = { id = dynastic_loyalty.4 days = 3 } #maintenance
			}
			event_target:loyalist_heir = {
				set_character_flag = has_dynasty_loyalist
			}
		}
		#Norvosi Bearded priest succession
		if = {
			limit = { 
				government = theocratic_feudal_government
				religion = bearded_priests
			}
			if = {
				limit = { 
					OR = { 
						has_landed_title = d_bearded_priests
						higher_tier_than = DUKE
					}
				}
				character_event = { id = free_cities.222 }
			}
			else = {
				character_event = { id = free_cities.220 }
			}	
		}
		#Traditional heir title capital maintenance
		if = {
			limit = {
				higher_tier_than = DUKE
				is_playable = yes			
				is_feudal_monarch_trigger = yes
				NOT = { government = wildling_feudal_government }		
				demesne_size = 1
				primary_title = { 
					persistent_event_target:heir_title = { 
						holder_scope = {
							ROOT = { current_heir = { character = PREVPREV } }
							lower_tier_than = ROOT
							is_feudal = yes
						}
					}
				}
			}
			capital_holding = { save_event_target_as = predeccesors_capital }
			current_heir = { character_event = { id = 37348 days = 1 } }
		}
		#Add claims to grandchildren whose parents are deceased
		if = {
			limit = {
				is_feudal = yes
				higher_tier_than = BARON
			}
			primary_title = { save_event_target_as = root_primary_title }
			current_heir = { save_event_target_as = root_heir }
			any_child_even_if_dead = {
				limit = { 
					is_alive = no
				}
				any_child_even_if_dead = {
					limit = { 
						is_alive = yes 
						NOT = { has_claim = event_target:root_primary_title }			
						NOT = { character = event_target:root_heir }					
					}
					if = {
						limit = {
							PREV = {
								NOT = { trait = bastard }
								NOT = { trait = disinherited }
							}
							NOT = { trait = bastard }
							NOT = { trait = disinherited }
							OR = {
								event_target:root_primary_title = { has_law = true_cognatic_succession }
								AND = {
									event_target:root_primary_title = { 
										OR = {
											has_law = agnatic_succession 
											has_law = cognatic_succession 
										}	
									}	
									OR = {
										AND = { #son of son
											is_female = no
											PREV = { is_female = no }
										}
										AND = { #if heir is female, male or child of son
											event_target:root_heir = { is_female = yes }
											OR = {
												PREV = { is_female = no }
												is_female = no
											}	
										}
									}
								}	
								AND = {
									event_target:root_primary_title = { 
										OR = {
											has_law = enatic_succession 
											has_law = enatic_cognatic_succession 
										}	
									}	
									OR = {
										AND = { #daughter of daughter
											is_female = yes
											PREV = { is_female = yes }
										}
										AND = { #if heir is male, female or child of daughter
											event_target:root_heir = { is_female = no }
											OR = {
												PREV = { is_female = yes }
												is_female = yes
											}	
										}
									}
								}
							}
						}
						ROOT = {
							any_demesne_title = {
								limit = { tier = ROOT }
								add_claim = PREVPREV
							}
						}							
					}
					else = {
						ROOT = {
							any_demesne_title = {
								limit = { tier = ROOT }
								add_weak_claim = PREVPREV
							}
						}
					}
				}
			}
		}
		remove_trait = high_valyrian #to stop their realm turning into a ruin		
	}
		
	option = {
		name = OK
		# current_heir = {
			# any_demesne_title = {
				# limit = {
					# tier = BARON
					# holding_type = castle
				# }
				# location = { clr_province_flag = inherited_upgrade }
			# }
		# }
	}	
}	
###Universal on_execution event
character_event = {
	id = 45342
	
	is_triggered_only = yes 
	hide_window = yes
	
	immediate = {
		###if execution was unjust family gets vengeance modifier###
		if = { 
			limit = { event_target:executioner = { has_character_flag = unjust_execution } }		
			mother = {
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}			
			}		
			father = {
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}		
			}
			any_child = {
				limit = { 
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}				
			}	
			any_spouse = {
				limit = { 
					NOT = { character = event_target:executioner }
					opinion = { who = ROOT value = -25 }
					NOT = { has_character_flag = murder_opinion_set }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}				
			}
			any_lover = {
				limit = { 
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}				
			}
			any_friend = {
				limit = { 
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}				
			}
			any_dynasty_member = {
				limit = { 
					is_close_relative = ROOT
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
				}	
				opinion = {
					who = event_target:executioner
					modifier = opinion_vengeance
				}				
			}
			any_rival = {
				limit = {
					NOT = { trait = honorable }
					NOT = { has_character_flag = murder_opinion_set }
				}
				opinion = {
					who = event_target:executioner
					modifier = opinion_killed_my_rival
				}
			}
			if = { #Loyal vassals
				limit = { is_playable = yes }
				any_realm_lord = {
					limit = { 
						opinion = { who = ROOT value = 20 }
						NOT = { character = event_target:executioner }
						NOT = { has_character_flag = murder_opinion_set }
					}	
					opinion = {
						who = event_target:executioner
						modifier = opinion_executed_my_liege
						multiplier = 2
						months = 120
					}				
				}
			}
		}
		###if execution was just apply lesser opinion malus to family###
		if = { 
			limit = { event_target:executioner = { NOT = { has_character_flag = unjust_execution } } }
			if = {
				limit = { 
					NOT = { mother = { trait = just } }
				}			
				mother = {
					set_character_flag = murder_opinion_set
					opinion = {
						who = event_target:executioner
						modifier = executed_kin
						months = 120
					}			
				}
			}
			if = {
				limit = { 
					NOT = { father = { trait = just } }
				}			
				father = {
					set_character_flag = murder_opinion_set
					opinion = {
						who = event_target:executioner
						modifier = executed_kin
						months = 120
					}		
				}
			}
			any_child = {
				limit = { 
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
					NOT = { trait = just }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = executed_kin
					months = 120
				}				
			}	
			any_spouse = {
				limit = { 
					NOT = { character = event_target:executioner }
					OR = {
						trait = proud
						trait = familyperson
						opinion = { who = ROOT value = -25 }
					}	
					NOT = { has_character_flag = murder_opinion_set }
					NOT = { trait = just }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = executed_kin
					months = 120
				}					
			}
			any_lover = {
				limit = { 
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = executed_lover
				}				
			}
			any_friend = {
				limit = { 
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
					NOT = { trait = just }
				}	
				set_character_flag = murder_opinion_set
				opinion = {
					who = event_target:executioner
					modifier = executed_friend
				}				
			}
			any_dynasty_member = {
				limit = { 
					is_close_relative = ROOT
					NOT = { character = event_target:executioner }
					NOT = { has_character_flag = murder_opinion_set }
					NOT = { trait = just }
					OR = {
						trait = proud
						trait = familyperson
						opinion = { who = ROOT value = -25 }
					}
				}	
				opinion = {
					who = event_target:executioner
					modifier = executed_kin
					months = 120
				}				
			}
			any_rival = {
				limit = {
					NOT = { trait = honorable }
					NOT = { has_character_flag = murder_opinion_set }
				}
				opinion = {
					who = event_target:executioner
					modifier = opinion_killed_my_rival
				}
			}
			if = { #Loyal vassals
				limit = { is_playable = yes }
				any_realm_lord = {
					limit = { 
						opinion = { who = ROOT value = 20 }
						NOT = { character = event_target:executioner }
						NOT = { has_character_flag = murder_opinion_set }
					}	
					opinion = {
						who = event_target:executioner
						modifier = opinion_executed_my_liege
						months = 120
					}				
				}
			}
		}
		event_target:executioner = {
			ROOT = { save_event_target_as = kinslayer_target } #check for kinslayer
			add_kinslayer_trait_effect = yes			
		}	
		#Executing religious heads
		if = {
			limit = { controls_religion = yes }
			event_target:executioner = {
				if = {
					limit = { has_character_flag = unjust_execution }
					set_character_flag = unjust_execution_religion_head
				}
				character_event = { id = religious.80 days = 2 }
			}
		}
			
		#clear flags
		mother = { clr_character_flag = murder_opinion_set	}
		father = { clr_character_flag = murder_opinion_set }	
		any_child = { clr_character_flag = murder_opinion_set }
		any_lover = { clr_character_flag = murder_opinion_set }
		any_friend = { clr_character_flag = murder_opinion_set }
		any_spouse = { clr_character_flag = murder_opinion_set }
		any_rival = { clr_character_flag = murder_opinion_set }
		event_target:executioner = { 
			clr_character_flag = unjust_execution 
			clear_event_target = executioner
		}
	}
	
	option = {
		name = OK
	}
}	
# Liege decides unclear succession
character_event = { 
	id = 45350
	
	is_triggered_only = yes 
	hide_window = yes
	
	trigger = {
		event_target:succession_title = {
			holder_scope = { character = ROOT }
		}
		FROM = {
			NOT = { culture_group = winter_group }
			NOT = { culture_group = unoccupied_group }
		}
	}
	
	immediate = {
		#Regent chooses
		if = {
			limit = {
				has_regent = yes
				OR = {
					NOT = { age = 16 }
					prisoner = yes
					is_incapable = yes
				}
			}
			regent = { 
				character_event = { id = 45351 }
				break = yes				
			}
		}
		#Else King chooses
		character_event = { id = 45351 }
	}
	
	option = {
		name = OK
	}
}	
character_event = { 
	id = 45351
	
	is_triggered_only = yes 
	show_from_from = yes
	
	desc = {
		text = "EVTDESC45350"
		trigger = { 
			character = FROM 
			FROMFROM = { is_alive = no }
		}
	}
	desc = {
		text = "EVTDESC45350REGENT"
		trigger = { 
			NOT = { character = FROM } 
			FROMFROM = { is_alive = no }
		}
	}
	desc = {
		text = "EVTDESC45350B"
		trigger = { 
			character = FROM 
			FROMFROM = { is_alive = yes }
		}
	}
	desc = {
		text = "EVTDESC45350BREGENT"
		trigger = { 
			NOT = { character = FROM } 
			FROMFROM = { is_alive = yes }
		}
	}
	
	trigger = {
		event_target:succession_title = {
			holder_scope = { character = FROM }
		}
	}
	
	immediate = { #find claimants
		#First try to the best child/descendent of previous holder (possibly bastards/disinherited/wrong gender)
		FROMFROM = {
			if = {
				limit = { has_living_children = yes }
				while = { #Oldest correct gender child
					limit = { 
						ROOT = { NOT = { has_character_flag = oldest_child_found } } 
						any_child = { is_alive = yes NOT = { has_character_flag = child_checked } }
					}
					count = 10
					random_child = { 
						limit = {
							is_alive = yes
							NOT = { has_character_flag = child_checked }
							NOT = { 
								any_sibling = {
									is_alive = yes 
									is_older_than = PREV 
									NOT = { has_character_flag = child_checked }
								} 
							}							
						}
						set_character_flag = child_checked
						if = {
							limit = {
								can_be_granted_unclear_title_trigger = yes
														
								OR = {
									event_target:succession_title = { has_law = true_cognatic_succession }
									AND = {
										is_female = no
										event_target:succession_title = {
											OR = {
												has_law = agnatic_succession
												has_law = cognatic_succession
											}
										}
									}
									AND = {
										is_female = yes
										event_target:succession_title = {
											OR = {
												has_law = enatic_succession
												has_law = enatic_cognatic_succession
											}
										}
									}
								}
							}
							save_event_target_as = title_claimant_1
							set_character_flag = title_claimant
							ROOT = { set_character_flag = oldest_child_found }
						}	
					}
				}
				ROOT = { clr_character_flag = oldest_child_found }
				any_child = { clr_character_flag = child_checked }
				if = {
					limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
					while = { #Oldest child of any gender
						limit = { 
							ROOT = { NOT = { has_character_flag = oldest_child_found } } 
							any_child = { is_alive = yes NOT = { has_character_flag = child_checked } }
						}
						count = 10
						random_child = { 
							limit = {
								is_alive = yes
								NOT = { has_character_flag = child_checked }
								NOT = { 
									any_sibling = {
										is_alive = yes 
										is_older_than = PREV 
										NOT = { has_character_flag = child_checked }
									} 
								}							
							}
							set_character_flag = child_checked
							if = {
								limit = {
									can_be_granted_unclear_title_trigger = yes
								}
								save_event_target_as = title_claimant_1
								set_character_flag = title_claimant
								ROOT = { set_character_flag = oldest_child_found }
							}	
						}
					}
					ROOT = { clr_character_flag = oldest_child_found }
					any_child = { clr_character_flag = child_checked }
				}
			}	
			if = {
				limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
				random_close_relative = { #Random descendent, correct gender
					limit = {
						can_be_granted_unclear_title_trigger = yes
						
						is_descendant_of = PREV
						OR = {
							event_target:succession_title = { has_law = true_cognatic_succession }
							AND = {
								is_female = no
								event_target:succession_title = {
									OR = {
										has_law = agnatic_succession
										has_law = cognatic_succession
									}
								}
							}
							AND = {
								is_female = yes
								event_target:succession_title = {
									OR = {
										has_law = enatic_succession
										has_law = enatic_cognatic_succession
									}
								}
							}
						}
					}
					save_event_target_as = title_claimant_1
					set_character_flag = title_claimant
				}
				if = {
					limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
					random_close_relative = { #Random descendent, any gender
						limit = {
							can_be_granted_unclear_title_trigger = yes
							
							is_descendant_of = PREV
						}
						save_event_target_as = title_claimant_1
						set_character_flag = title_claimant
					}
				}
			}
		}
		#Then find other claimants
		event_target:succession_title = {
			any_claimant = {
				limit = {
					can_be_granted_unclear_title_trigger = yes
					NOT = { has_character_flag = title_claimant }
				}
				add_trait = dead_target
				set_character_flag = potential_claimant
			}
			while = { #Strong claim, correct gender
				limit = { NOT = { event_target:title_claimant_3 = { always = yes } } }
				count = 3
				dead_target = {
					limit = {
						has_character_flag = potential_claimant
						has_strong_claim = event_target:succession_title
						OR = {
							event_target:succession_title = { has_law = true_cognatic_succession }
							AND = {
								is_female = no
								event_target:succession_title = {
									OR = {
										has_law = agnatic_succession
										has_law = cognatic_succession
									}
								}
							}
							AND = {
								is_female = yes
								event_target:succession_title = {
									OR = {
										has_law = enatic_succession
										has_law = enatic_cognatic_succession
									}
								}
							}
						}
					}
					if = {
						limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
						save_event_target_as = title_claimant_1
					}	
					else_if = {
						limit = { NOT = { event_target:title_claimant_2 = { always = yes } } }
						save_event_target_as = title_claimant_2
					}
					else = {
						save_event_target_as = title_claimant_3
					}
					set_character_flag = title_claimant
					remove_trait = dead_target
					clr_character_flag = potential_claimant
				}
			}
			while = { #Weak claim, correct gender
				limit = { NOT = { event_target:title_claimant_3 = { always = yes } } }
				count = 3
				dead_target = {
					limit = {
						has_character_flag = potential_claimant
						has_claim = event_target:succession_title
						OR = {
							event_target:succession_title = { has_law = true_cognatic_succession }
							AND = {
								is_female = no
								event_target:succession_title = {
									OR = {
										has_law = agnatic_succession
										has_law = cognatic_succession
									}
								}
							}
							AND = {
								is_female = yes
								event_target:succession_title = {
									OR = {
										has_law = enatic_succession
										has_law = enatic_cognatic_succession
									}
								}
							}
						}
					}
					if = {
						limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
						save_event_target_as = title_claimant_1
					}	
					else_if = {
						limit = { NOT = { event_target:title_claimant_2 = { always = yes } } }
						save_event_target_as = title_claimant_2
					}
					else = {
						save_event_target_as = title_claimant_3
					}
					set_character_flag = title_claimant
					remove_trait = dead_target
					clr_character_flag = potential_claimant
				}
			}			
			while = { #Strong claim, any gender
				limit = { NOT = { event_target:title_claimant_3 = { always = yes } } }
				count = 3
				dead_target = {
					limit = {
						has_character_flag = potential_claimant
						has_strong_claim = event_target:succession_title
					}
					if = {
						limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
						save_event_target_as = title_claimant_1
					}	
					else_if = {
						limit = { NOT = { event_target:title_claimant_2 = { always = yes } } }
						save_event_target_as = title_claimant_2
					}
					else = {
						save_event_target_as = title_claimant_3
					}
					set_character_flag = title_claimant
					remove_trait = dead_target
					clr_character_flag = potential_claimant
				}
			}	
			while = { #Weak claim, any gender
				limit = { NOT = { event_target:title_claimant_3 = { always = yes } } }
				count = 3
				dead_target = {
					limit = {
						has_character_flag = potential_claimant
						has_claim = event_target:succession_title
					}
					if = {
						limit = { NOT = { event_target:title_claimant_1 = { always = yes } } }
						save_event_target_as = title_claimant_1
					}	
					else_if = {
						limit = { NOT = { event_target:title_claimant_2 = { always = yes } } }
						save_event_target_as = title_claimant_2
					}
					else = {
						save_event_target_as = title_claimant_3
					}
					set_character_flag = title_claimant
					remove_trait = dead_target
					clr_character_flag = potential_claimant
				}
			}
			any_claimant = {
				remove_trait = dead_target
				clr_character_flag = potential_claimant
			}
		}
		#Spouse
		FROMFROM = { 
			if = {
				limit = { is_alive = no }
				spouse = { 
					if = {
						limit = { 
							is_alive = yes
							can_be_granted_unclear_title_trigger = yes
							NOT = { has_character_flag = title_claimant }
						}
						save_event_target_as = spouse_claimant
					}	
				} 
				if = { #if no living spouse, children of dead spouse (i.e. step children)
					limit = { NOT = { event_target:spouse_claimant = { always = yes } } }
					random_spouse_even_if_dead = {
						limit = {
							is_alive = no
							any_child = {
								is_alive = yes
								can_be_granted_unclear_title_trigger = yes
														
								OR = {
									event_target:succession_title = { has_law = true_cognatic_succession }
									AND = {
										is_female = no
										event_target:succession_title = {
											OR = {
												has_law = agnatic_succession
												has_law = cognatic_succession
											}
										}
									}
									AND = {
										is_female = yes
										event_target:succession_title = {
											OR = {
												has_law = enatic_succession
												has_law = enatic_cognatic_succession
											}
										}
									}
								}
							}
						}
						random_child = {
							limit = {
								is_alive = yes
								can_be_granted_unclear_title_trigger = yes
														
								OR = {
									event_target:succession_title = { has_law = true_cognatic_succession }
									AND = {
										is_female = no
										event_target:succession_title = {
											OR = {
												has_law = agnatic_succession
												has_law = cognatic_succession
											}
										}
									}
									AND = {
										is_female = yes
										event_target:succession_title = {
											OR = {
												has_law = enatic_succession
												has_law = enatic_cognatic_succession
											}
										}
									}
								}
							}
							save_event_target_as = step_child_claimant
						}	
					}
				}
			}	
		}
		#Wards may supercede weak claimants for player
		if = {
			limit = {
				ai = no
				OR = {
					event_target:title_claimant_2 = { has_strong_claim = event_target:succession_title }
					event_target:title_claimant_3 = { has_strong_claim = event_target:succession_title }
					AND = {
						event_target:ward_claimant = {
							OR = {
								is_ill = yes
								NOT = { age = 12 }
								is_incapable = yes
							}
						}
						event_target:title_claimant_2 = { always = yes }
						event_target:title_claimant_3 = { always = yes }
					}
				}
			}
			clear_event_target = ward_claimant
		}
	}
	
	option = {
		name = "EVTOPTA45350" #Me
		ai_chance = {
			factor = 50
			
			modifier = {
				factor = 0
				OR = {
					trait = just
					trait = honorable
				}
				FROM = { NOT = { has_character_flag = title_claimant } }
				OR = {
					event_target:spouse_claimant = { always = yes }
					event_target:title_claimant_1 = { always = yes }
					event_target:title_claimant_2 = { always = yes }
					event_target:title_claimant_3 = { always = yes }
				}
			}
			modifier = {
				factor = 0.1
				FROM = { NOT = { has_character_flag = title_claimant } }
				OR = {
					event_target:spouse_claimant = { always = yes }
					event_target:title_claimant_1 = { always = yes }
					event_target:title_claimant_2 = { always = yes }
					event_target:title_claimant_3 = { always = yes }
				}
			}
			modifier = {
				factor = 2
				trait = greedy
				character = FROM
			}
			modifier = {
				factor = 2
				trait = ruthless
				character = FROM
			}
			modifier = {
				factor = 2
				trait = ambitious
				character = FROM
			}
			modifier = {
				factor = 2
				trait = arbitrary
				character = FROM
			}
			modifier = {
				factor = 0.5
				trait = content
				character = FROM
			}
			modifier = {
				factor = 0.5
				trait = charitable
				character = FROM
			}
		}
		FROM = {
			if = {
				limit = {
					NOT = { has_character_flag = title_claimant }
					OR = {
						event_target:spouse_claimant = { always = yes }
						event_target:title_claimant_1 = { NOT = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_traitor } } }
						event_target:title_claimant_2 = { NOT = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_traitor } } }
						event_target:title_claimant_3 = { NOT = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_traitor } } }
					}
				}
				change_variable = { which = "tyrant" value = 5 } 
				hidden_tooltip = { character_event = { id = maintenance.1 } }#tyrant trait
				ROOT = { prestige = -100 }
			}
			clr_character_flag = title_claimant
		}	
		event_target:succession_title = { #Check for debts
			if = {
				limit = { 
					OR = {
						has_flag = loan_taken 
						has_flag = offended_moneylenders 
						has_flag = loan_insurer 
						has_flag = given_personal_loan						
					}	
				} 
				custom_tooltip = {
					text = TOOLTIP45350DEBTS
				}
			}
			save_event_target_as = debt_capital
			ROOT = { save_event_target_as = debt_inheritor }
			hidden_tooltip = { inherit_debt_effect = yes }
		}
		event_target:spouse_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } }
		event_target:title_claimant_1 = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } clr_character_flag = title_claimant }
		event_target:title_claimant_2 = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } clr_character_flag = title_claimant }
		event_target:title_claimant_3 = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } clr_character_flag = title_claimant }	
		hidden_tooltip = {
			liege = {
				any_courtier = { #mark courtiers so they can be returned to new holder
					limit = {
						is_ruler = no
						liege = { character = PREVPREV }
						has_character_flag = courtier_@FROMFROM
					}
					clr_character_flag = courtier_@FROMFROM
					move_character = ROOT
				}
			}	
			any_courtier = { #mark courtiers so they can be returned to new holder
				limit = {
					is_ruler = no
					liege = { character = PREVPREV }
					has_character_flag = courtier_@FROMFROM
				}
				clr_character_flag = courtier_@FROMFROM
			}
		}
	}
	option = {
		name = "EVTOPTB45350" #spouse
		trigger = {
			event_target:spouse_claimant = { always = yes }
		}
		ai_chance = {
			factor = 25
			
			modifier = {
				factor = 4
				event_target:spouse_claimant = { character = ROOT }
			}
			modifier = {
				factor = 4
				trait = ambitious
				event_target:spouse_claimant = { character = ROOT }
			}
			modifier = {
				factor = 0.4
				trait = content
				event_target:spouse_claimant = { character = ROOT }
			}
								
			modifier = {
				factor = 0.5
				event_target:spouse_claimant = { dynasty = 0 }
			}
			modifier = {
				factor = 0.25
				event_target:spouse_claimant = { 
					is_female = yes
					age = 38
				}
			}
			modifier = { #has an heir incoming
				factor = 5
				event_target:spouse_claimant = { 
					is_pregnant = yes
					father_of_unborn = { character = FROMFROM }
				}
			}
			modifier = {
				factor = 1.33
				event_target:spouse_claimant = { is_ruler = yes }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { is_ruler = yes vassal_of = FROM }
			}	
			modifier = {
				factor = 0.5
				event_target:spouse_claimant = { prisoner = yes }
			}
			modifier = {
				factor = 0.2
				event_target:spouse_claimant = { trait = incapable }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { dynasty = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 2
				trait = familyperson
				event_target:spouse_claimant = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { is_friend = ROOT }
			}
			modifier = {
				factor = 0.1
				event_target:spouse_claimant = { is_rival = ROOT }
			}
			
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { reverse_opinion = { who = ROOT value = 75 } }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.5
				event_target:spouse_claimant = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.66
				event_target:spouse_claimant = { NOT = { reverse_opinion = { who = ROOT value = -24 } } }
			}
			modifier = {
				factor = 0.66
				event_target:spouse_claimant = { NOT = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.66
				event_target:spouse_claimant = { NOT = { reverse_opinion = { who = ROOT value = -74 } } }
			}
			modifier = {
				factor = 0.66
				event_target:spouse_claimant = { NOT = { reverse_opinion = { who = ROOT value = -99 } } }
			}
		}
		event_target:spouse_claimant = {
			custom_tooltip = { text = TOOLTIP45350INHERIT }
		}
		if = {
			limit = { character = FROM }		
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						FROMFROM = { has_landed_title = PREV }
					}
					event_target:spouse_claimant = { gain_title = PREV }
				}
			}	
		}
		if = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				liege = {
					any_demesne_title = {
						limit = {
							FROMFROM = { has_landed_title = PREV }
						}
						event_target:spouse_claimant = { gain_title = PREV }
					}	
				}
			}	
		}		
		event_target:spouse_claimant = {
			opinion = { who = ROOT modifier = opinion_chosen_inheritor } 
			recalc_succession = yes
			set_character_flag = widow_land_grant
			hidden_tooltip = { letter_event = { id = 45352 } }
		}
		
		event_target:title_claimant_1 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_2 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_3 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
	}	
	option = {
		name = "EVTOPTC45350" #Claimant 1
		trigger = {
			event_target:title_claimant_1 = { always = yes }
		}
		ai_chance = {
			factor = 25
			
			modifier = {
				factor = 4
				event_target:title_claimant_1 = { character = ROOT }
			}
			modifier = {
				factor = 4
				trait = ambitious
				event_target:title_claimant_1 = { character = ROOT }
			}
			modifier = {
				factor = 0.4
				trait = content
				event_target:title_claimant_1 = { character = ROOT }
			}
			
			modifier = {
				factor = 1.33
				event_target:title_claimant_1 = { is_ruler = yes }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { is_ruler = yes vassal_of = FROM }
			}
			modifier = {
				factor = 0.5
				event_target:title_claimant_1 = { prisoner = yes }
			}
			modifier = {
				factor = 0.2
				event_target:title_claimant_1 = { trait = incapable }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { dynasty = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 2
				trait = familyperson
				event_target:title_claimant_1 = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { is_friend = ROOT }
			}
			modifier = {
				factor = 0.1
				event_target:title_claimant_1 = { is_rival = ROOT }
			}
			
			modifier = {
				factor = 0.25
				NOT = { culture = high_valyrian }
				event_target:title_claimant_1 = { NOT = { culture_group = ROOT } }
			}
			modifier = {
				factor = 0.25
				NOT = { culture = high_valyrian }
				event_target:title_claimant_1 = { 
					NOT = { culture = ROOT } 
					NOT = { is_liege_or_above = ROOT_FROM }
				}
			}
			modifier = {
				factor = 0.5
				NOT = { trait = cynical }
				event_target:title_claimant_1 = { NOT = { religion = ROOT } }
			}
			modifier = {
				factor = 0.1
				trait = zealous
				event_target:title_claimant_1 = { NOT = { religion = ROOT } }
			}
			
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { reverse_opinion = { who = ROOT value = 75 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_1 = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_1 = { NOT = { reverse_opinion = { who = ROOT value = -24 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_1 = { NOT = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_1 = { NOT = { reverse_opinion = { who = ROOT value = -74 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_1 = { NOT = { reverse_opinion = { who = ROOT value = -99 } } }
			}
		}
		event_target:title_claimant_1 = {
			custom_tooltip = { text = TOOLTIP45350INHERIT }
		}
		if = {
			limit = { character = FROM }		
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						FROMFROM = { has_landed_title = PREV }
					}
					event_target:title_claimant_1 = { gain_title = PREV }
				}
			}	
		}
		if = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				liege = {
					any_demesne_title = {
						limit = {
							FROMFROM = { has_landed_title = PREV }
						}
						event_target:title_claimant_1 = { gain_title = PREV }
					}	
				}
			}	
		}	
		event_target:title_claimant_1 = {
			opinion = { who = ROOT modifier = opinion_chosen_inheritor } 
			hidden_tooltip = { letter_event = { id = 45352 } }
		}
		
		event_target:spouse_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_2 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_3 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:step_child_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
	}
	option = {
		name = "EVTOPTF45350" #Ward
		trigger = {
			event_target:ward_claimant = { 
				NOR = {
					character = event_target:spouse_claimant
					character = event_target:title_claimant_1
				}		
			}
		}
		ai_chance = {
			factor = 10
			
			modifier = {
				factor = 2.5
				event_target:ward_claimant = { has_claim = event_target:succession_title }
			}
			modifier = {
				factor = 1.33
				event_target:ward_claimant = { is_ruler = yes }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { is_ruler = yes vassal_of = FROM }
			}
			modifier = {
				factor = 0.5
				event_target:ward_claimant = { prisoner = yes }
			}
			modifier = {
				factor = 0.2
				event_target:ward_claimant = { trait = incapable }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { dynasty = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 2
				trait = familyperson
				event_target:ward_claimant = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { is_friend = ROOT }
			}
			modifier = {
				factor = 0.1
				event_target:ward_claimant = { is_rival = ROOT }
			}
			
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { reverse_opinion = { who = ROOT value = 75 } }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.5
				event_target:ward_claimant = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.66
				event_target:ward_claimant = { NOT = { reverse_opinion = { who = ROOT value = -24 } } }
			}
			modifier = {
				factor = 0.66
				event_target:ward_claimant = { NOT = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.66
				event_target:ward_claimant = { NOT = { reverse_opinion = { who = ROOT value = -74 } } }
			}
			modifier = {
				factor = 0.66
				event_target:ward_claimant = { NOT = { reverse_opinion = { who = ROOT value = -99 } } }
			}
		}
		event_target:ward_claimant = {
			custom_tooltip = { text = TOOLTIP45350INHERIT }
		}
		if = {
			limit = { character = FROM }		
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						FROMFROM = { has_landed_title = PREV }
					}
					event_target:ward_claimant = { gain_title = PREV }
				}
			}	
		}
		if = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				liege = {
					any_demesne_title = {
						limit = {
							FROMFROM = { has_landed_title = PREV }
						}
						event_target:ward_claimant = { gain_title = PREV }
					}	
				}
			}	
		}		
		event_target:ward_claimant = {
			opinion = { who = ROOT modifier = opinion_chosen_inheritor } 
			hidden_tooltip = { letter_event = { id = 45352 } }
		}
		
		event_target:spouse_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } }
		event_target:title_claimant_1 = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } }
		event_target:title_claimant_2 = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } }
		event_target:title_claimant_3 = { opinion = { who = ROOT modifier = opinion_denied_inheritance multiplier = 2 } }
		event_target:step_child_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }			
	}
	option = {
		name = "EVTOPTD45350" #Claimant 2
		trigger = {
			event_target:title_claimant_2 = { NOT = { character = event_target:ward_claimant } }
		}
		ai_chance = {
			factor = 25
			
			modifier = {
				factor = 4
				event_target:title_claimant_2 = { character = ROOT }
			}
			modifier = {
				factor = 4
				trait = ambitious
				event_target:title_claimant_2 = { character = ROOT }
			}
			modifier = {
				factor = 0.4
				trait = content
				event_target:title_claimant_2 = { character = ROOT }
			}
			
			modifier = {
				factor = 1.33
				event_target:title_claimant_2 = { is_ruler = yes }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { is_ruler = yes vassal_of = FROM }
			}
			modifier = {
				factor = 0.5
				event_target:title_claimant_2 = { prisoner = yes }
			}
			modifier = {
				factor = 0.2
				event_target:title_claimant_2 = { trait = incapable }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { dynasty = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 2
				trait = familyperson
				event_target:title_claimant_2 = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { is_friend = ROOT }
			}
			modifier = {
				factor = 0.1
				event_target:title_claimant_2 = { is_rival = ROOT }
			}
			
			modifier = {
				factor = 0.25
				NOT = { culture = high_valyrian }
				event_target:title_claimant_2 = { NOT = { culture_group = ROOT } }
			}
			modifier = {
				factor = 0.25
				NOT = { culture = high_valyrian }
				event_target:title_claimant_2 = { 
					NOT = { culture = ROOT } 
					NOT = { is_liege_or_above = ROOT_FROM }
				}
			}
			modifier = {
				factor = 0.5
				NOT = { trait = cynical }
				event_target:title_claimant_2 = { NOT = { religion = ROOT } }
			}
			modifier = {
				factor = 0.1
				trait = zealous
				event_target:title_claimant_2 = { NOT = { religion = ROOT } }
			}
			
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { reverse_opinion = { who = ROOT value = 75 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_2 = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_2 = { NOT = { reverse_opinion = { who = ROOT value = -24 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_2 = { NOT = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_2 = { NOT = { reverse_opinion = { who = ROOT value = -74 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_2 = { NOT = { reverse_opinion = { who = ROOT value = -99 } } }
			}
		}
		event_target:title_claimant_2 = {
			custom_tooltip = { text = TOOLTIP45350INHERIT }
		}
		if = {
			limit = { character = FROM }		
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						FROMFROM = { has_landed_title = PREV }
					}
					event_target:title_claimant_2 = { gain_title = PREV }
				}
			}	
		}
		if = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				liege = {
					any_demesne_title = {
						limit = {
							FROMFROM = { has_landed_title = PREV }
						}
						event_target:title_claimant_2 = { gain_title = PREV }
					}	
				}
			}	
		}		
		event_target:title_claimant_2 = {
			opinion = { who = ROOT modifier = opinion_chosen_inheritor } 
			hidden_tooltip = { letter_event = { id = 45352 } }
		}
		
		event_target:spouse_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_1 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_3 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
		event_target:step_child_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
	}
	option = {
		name = "EVTOPTE45350" #Claimant 3
		trigger = {
			event_target:title_claimant_3 = { NOT = { character = event_target:ward_claimant } }
		}
		ai_chance = {
			factor = 25
			
			modifier = {
				factor = 4
				event_target:title_claimant_3 = { character = ROOT }
			}
			modifier = {
				factor = 4
				trait = ambitious
				event_target:title_claimant_3 = { character = ROOT }
			}
			modifier = {
				factor = 0.4
				trait = content
				event_target:title_claimant_3 = { character = ROOT }
			}
			
			modifier = {
				factor = 1.33
				event_target:title_claimant_3 = { is_ruler = yes }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { is_ruler = yes vassal_of = FROM }
			}
			modifier = {
				factor = 0.5
				event_target:title_claimant_3 = { prisoner = yes }
			}
			modifier = {
				factor = 0.2
				event_target:title_claimant_3 = { trait = incapable }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { dynasty = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 2
				trait = familyperson
				event_target:title_claimant_3 = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { is_friend = ROOT }
			}
			modifier = {
				factor = 0.1
				event_target:title_claimant_3 = { is_rival = ROOT }
			}
			
			modifier = {
				factor = 0.25
				NOT = { culture = high_valyrian }
				event_target:title_claimant_3 = { NOT = { culture_group = ROOT } }
			}
			modifier = {
				factor = 0.25
				NOT = { culture = high_valyrian }
				event_target:title_claimant_3 = { 
					NOT = { culture = ROOT } 
					NOT = { is_liege_or_above = ROOT_FROM }
				}
			}
			modifier = {
				factor = 0.5
				NOT = { trait = cynical }
				event_target:title_claimant_3 = { NOT = { religion = ROOT } }
			}
			modifier = {
				factor = 0.1
				trait = zealous
				event_target:title_claimant_3 = { NOT = { religion = ROOT } }
			}
			
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { reverse_opinion = { who = ROOT value = 75 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.5
				event_target:title_claimant_3 = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_3 = { NOT = { reverse_opinion = { who = ROOT value = -24 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_3 = { NOT = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_3 = { NOT = { reverse_opinion = { who = ROOT value = -74 } } }
			}
			modifier = {
				factor = 0.66
				event_target:title_claimant_3 = { NOT = { reverse_opinion = { who = ROOT value = -99 } } }
			}
		}
		event_target:title_claimant_3 = {
			custom_tooltip = { text = TOOLTIP45350INHERIT }
		}
		if = {
			limit = { character = FROM }		
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						FROMFROM = { has_landed_title = PREV }
					}
					event_target:title_claimant_3 = { gain_title = PREV }
				}
			}	
		}
		if = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				liege = {
					any_demesne_title = {
						limit = {
							FROMFROM = { has_landed_title = PREV }
						}
						event_target:title_claimant_3 = { gain_title = PREV }
					}	
				}
			}	
		}	
		event_target:title_claimant_3 = {
			opinion = { who = ROOT modifier = opinion_chosen_inheritor } 
			hidden_tooltip = { letter_event = { id = 45352 } }
		}
		
		event_target:spouse_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_1 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_2 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
		event_target:step_child_claimant = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
	}
	option = {
		name = "EVTOPTH45350" #step child
		trigger = {
			event_target:step_child_claimant = { always = yes }
		}
		ai_chance = {
			factor = 10
			
			modifier = {
				factor = 4
				event_target:step_child_claimant = { character = ROOT }
			}
			modifier = {
				factor = 4
				trait = ambitious
				event_target:step_child_claimant = { character = ROOT }
			}
			modifier = {
				factor = 0.4
				trait = content
				event_target:step_child_claimant = { character = ROOT }
			}
								
			modifier = {
				factor = 0.5
				event_target:step_child_claimant = { dynasty = 0 }
			}
			modifier = {
				factor = 0.25
				event_target:step_child_claimant = { 
					is_female = yes
					age = 38
				}
			}
			modifier = {
				factor = 1.33
				event_target:step_child_claimant = { is_ruler = yes }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { is_ruler = yes vassal_of = FROM }
			}	
			modifier = {
				factor = 0.5
				event_target:step_child_claimant = { prisoner = yes }
			}
			modifier = {
				factor = 0.2
				event_target:step_child_claimant = { trait = incapable }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { dynasty = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 2
				trait = familyperson
				event_target:step_child_claimant = { is_close_relative = ROOT }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { is_friend = ROOT }
			}
			modifier = {
				factor = 0.1
				event_target:step_child_claimant = { is_rival = ROOT }
			}
			
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { reverse_opinion = { who = ROOT value = 75 } }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.5
				event_target:step_child_claimant = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.66
				event_target:step_child_claimant = { NOT = { reverse_opinion = { who = ROOT value = -24 } } }
			}
			modifier = {
				factor = 0.66
				event_target:step_child_claimant = { NOT = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.66
				event_target:step_child_claimant = { NOT = { reverse_opinion = { who = ROOT value = -74 } } }
			}
			modifier = {
				factor = 0.66
				event_target:step_child_claimant = { NOT = { reverse_opinion = { who = ROOT value = -99 } } }
			}
		}
		event_target:step_child_claimant = {
			custom_tooltip = { text = TOOLTIP45350INHERIT }
		}
		if = {
			limit = { character = FROM }		
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						FROMFROM = { has_landed_title = PREV }
					}
					event_target:step_child_claimant = { gain_title = PREV }
				}
			}	
		}
		if = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				liege = {
					any_demesne_title = {
						limit = {
							FROMFROM = { has_landed_title = PREV }
						}
						event_target:step_child_claimant = { gain_title = PREV }
					}	
				}
			}	
		}		
		event_target:step_child_claimant = {
			opinion = { who = ROOT modifier = opinion_chosen_inheritor } 
			recalc_succession = yes
			hidden_tooltip = { letter_event = { id = 45352 } }
		}
		
		event_target:title_claimant_1 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_2 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }
		event_target:title_claimant_3 = { opinion = { who = ROOT modifier = opinion_denied_inheritance } }	
	}	
	after = {
		FROM = { clr_character_flag = title_claimant }
		event_target:title_claimant_1 = { clr_character_flag = title_claimant }
		event_target:title_claimant_2 = { clr_character_flag = title_claimant }
		event_target:title_claimant_3 = { clr_character_flag = title_claimant }		
	}
}
#Inform given title
letter_event = {
	id = 45352
	desc = "EVTDESC45352"
	
	is_triggered_only = yes
	
	immediate = {
		FROMFROM = {
			any_realm_lord = {
				limit = { 
					ai = no 
					NOT = { character = ROOT }
				}
				letter_event = { id = 45353 }
			}
			if = {
				limit = {
					has_regent = yes
					OR = {
						NOT = { age = 16 }
						prisoner = yes
						is_incapable = yes
					}
				}
				character_event = { id = 45354 }
			}		
		}
		hidden_tooltip = { #Move old courtiers back
			clr_character_flag = courtier_@FROMFROMFROM
			liege = {
				any_courtier = {
					limit = {
						is_ruler = no
						liege = { character = PREVPREV }
						has_character_flag = courtier_@FROMFROMFROM
					}
					move_character = ROOT
					clr_character_flag = courtier_@FROMFROMFROM
				}
			}	
			mother = {
				if = {
					limit = {
						is_ruler = no
						has_character_flag = courtier_@FROMFROMFROM
					}
					move_character = ROOT
					clr_character_flag = courtier_@FROMFROMFROM
				}
			}
			father = {
				if = {
					limit = {
						is_ruler = no
						has_character_flag = courtier_@FROMFROMFROM
					}
					move_character = ROOT
					clr_character_flag = courtier_@FROMFROMFROM
				}
			}
			any_sibling = {
				if = {
					limit = {
						is_ruler = no
						has_character_flag = courtier_@FROMFROMFROM
					}
					move_character = ROOT
					clr_character_flag = courtier_@FROMFROMFROM
				}
			}
			any_child = {
				if = {
					limit = {
						is_ruler = no
						has_character_flag = courtier_@FROMFROMFROM
					}
					move_character = ROOT
					clr_character_flag = courtier_@FROMFROMFROM
				}
			}
		}
	}
	
	option = {
		name = "EVTOPTA45352"
		FROMFROMFROM = { tooltip = { show_portrait = yes } }
		FROMFROM = { tooltip = { show_portrait = yes } }
		event_target:succession_title = { #Check for debts
			if = {
				limit = { 
					OR = {
						has_flag = loan_taken 
						has_flag = offended_moneylenders 
						has_flag = loan_insurer 
						has_flag = given_personal_loan						
					}	
				} 
				custom_tooltip = {
					text = TOOLTIP45350DEBTS
				}
			}
			save_event_target_as = debt_capital
			ROOT = { save_event_target_as = debt_inheritor }
			hidden_tooltip = { inherit_debt_effect = yes }
		}
		if = {
			limit = { 
				trait = bastard 
				FROMFROM = { can_legitimise_bastards_trigger = yes }
			}
			character_event = { id = bastard.999 } #legitimised	
		}	
		if = {
			limit = { trait = disinherited }
			remove_trait = disinherited
		}
		#Dynastic Stability
		if = {
			limit = {	
				is_patrician = no
				NOT = { trait = bastard }
				NOT = { culture = dothraki }
				NOT = { culture = jogos_nhai }
				
				event_target:succession_title = { higher_tier_than = BARON }
				has_game_rule = { name = dynastic_stability value = on }	
				OR = {
					father_even_if_dead = { always = yes }
					mother_even_if_dead = { always = yes }
				}
			}
			event_target:succession_title = { save_event_target_as = dynastic_stability_title }
			FROMFROMFROM = { save_event_target_as = dynastic_stability_old_holder }
			character_event = { id = dynastic_stability.2 days = 5 } 
		}		
		recalc_succession = yes
		if = { #If widow grant, may revert to appointment succession
			limit = { has_character_flag = widow_land_grant }
			if = {
				limit = {
					ai = yes
					current_heir = { NOT = { is_descendant_of = ROOT } }
					NOT = { 
						any_demesne_title = {
							NOT = { title = event_target:succession_title }
							NOT = { lower_tier_than = event_target:succession_title } 
						} 
					}
				}
				event_target:succession_title = { succession = appointment }
				recalc_succession = yes
			}
			clr_character_flag = widow_land_grant
		}
	}
}
letter_event = { #inform realm
	id = 45353
	desc = "EVTDESC45353"
	
	is_triggered_only = yes
	show_from_from = yes

	option = {
		name = OK
		FROMFROMFROMFROM = { tooltip = { show_portrait = yes } }
		FROMFROMFROM = { tooltip = { show_portrait = yes } }
		FROM = { tooltip = { show_portrait = yes } }
	}
}
character_event = { #inform liege
	id = 45354
	desc = "EVTDESC45354"
	
	is_triggered_only = yes

	option = {
		name = OK
		FROM = { opinion = { who = ROOT modifier = opinion_chosen_inheritor multiplier = 0.5 } }
		FROMFROMFROMFROM = { tooltip = { show_portrait = yes } }
		FROMFROM = { tooltip = { show_portrait = yes } }
	}
}

# On-action event: Check for tyranny (on_tyranny_gained_tyrant_only)
character_event = {
	id = 45360
	
	is_triggered_only = yes 
	hide_window = yes
	
	option = {
		name = OK		
		if = {
			limit = { NOT = { has_character_flag = no_tyranny } }
			change_variable = { which = "tyrant" value = 10 } 
			if = {
				limit = { has_character_flag = extra_tyranny_10 }
				change_variable = { which = "tyrant" value = 10 } 
				clr_character_flag = extra_tyranny_10
			}	
			if = {
				limit = { has_character_flag = extra_fear_5 }
				if = {
					limit = { higher_tier_than = COUNT }
					change_variable = { which = fear_actions value = 5 } 
					character_event = { id = faction_event_new.90 } #fear modifier
				}
				clr_character_flag = extra_fear_5
			}
			character_event = { id = maintenance.1 } #Tyrant trait
			character_event = { id = maintenance.9 } #Remove Just
		}
		else = {
			clr_character_flag = no_tyranny
		}	
		hidden_tooltip = {
			any_courtier = {
				remove_opinion = {
					who = ROOT
					modifier = opinion_tyrant
				}
			}		
			top_liege = {			
				any_realm_character = {
					limit = { has_opinion_modifier = { who = ROOT modifier = opinion_tyrant } }
					remove_opinion = {
						who = ROOT
						modifier = opinion_tyrant
					}
				}
			}
		}	
	}
}
#Vassal has deposed liege, can choose successor
character_event = {
	id = 45370
	desc = "EVTDESC45370"
	
	is_triggered_only = yes
	show_from_from = yes
	
	immediate = {
		event_target:depose_liege_target = {
			if = { #Triarch for life, revert to default law
				limit = { 
					primary_title = { has_law = republic_triarch_for_life } 
					ROOT = { NOT = { has_character_flag = title_triarch_for_life } }
				}
				family_palace = {
					current_heir = {
						if = { 
							limit = {
								has_character_flag = title_triarch_for_life
							}
							clr_character_flag = title_triarch_for_life
							remove_title = title_triarch_for_life
						}
					}				
				}	
				primary_title = { add_law = republic_law_0 }	
			}
			# mark titles for claims
			primary_title = {
				set_title_flag = depose_liege_claims
			}
			any_demesne_title = {
				limit = { tier = event_target:depose_liege_target }
				set_title_flag = depose_liege_claims
			}
			
			#determine who would assume Lord Protector title in great council
			clear_event_target = great_council_leader
			if = {
				limit = {
					higher_tier_than = DUKE
					government = feudal_government
					independent = yes
					OR = {
						tier = EMPEROR
						NOT = { primary_title = { check_variable = { which = "de_facto_empire" value = 1 } } }
					}
					OR = {
						NAND = { #Can't do this with depose liege faction
							has_character_flag = depose_liege_target 
							current_heir = { has_character_flag = depose_liege_heir } 
						}
						AND = {
							current_heir = { #unless the realm would fall into interregnum
								NOT = { dynasty = PREV }
								NOT = { is_close_relative = PREV }
								vassal_of = PREV	
							}
						}
					}	
				}
				if = { #Primary attacker has priority if eligible
					limit = {
						ROOT = {
							NOR = {
								is_incapable = yes
								is_adult = no
								prisoner = yes
							}
						}
					}
					ROOT = { save_event_target_as = great_council_leader }
				}
				else = {
					random_vassal = {
						limit = {
							NOR = {
								is_incapable = yes
								is_adult = no
								prisoner = yes
							}
							is_feudal = yes
							NOT = { tier = BARON }
							NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_at_war } }
							NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_civil_war_enemy } }
							NOT = { has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_with_king } }
							NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_traitor_AGOT } }
							NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_traitor } }
						}
						preferred_limit = {
							OR = {
								reverse_has_opinion_modifier = { who = ROOT modifier = opinion_joined_cause }
								has_opinion_modifier = { who = ROOT modifier = opinion_with_rebel_leader }
								reverse_has_opinion_modifier = { who = ROOT modifier = joined_my_war }
							}
						}
						preferred_limit = {
							OR = {
								has_non_aggression_pact_with = ROOT
								reverse_has_opinion_modifier = { who = event_target:depose_liege_target modifier = declared_war }
								reverse_has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_traitor }
								reverse_has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_traitor_AGOT }
							}
						}
						preferred_limit = {
							among_most_powerful_vassals = 3
						}
						save_event_target_as = great_council_leader
					}
				}
			}	
		}	
	}
	
	option = {
		name = { #If this was a faction war and the same heir is still around, it must be that heir
			text = "EVTOPTA45370" #Current Heir
			trigger = {
				event_target:depose_liege_target = {
					NAND = {
						has_character_flag = depose_liege_target 
						current_heir = { has_character_flag = depose_liege_heir } 
					}
				}	
			}
		}	
		name = {
			text = "EVTOPTA45370B" #Current Heir (Depose Liege Faction)
			trigger = {
				event_target:depose_liege_target = {
					has_character_flag = depose_liege_target 
					current_heir = { has_character_flag = depose_liege_heir } 
				}	
			}
		}
		trigger = {
			event_target:depose_liege_target = {
				current_heir = {
					OR = {
						NOT = { has_character_modifier = deposed_AGOT } 
						character = ROOT
						has_character_flag = depose_liege_heir
					}	
				}
				#Option not available if realm would fall into interregnum anyway
				NAND = {
					higher_tier_than = DUKE
					government = feudal_government
					independent = yes
					OR = {
						tier = EMPEROR
						NOT = { primary_title = { check_variable = { which = "de_facto_empire" value = 1 } } }
					}
					current_heir = {
						NOT = { dynasty = PREV }
						NOT = { is_close_relative = PREV }
						vassal_of = PREV	
					}
				}	
			}
		}
		ai_chance = {
			factor = 50
			
			modifier = {
				factor = 0
				event_target:depose_liege_target = { 
					primary_title = { ROOT = { has_claim = PREV } }
					NOT = { current_heir = { character = ROOT } }
					NAND = { #Can't do this with depose liege faction
						has_character_flag = depose_liege_target 
						current_heir = { has_character_flag = depose_liege_heir } 
					}
				}
				OR = {
					trait = ambitious
					trait = just
					trait = greedy
					trait = ruthless
					trait = proud
				}
				NOT = { trait = content }
			}
			modifier = {
				factor = 100
				trait = ambitious
				event_target:depose_liege_target = { current_heir = { character = ROOT }	 }
			}
			modifier = {
				factor = 5
				event_target:depose_liege_target = { current_heir = { character = ROOT }	 }
			}
			modifier = {
				factor = 2
				trait = greedy
				event_target:depose_liege_target = { current_heir = { character = ROOT }	 }
			}
			modifier = {
				factor = 2
				trait = ruthless
				event_target:depose_liege_target = { current_heir = { character = ROOT }	 }
			}
			modifier = {
				factor = 0.5
				trait = honorable
				event_target:depose_liege_target = { current_heir = { character = ROOT }	 }
			}
			modifier = {
				factor = 0.2
				trait = content
				event_target:depose_liege_target = { current_heir = { character = ROOT }	 }
			}
			modifier = {
				factor = 5
				event_target:depose_liege_target = { 
					age = 13
					is_incapable = no
					current_heir = { 
						OR = {
							NOT = { age = 13 }
							prisoner = yes
							is_incapable = yes
						}
					}	
				}
			}
			
			modifier = {
				factor = 3
				event_target:depose_liege_target = { current_heir = { reverse_opinion = { who = ROOT value = 20 } } }
			}
			modifier = {
				factor = 3
				event_target:depose_liege_target = { current_heir = { reverse_opinion = { who = ROOT value = 50 } } }
			}
			modifier = {
				factor = 3
				event_target:depose_liege_target = { current_heir = { reverse_opinion = { who = ROOT value = 80 } } }
			}
			modifier = {
				factor = 0.33
				event_target:depose_liege_target = { current_heir = { NOT = { reverse_opinion = { who = ROOT value = -20 } } } }
			}
			modifier = {
				factor = 0.33
				event_target:depose_liege_target = { current_heir = { NOT = { reverse_opinion = { who = ROOT value = -50 } } } }
			}
			modifier = {
				factor = 0.33
				event_target:depose_liege_target = { current_heir = { NOT = { reverse_opinion = { who = ROOT value = -80 } } } }
			}
		}
		event_target:depose_liege_target = { 				
			hidden_tooltip = {
				current_heir = { 
					letter_event = { id = 45371 days = 1 } 
					clr_character_flag = depose_liege_heir
				}
			}
			abdicate_effect = yes
			imprison = ROOT
		}
	}
	
	option = {
		name = "EVTOPTB45370" #Usurp
		trigger = {
			event_target:depose_liege_target = {
				OR = {
					AND = {						
						is_merchant_republic = yes
						ROOT = { is_patrician = yes }
					}	
					AND = {						
						trait = pirate
						ROOT = { trait = pirate }
					}	
					AND = {						
						is_nomadic = yes
						ROOT = { is_nomadic = yes }
					}	
					primary_title = { ROOT = { has_claim = PREV } }
				}	
				NOT = { current_heir = { character = ROOT } }
				NAND = { #Can't do this with depose liege faction
					has_character_flag = depose_liege_target 
					current_heir = { has_character_flag = depose_liege_heir } 
				}
			}
		}
		ai_chance = {
			factor = 200
			modifier = {
				factor = 100
				trait = ambitious
			}
			modifier = {
				factor = 4
				trait = pirate
			}
			modifier = {
				factor = 2
				trait = greedy
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 0.5
				trait = honorable
			}
			modifier = {
				factor = 0.33
				trait = content	
			}
			modifier = {
				factor = 0
				trait = content
				NOT = {
					event_target:depose_liege_target = { 
						primary_title = { ROOT = { has_claim = PREV } }
					}	
				}	
			}
		}
		event_target:depose_liege_target = {
			current_heir = { 
				clr_character_flag = depose_liege_heir
			}
			hidden_tooltip = {
				if = {
					limit = { 
						tier = EMPEROR
						trait = civil_war
					}
					any_courtier = { set_character_flag = former_royal_courtier }
					character_event = { id = mega_wars.86 days = 1 } #rebel leader resolution				
				}
			}	
			primary_title = {
				if = {
					limit = {
						OR = {
							ROOT = { NOT = { trait = nightswatch } }
							NOT = { title = d_nightswatch }
						}
						OR = {
							holder_scope = { is_merchant_republic = no }
							ROOT = { is_patrician = no }
						}
					}
					usurp_title_plus_barony_if_unlanded_and_vassals_no_adj = { target = ROOT type = claim }
				}	
				if = { #If patrician enforcing claim on republic hold election in their favour
					limit = {
						holder_scope = { is_merchant_republic = yes }
						ROOT = { is_patrician = yes }
					}
					hidden_tooltip = { ROOT = { prestige = 75000 } } #make ROOT heir
					holder_scope = { character_event = { id = REP.903 tooltip = TOOLTIPREP.903 } }
				}
				hidden_tooltip = {		
					ROOT = {					
						character_event = { id = maintenance.26 } #Vanilla bug resets laws, so fix empire tracker law and primogeniture
						character_event = { id = maintenance.21 } #Take dejure vassals (AGOT)
					}
					if = {
						limit = { title = e_iron_throne } #Lose crownlands
						holder_scope = { character_event = { id = maintenance.37 } } 
					}
				}
			}
			any_demesne_title = {
				limit = { 
					tier = PREV 
					is_primary_holder_title = no
				}
				usurp_title_plus_barony_if_unlanded_and_vassals_no_adj = { target = ROOT type = claim }
			}
			imprison = ROOT
		}	
		hidden_tooltip = { #This stops wars to depose liege
			ROOT = { save_event_target_as = debt_inheritor } #pass on debts
			event_target:depose_liege_target = { 
				inherit_debt_effect = yes
				add_character_modifier = { name = deposed_AGOT duration = 3650 } 
				clr_character_flag = depose_liege_target
			}
			any_player = {
				limit = {
					OR = {
						is_liege_or_above = ROOT
						has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }	
						reverse_has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }	
						is_liege_of = ROOT
						dynasty = ROOT
						is_close_relative = ROOT
						is_married = ROOT
						dynasty = event_target:depose_liege_target 
						is_close_relative = event_target:depose_liege_target 
						is_married = event_target:depose_liege_target 
						has_non_aggression_pact_with = ROOT
						is_allied_with = ROOT
						any_current_enemy = { character = ROOT }
						has_opinion_modifier = { who = ROOT modifier = opinion_fought_for_claimant }
						AND = {
							is_within_diplo_range = ROOT
							ROOT = { tier = EMPEROR }
						}
					}
					NOT = { character = ROOT }
					NOT = { character = event_target:depose_liege_target }
				}
				letter_event = { id = 45373 }
			}
			any_demesne_title = {
				limit = { has_title_flag = depose_liege_claims }
				clr_title_flag = depose_liege_claims
			}
		}
	}
	
	option = {
		name = "EVTOPTC45370" #Assume regency
		trigger = {
			has_regent = no
			OR = {
				NAND = { #Can't usually do this with depose liege faction
					has_character_flag = depose_liege_target 
					current_heir = { has_character_flag = depose_liege_heir } 
				}
				event_target:depose_liege_target = { 
					OR = {
						NOT = { age = 13 }
						is_incapable = yes
						trait = imbecile
						trait = inbred
						trait = infirm
						trait = lunatic
					}
					OR = {
						ROOT = { has_minor_title = title_triarch }
						NAND = { #Junior Triarchs become regent
							is_merchant_republic = yes
							government = triarch_merchant_republic_government		
						}
					}
				}
			}	
			NOT = { is_inaccessible_trigger = yes }
		}
		ai_chance = {
			factor = 50
			
			modifier = { #Rarely do this if liege is hated
				factor = 0.1
				OR = {
					NOT = { opinion = { who = event_target:depose_liege_target value = -74 } }
					AND = {
						NOT = { opinion = { who = event_target:depose_liege_target value = -39 } }
						OR = {
							NOT = { culture_group = event_target:depose_liege_target }
							NOT = { religion = event_target:depose_liege_target }
						}
					}
				}	
			}
			modifier = {
				factor = 0
				event_target:depose_liege_target = { 
					primary_title = { ROOT = { has_claim = PREV } }
					NOT = { current_heir = { character = ROOT } }
					NAND = { #Can't do this with depose liege faction
						has_character_flag = depose_liege_target 
						current_heir = { has_character_flag = depose_liege_heir } 
					}
				}
				OR = {
					trait = ambitious
					trait = just
					trait = greedy
					trait = ruthless
					trait = proud
				}
				NOT = { trait = content }
			}
			modifier = {
				factor = 5
				event_target:depose_liege_target = { 
					NOT = { age = 10 }
					reverse_opinion = { who = ROOT value = -49 }
				}
			}
			modifier = {
				factor = 2.5
				event_target:depose_liege_target = { 
					OR = {
						is_adult = no
						prisoner = yes
						is_incapable = yes
					}
					reverse_opinion = { who = ROOT value = -49 }
				}
			}
			modifier = {
				factor = 0
				event_target:depose_liege_target = { 
					has_character_flag = depose_liege_target
					NOR = {
						is_adult = no
						is_incapable = yes
						trait = imbecile
						trait = inbred
						trait = infirm
						trait = lunatic
					}										
				}			
			}
			modifier = {
				factor = 0.25
				event_target:depose_liege_target = { 
					NOR = {
						NOT = { age = 13 }
						is_incapable = yes
						trait = imbecile
						trait = inbred
						trait = infirm
						trait = lunatic
					}			
				}			
			}
			modifier = {
				factor = 2
				event_target:depose_liege_target = { 
					reverse_opinion = { who = ROOT value = -19 }
				}
			}
			modifier = {
				factor = 2
				event_target:depose_liege_target = { 
					reverse_opinion = { who = ROOT value = 0 }
				}
			}
			modifier = {
				factor = 2
				event_target:depose_liege_target = { 
					reverse_opinion = { who = ROOT value = 20 }
				}
			}
			modifier = {
				factor = 2
				trait = just
			}
			modifier = {
				factor = 2
				trait = honorable
			}
		}
		event_target:depose_liege_target = { #If not currently in regency, either imprison or declare incapable
			if = {
				limit = {
					NOR = {
						is_adult = no
						prisoner = yes
						is_incapable = yes
					}
				}
				if = {
					limit = {
						OR = {
							trait = imbecile
							trait = inbred
							trait = infirm
							trait = lunatic
							has_epidemic = yes
						}
					}
					add_trait = declared_incapable
				}
				if = {
					limit = {
						NOR = {
							trait = imbecile
							trait = inbred
							trait = infirm
							trait = lunatic
							has_epidemic = yes
						}
					}
					imprison = ROOT
				}
			}
			current_heir = { 
				clr_character_flag = depose_liege_heir
			}
		}
		gain_regency_effect = yes
		hidden_tooltip = {
			event_target:depose_liege_target = {
				letter_event = { id = 45374 }					
				clr_character_flag = depose_liege_target
				any_demesne_title = {
					limit = { has_title_flag = depose_liege_claims }
					clr_title_flag = depose_liege_claims
				}
			}
			any_player = {
				limit = {
					OR = {
						is_liege_or_above = event_target:depose_liege_target
						has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_de_facto_liege }	
						reverse_has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_de_facto_liege }	
						is_liege_of = event_target:depose_liege_target
						dynasty = ROOT
						is_close_relative = ROOT
						is_married = ROOT
						dynasty = event_target:depose_liege_target 
						is_close_relative = event_target:depose_liege_target 
						is_married = event_target:depose_liege_target 
						has_non_aggression_pact_with = event_target:depose_liege_target
						is_allied_with = event_target:depose_liege_target
						any_current_enemy = { character = event_target:depose_liege_target }
						has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_fought_for_claimant }
						AND = {
							is_within_diplo_range = event_target:depose_liege_target
							event_target:depose_liege_target = { tier = EMPEROR }
						}
					}
					NOT = { character = ROOT }
					NOT = { character = event_target:depose_liege_target }
				}
				letter_event = { id = 45375 }
			}
			character_event = { id = 61140 days = 30 random = 20 } #declare child ruler insane?
			character_event = { id = 61141 days = 30 random = 20 } #declare child ruler insane?
		}
	}
	
	option = {
		name = "EVTOPTD45370" #Call a great council
		trigger = {
			event_target:great_council_leader = {	
				always = yes
			}
		}
		ai_chance = {
			factor = 50
			
			modifier = {
				factor = 0
				event_target:depose_liege_target = { 
					primary_title = { ROOT = { has_claim = PREV } }
					NOT = { current_heir = { character = ROOT } }
					NAND = { #Can't do this with depose liege faction
						has_character_flag = depose_liege_target 
						current_heir = { has_character_flag = depose_liege_heir } 
					}
				}
				OR = {
					trait = ambitious
					#trait = just
					trait = greedy
					trait = ruthless
					trait = proud
				}
				NOT = { trait = content }
			}
			modifier = {
				factor = 2
				trait = just
			}
			modifier = {
				factor = 2
				trait = honorable
			}
		}
		event_target:great_council_leader = { show_portrait = yes }
		event_target:depose_liege_target = {
			custom_tooltip = {
				text = TOOLTIPEVTOPTD45370
			}
			current_heir = { 
				clr_character_flag = depose_liege_heir
			}
		}	
		hidden_tooltip = {
			event_target:depose_liege_target = {
				if = {
					limit = { 
						tier = EMPEROR
						trait = civil_war
					}
					any_courtier = { set_character_flag = former_royal_courtier }
					character_event = { id = mega_wars.86 days = 1 } #rebel leader resolution				
				}
				letter_event = { id = 45378 }						
				clr_character_flag = depose_liege_target
				any_demesne_title = {
					limit = { has_title_flag = depose_liege_claims }
					clr_title_flag = depose_liege_claims
				}
			}
			any_player = {
				limit = {
					OR = {
						is_liege_or_above = event_target:depose_liege_target
						has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_de_facto_liege }	
						reverse_has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_de_facto_liege }	
						is_liege_of = event_target:depose_liege_target
						dynasty = ROOT
						is_close_relative = ROOT
						is_married = ROOT
						dynasty = event_target:depose_liege_target 
						is_close_relative = event_target:depose_liege_target 
						is_married = event_target:depose_liege_target 
						has_non_aggression_pact_with = event_target:depose_liege_target
						is_allied_with = event_target:depose_liege_target
						any_current_enemy = { character = event_target:depose_liege_target }
						has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_fought_for_claimant }
						AND = {
							is_within_diplo_range = event_target:depose_liege_target
							event_target:depose_liege_target = { tier = EMPEROR }
						}
					}
					NOT = { character = ROOT }
					NOT = { character = event_target:depose_liege_target }
				}
				letter_event = { id = 45379 days = 1 }
			}
		}
	}

	option = {
		name = "EVTOPTE45370" #Leave
		trigger = {
			event_target:depose_liege_target = {
				OR = {
					NOT = { has_character_flag = depose_liege_target }
					current_heir = { has_character_modifier = deposed_AGOT }
				}	
				NAND = { #Can't do this with depose liege faction
					has_character_flag = depose_liege_target 
					current_heir = { has_character_flag = depose_liege_heir } 
				}
			}
		}
		ai_chance = {
			factor = 15
			modifier = {
				factor = 0
				event_target:depose_liege_target = { has_character_flag = depose_liege_target }			
			}
			modifier = {
				factor = 0
				OR = {
					trait = ambitious	
					trait = just		
				}	
			}
			modifier = {
				factor = 0
				event_target:depose_liege_target = { 
					primary_title = { ROOT = { has_claim = PREV } }
					NOT = { current_heir = { character = ROOT } }
					NAND = { #Can't do this with depose liege faction
						has_character_flag = depose_liege_target 
						current_heir = { has_character_flag = depose_liege_heir } 
					}
				}
				OR = {
					trait = ambitious
					trait = just
					trait = greedy
					trait = ruthless
					trait = proud
				}
				NOT = { trait = content }
			}
			modifier = {
				factor = 1.75
				trait = patient
			}
			modifier = {
				factor = 1.75
				trait = trusting
			}
			modifier = {
				factor = 1.75
				trait = kind
			}
			modifier = {
				factor = 1.75
				trait = content
			}
			modifier = {
				factor = 1.75
				trait = slothful
			}
			modifier = {
				factor = 0.6
				trait = wroth
			}
			modifier = {
				factor = 0.6
				trait = paranoid
			}
			modifier = {
				factor = 0.6
				trait = diligent
			}
			
			modifier = {
				factor = 3
				event_target:depose_liege_target = { 
					prisoner = yes
					host = { character = ROOT }
				}
			}		
			modifier = {
				factor = 3
				event_target:depose_liege_target = { reverse_opinion = { who = ROOT value = 20 } }
			}
			modifier = {
				factor = 3
				event_target:depose_liege_target = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 3
				event_target:depose_liege_target = { reverse_opinion = { who = ROOT value = 80 } }
			}
			modifier = {
				factor = 0.33
				event_target:depose_liege_target = { NOT = { reverse_opinion = { who = ROOT value = -20 } } }
			}
			modifier = {
				factor = 0
				event_target:depose_liege_target = { NOT = { reverse_opinion = { who = ROOT value = -39 } } }
			}
		}
		prestige = -50
		event_target:depose_liege_target = { 
			clr_character_flag = depose_liege_target
			hidden_tooltip = {
				current_heir = { 
					clr_character_flag = depose_liege_heir
				}
				any_player = {
					limit = {
						OR = {
							is_liege_or_above = event_target:depose_liege_target
							has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_de_facto_liege }	
							reverse_has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_de_facto_liege }	
							is_liege_of = event_target:depose_liege_target
							dynasty = ROOT
							is_close_relative = ROOT
							is_married = ROOT
							dynasty = event_target:depose_liege_target 
							is_close_relative = event_target:depose_liege_target 
							is_married = event_target:depose_liege_target 
							has_non_aggression_pact_with = event_target:depose_liege_target
							is_allied_with = event_target:depose_liege_target
							any_current_enemy = { character = event_target:depose_liege_target }
							has_opinion_modifier = { who = event_target:depose_liege_target modifier = opinion_fought_for_claimant }
							AND = {
								is_within_diplo_range = event_target:depose_liege_target
								event_target:depose_liege_target = { tier = EMPEROR }
							}
						}
						NOT = { character = ROOT }
						NOT = { character = event_target:depose_liege_target }
					}
					letter_event = { id = 45377 }
				}
				letter_event = { id = 45376 }		
				any_demesne_title = {
					limit = { has_title_flag = depose_liege_claims }
					clr_title_flag = depose_liege_claims
				}				
			}	
		}
	}
}
#Inform heir of deposition
letter_event = {
	id = 45371
	desc = "EVTDESC45371"
	
	is_triggered_only = yes

	option = {
		name = "EVTOPTA45371" 
		event_target:depose_liege_target = { 
			tooltip = { show_portrait = yes } 
			imprison = FROM
		}
		any_demesne_title = {
			limit = { has_title_flag = depose_liege_claims }
			add_pressed_claim = event_target:depose_liege_target
			clr_title_flag = depose_liege_claims
		}
		hidden_tooltip = {
			any_player = {
				limit = {
					OR = {
						is_liege_or_above = ROOT
						has_opinion_modifier = { who = event_target:depose_liege_target  modifier = opinion_de_facto_liege }	
						reverse_has_opinion_modifier = { who = event_target:depose_liege_target  modifier = opinion_de_facto_liege }	
						is_liege_of = ROOT
						dynasty = ROOT
						is_close_relative = ROOT
						is_married = ROOT
						dynasty = FROM 
						is_close_relative = FROM  
						is_married = FROM 
						has_non_aggression_pact_with = ROOT
						is_allied_with = ROOT
						any_current_enemy = { character = ROOT }
						has_opinion_modifier = { who = ROOT modifier = opinion_fought_for_claimant }
						AND = {
							is_within_diplo_range = ROOT
							ROOT = { tier = EMPEROR }
						}
					}
					NOT = { character = FROM }
					NOT = { character = ROOT }
				}
				letter_event = { id = 45372 }
			}
		}
	}
}
letter_event = {
	id = 45372
	desc = "EVTDESC45372"
	
	is_triggered_only = yes
	show_from_from = yes
	
	option = {
		name = OK
		event_target:depose_liege_target = { tooltip = { show_portrait = yes } }
		FROM = { tooltip = { show_portrait = yes } }
	}
}
#Inform usurp
letter_event = {
	id = 45373
	desc = "EVTDESC45373"
	
	is_triggered_only = yes
	
	option = {
		name = OK
		event_target:depose_liege_target = { tooltip = { show_portrait = yes } }
	}
}
#Inform regent
letter_event = {
	id = 45374
	desc = "EVTDESC45374"
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA45374
		tooltip = { FROM = { give_minor_title = title_regent } }
	}
}
letter_event = {
	id = 45375
	desc = "EVTDESC45374"
	
	is_triggered_only = yes
	
	option = {
		name = OK
		event_target:depose_liege_target = { tooltip = { show_portrait = yes } }
	}
}
#Inform spared
letter_event = {
	id = 45376
	desc = "EVTDESC45376"
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA45376
	}
}
letter_event = {
	id = 45377
	desc = "EVTDESC45377"
	
	is_triggered_only = yes
	
	option = {
		name = OK
		event_target:depose_liege_target = { tooltip = { show_portrait = yes } }
	}
}
#Inform great council
letter_event = {
	id = 45378
	desc = "EVTDESC45378"
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA45374
		tooltip = { abdicate_to = event_target:great_council_leader }
		imprison = FROM
		hidden_tooltip = {
			# regent = { set_character_flag = interregnum_regent } ####deposed council gets no priority
			# job_castellan = { set_character_flag = interregnum_castellan }
			# any_courtier = {
				# limit = {
					# OR = {
						# is_voter = yes
						# is_councillor = yes
					# }
					# NOT = { has_job_title = job_castellan }
					# NOT = { has_job_title = job_physician }
				# }
				# set_character_flag = interregnum_councillor
			# }
			event_target:great_council_leader = { 
				save_event_target_as = interregnum_heir 
				set_character_flag = forcing_interregnum
			}
			start_interregnum_effect = yes	
		}		
	}
}
letter_event = {
	id = 45379
	desc = "EVTDESC45378"
	
	is_triggered_only = yes
	
	option = {
		name = OK
		event_target:depose_liege_target = { tooltip = { show_portrait = yes } }
	}
}
#Workaround for AI trying to execute vassals who they are heir to, immediately call for trial
character_event = {
	id = 45400
	
	is_triggered_only = yes
	hide_window = yes
	only_playable = yes
	
	trigger = {
		current_heir = { character = FROM }
		is_liege_or_above = FROM
		FROM = { 
			ai = yes 
			ROOT = { NOT = { just_execution_reason_PREV_trigger = yes } }
			NOT = { has_character_modifier = giving_justice } ###must not be in a court proceeding	
		}
	}
	
	immediate = {
		diplomatic_immunity = yes #stop the crazy executions
		#then call for trial
		FROM = {
			add_character_modifier = {
				name = giving_justice
				duration = 60
			}
		}	
		hidden_tooltip = { #so diplomacy stat is normal
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
			remove_character_modifier = house_arrest
		}
		add_character_modifier = {
			name = getting_justice
			duration = 60
		}
		clr_character_flag = select_champion
		clr_character_flag = choosing_champion
		set_character_flag = first_trial.0_event
		character_event = { id = trial.0 days = 1 }	
	}
	
	option = {
		name = OK
	}
}
#Ruler pleased relative granted title on_new_holder
character_event = {
	id = 45410
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_liege_or_above = FROMFROM #FROMFROM is the granter
		FROM = { lower_tier_than = DUKE } #granted title
	}
	
	immediate = {
		character_event = { id = 	45411 days = 1 }
	}
	
	option = {
		name = OK
	}
}
character_event = { #check for opinions only works 1 day after on_new_holder
	id = 45411

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		OR = {
			has_opinion_modifier = { who = FROMFROMFROM modifier = opinion_granted_barony }
			has_opinion_modifier = { who = FROMFROMFROM modifier = opinion_granted_county }
		}
		NOT = { reverse_has_opinion_modifier = { who = FROMFROMFROM modifier = opinion_usurped_title } }
	}
	
	immediate = {
		any_close_relative = {
			limit = {
				is_ruler = yes
				OR = {
					is_father = ROOT
					is_mother = ROOT
					AND = {					
						dynasty = ROOT
						OR = {
							opinion = { who = ROOT value = -24 }
							trait = familyperson
						}	
						OR = {
							NOT = { lower_tier_than = ROOT }
							trait = content 
							NOR = {
								trait = proud
								trait = envious
								trait = greedy
							}	
						}
					}	
				}
				NOT = { character = FROMFROMFROM }
				NOT = { has_claim = FROMFROM }			
			}
			opinion = { who = FROMFROMFROM modifier = opinion_granted_relative_title }
		}
	}
	
	option = {
		name = "OK"			
	}
}
#On settlement sacked, check for possible AI counter measures
character_event = {
	id = 45415
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		FROM = {
			holder_scope = {
				top_liege = {
					character_event = { id = 45416 days = 100 random = 50 }
				}
			}
		}
	}
	
	option = {
		name = OK
	}
}
character_event = { #AI decides (Also triggered from other raiding/looting events)
	id = 45416

	is_triggered_only = yes
	hide_window = yes
	prisoner = no
	ai = yes
	
	trigger = {		
		has_cb = FROM
		NOT = { reverse_has_truce = FROM }		
		NOT = { FROM = { pays_tribute_to = ROOT } }
		OR = { #Cannot attack vassals split by mega war
			NOT = { FROM = { has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege } } }
			NOT = { ROOT = { higher_tier_than = FROM } }
		}
		FROM = { demesne_size = 1 }
		is_within_diplo_range = FROM
	}
		
	option = {
		name = "Let's do it!"
		ai_chance = {
			factor = 30
			
			modifier = {
				factor = 0.1
				war = yes
			}
			modifier = {
				factor = 0
				is_primary_war_defender = yes
			}
			modifier = {
				factor = 0.5
				has_regent = yes
			}
			
			modifier = {
				factor = 4
				trait = diligent
			}
			modifier = {
				factor = 0.25
				trait = slothful
			}
			modifier = {
				factor = 2
				trait = ambitious
			}
			modifier = {
				factor = 0.5
				trait = content
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 2
				trait = wroth
			}
			modifier = {
				factor = 0.5
				trait = patient
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 0.5
				trait = honorable
			}
			
			modifier = {
				factor = 0.05
				FROM = {
					relative_power = {
						who = ROOT
						power = 2
					}
				}
			}
			modifier = {
				factor = 0.5
				FROM = {
					relative_power = {
						who = ROOT
						power = 1.5
					}
				}
			}
			modifier = {
				factor = 2
				FROM = {
					NOT = {
						relative_power = {
							who = ROOT
							power = 0.75
						}
					}	
				}
			}
			modifier = {
				factor = 2
				FROM = {
					NOT = {
						relative_power = {
							who = ROOT
							power = 0.5
						}
					}	
				}
			}
			modifier = {
				factor = 2
				FROM = {
					NOT = {
						relative_power = {
							who = ROOT
							power = 0.25
						}
					}	
				}
			}
			
			modifier = {
				factor = 0.25
				is_allied_with = FROM
			}
			
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -99 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -79 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -59 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -39 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -19 } }
			}
			
			modifier = {
				factor = 0.66
				opinion = { who = FROM value = 20 }
			}
			modifier = {
				factor = 0.66
				opinion = { who = FROM value = 40 }
			}
			modifier = {
				factor = 0.66
				opinion = { who = FROM value = 60 }
			}
			modifier = {
				factor = 0
				opinion = { who = FROM value = 75 }
			}		
		}
		clr_global_flag = war_cooldown_period
		#check each CB in turn, war will not trigger if cb is not valid
		FROM = {
			primary_title = {
				reverse_war = {
					target = ROOT
					casus_belli = dejure_kingdom_claim_EMP
				}
				reverse_war = {
					target = ROOT
					casus_belli = dejure_kingdom_claim
				}
				reverse_war = {
					target = ROOT
					casus_belli = dejure_duchy_claim
				}
				reverse_war = {
					target = ROOT
					casus_belli = dejure_county_claim
				}			
			}
		}
		war = {
			target = FROM
			casus_belli = bloody_vengeance
		}
		FROM = {
			primary_title = {
				reverse_war = {
					target = ROOT
					casus_belli = claim
				}
				if = {
					limit = { NOT = { has_game_rule = { name = slavery value = off } } }
					reverse_war = {
						target = ROOT
						casus_belli = war_of_liberation
					}
					reverse_war = {
						target = ROOT
						casus_belli = war_of_enslavement
					}	
				}	
			}
		}	
		war = {
			target = FROM
			casus_belli = anti_piracy
		}
		war = {
			target = FROM
			casus_belli = cb_liberate_nomad_duchy
		}	
		war = {
			target = FROM
			casus_belli = great_ranging
		}
		war = {
			target = FROM
			casus_belli = restore_nightswatch
		}
		FROM = {
			primary_title = {
				reverse_war = {
					target = ROOT
					casus_belli = restore_nightswatch
				}
				reverse_war = {
					target = ROOT
					casus_belli = war_of_emancipation
				}
				reverse_war = {
					target = ROOT
					casus_belli = old_ones_scourge_cb
				}
				reverse_war = {
					target = ROOT
					casus_belli = invasion_ironborn
				}			
				reverse_war = {
					target = ROOT
					casus_belli = dragon_conquest
				}
				reverse_war = {
					target = ROOT
					casus_belli = pirate_invasion
				}				
			}
		}	
	}
	
	option = {
		name = "Let's not do it!"
		ai_chance = {
			factor = 50
		}
	}
}
#On usurpation, take artifacts
character_event = {
	id = 45420
	desc = EVTDESC45420
	picture = GFX_evt_relic_box
    border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
	trigger = {
		FROMFROM = {
			OR = {
				NOT = { #old holder has no other titles of lost title rank
					any_demesne_title = { 
						NOT = { title = ROOT_FROM }
						NOT = { lower_tier_than = ROOT_FROM }
					}
				}
				ROOT_FROM = { title = e_iron_throne }
				ROOT_FROM = { title = e_new_valyria }
			}	
			any_artifact = {	
				OR = { 
					AND = { #If old holder is still landed, only take crown jewells and claimed artifacts
						OR = {
							ROOT_FROMFROM = { is_ruler = no }						
							has_artifact_flag = crown_jewel
						}
						OR = {
							NOT = { has_artifact_flag = combat_weapon }
							has_artifact_flag = combat_tier_3
						}	
						NOT = { has_artifact_flag = no_usurp_transfer }
						NOT = { has_artifact_flag = valyrian_steel }
						NOT = { has_artifact_flag = valyrian_armour }
					}	
					has_artifact_flag = stolen_from_@ROOT
					has_artifact_flag = heirloom_@ROOT
					has_artifact_flag = title_heirloom_@ROOT
					AND = {
						owner = { NOT = { dynasty = ROOT } }
						NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
						any_artifact_owner = {
							dynasty = ROOT
							NOT = { dynasty = 0 }
							#PREV = { has_artifact_flag = heirloom_@PREV }
						}
					}
				}
			}
			NOT = { has_character_flag = losing_artifacts }
		}
	}
	
	immediate = {
		FROMFROM = { set_character_flag = losing_artifacts }
	}
	
	option = {
		name = OK
		FROMFROM = {
			any_artifact = {					
				limit = {	
					OR = { 
						AND = { #If old holder is still landed, only take crown jewells and claimed artifacts
							OR = {
								ROOT_FROMFROM = { is_ruler = no }						
								has_artifact_flag = crown_jewel
							}
							OR = {
								NOT = { has_artifact_flag = combat_weapon }
								has_artifact_flag = combat_tier_3
							}	
							NOT = { has_artifact_flag = no_usurp_transfer }
							NOT = { has_artifact_flag = valyrian_steel }
							NOT = { has_artifact_flag = valyrian_armour }
						}	
						has_artifact_flag = stolen_from_@ROOT
						has_artifact_flag = heirloom_@ROOT
						has_artifact_flag = title_heirloom_@ROOT
						AND = {
							owner = { NOT = { dynasty = ROOT } }
							NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
							any_artifact_owner = {
								dynasty = ROOT
								NOT = { dynasty = 0 }
								#PREV = { has_artifact_flag = heirloom_@PREV }
							}
						}
					}					
				}
				transfer_artifact = {				
					from = ROOT_FROMFROM				
					to = ROOT
				}
			}
		}
	}
	
	after = {
		FROMFROM = { clr_character_flag = losing_artifacts }
	}
}
#On claim pressed, vassalise ruler instead?
character_event = {
	id = 45425
	desc = EVTDESC45425
    border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	immediate = {
		event_target:title_to_usurp = {
			holder_scope = { save_event_target_as = title_to_usurp_holder }
		}
	}
	
	option = {
		name = EVTOPTA45425 #let them keep it
		ai_chance = {
			factor = 50
			
			modifier = {
				factor = 0
				NOR = {
					trait = just
					trait = honorable
					is_close_relative = event_target:title_to_usurp_holder
					is_married = event_target:title_to_usurp_holder
					culture_group = event_target:title_to_usurp_holder
					religion_group = event_target:title_to_usurp_holder					
					opinion = { who = event_target:title_to_usurp_holder value = 15 }
				}
			}
			modifier = {
				factor = 3
				is_close_relative = event_target:title_to_usurp_holder
			}
			modifier = {
				factor = 3
				is_married = event_target:title_to_usurp_holder
			}
			modifier = {
				factor = 3
				is_friend = event_target:title_to_usurp_holder
			}
			modifier = {
				factor = 2
				culture_group = event_target:title_to_usurp_holder
			}
			modifier = {
				factor = 2
				religion = event_target:title_to_usurp_holder
			}
			
			modifier = {
				factor = 1.5
				opinion = { who = event_target:title_to_usurp_holder value = 15 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = event_target:title_to_usurp_holder value = 40 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = event_target:title_to_usurp_holder value = 65 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = event_target:title_to_usurp_holder value = 90 }
			}
			modifier = {
				factor = 1.5
				reverse_opinion = { who = event_target:title_to_usurp_holder value = 15 }
			}
			modifier = {
				factor = 1.5
				reverse_opinion = { who = event_target:title_to_usurp_holder value = 40 }
			}
			modifier = {
				factor = 1.5
				reverse_opinion = { who = event_target:title_to_usurp_holder value = 65 }
			}
			modifier = {
				factor = 1.5
				reverse_opinion = { who = event_target:title_to_usurp_holder value = 90 }
			}
			
			modifier = {
				factor = 5
				trait = just
			}
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 3
				trait = honorable
			}
			modifier = {
				factor = 3
				trait = kind
			}
			modifier = {
				factor = 3
				trait = charitable
			}
			modifier = {
				factor = 3
				trait = familyperson
				is_close_relative = event_target:title_to_usurp_holder
			}
		}
		show_portrait = event_target:title_to_usurp_holder
		any_vassal = {
			limit = {
				NOT = { character = event_target:title_to_usurp_holder }
				OR = {
					culture_group = event_target:title_to_usurp_holder
					religion_group = event_target:title_to_usurp_holder
				}
				OR = {
					opinion = { who = event_target:title_to_usurp_holder value = 0 }
					trait = just
					is_married = event_target:title_to_usurp_holder
					AND = {
						is_close_relative = event_target:title_to_usurp_holder
						opinion = { who = event_target:title_to_usurp_holder value = -40 }
					}
				}
				OR = {
					trait = just
					NOT = { has_claim = event_target:title_to_usurp }
				}
			}
			show_scope_change = no
			opinion = { who = ROOT modifier = opinion_confirmed_vassal_title months = 60 }
		}	
		event_target:title_to_usurp_holder = {
			any_liege = {
				limit = { 
					NOT = { character = PREV } 
					NOT = { is_vassal_or_below = ROOT }
				}
				show_scope_change = no
				opinion = { who = ROOT modifier = opinion_usurped_vassal_title }
				if = {
					limit = { NOT = { any_demesne_title = { event_target:title_to_usurp = { de_jure_liege_or_above = PREV } } } }
					add_claim = event_target:title_to_usurp
				}	
			}
			if = {
				limit = {
					tier = DUKE
					ROOT = { tier = DUKE }
				}
				any_demesne_title = {
					limit = { tier = DUKE }
					show_scope_change = no
					destroy_landed_title = THIS
				}
			}
			set_defacto_liege = ROOT
			opinion = { who = ROOT modifier = opinion_confirmed_title months = 120 }
			hidden_tooltip = {
				clr_mega_war_variables_and_flags_effect = yes
			}
		}
		event_target:title_to_usurp = {	show_scope_change = no remove_claim = ROOT }			
	}
	option = {
		name = EVTOPTB45425 #it is mine
		ai_chance = {
			factor = 50
			
			modifier = {
				factor = 0
				OR = {
					AND = {
						is_close_relative = event_target:title_to_usurp_holder
						opinion = { who = event_target:title_to_usurp_holder value = 0 }
					}
					AND = {
						OR = {
							trait = just
							trait = honorable
						}
						OR = {
							culture_group = event_target:title_to_usurp_holder
							religion = event_target:title_to_usurp_holder	
						}
					}				
					opinion = { who = event_target:title_to_usurp_holder value = 60 }
				}
			}
			modifier = {
				factor = 3
				is_rival = event_target:title_to_usurp_holder
			}
			modifier = {
				factor = 2
				NOT = { culture_group = event_target:title_to_usurp_holder }
				trait = proud
			}
			modifier = {
				factor = 2
				NOT = { religion = event_target:title_to_usurp_holder }
				trait = zealous
			}
			
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:title_to_usurp_holder value = -15 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:title_to_usurp_holder value = -40 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:title_to_usurp_holder value = -65 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:title_to_usurp_holder value = -90 } }
			}
			modifier = {
				factor = 1.5
				NOT = { reverse_opinion = { who = event_target:title_to_usurp_holder value = -15 } }
			}
			modifier = {
				factor = 1.5
				NOT = { reverse_opinion = { who = event_target:title_to_usurp_holder value = -40 } }
			}
			modifier = {
				factor = 1.5
				NOT = { reverse_opinion = { who = event_target:title_to_usurp_holder value = -65 } }
			}
			modifier = {
				factor = 1.5
				NOT = { reverse_opinion = { who = event_target:title_to_usurp_holder value = -90 } }
			}
			
			modifier = {
				factor = 5
				trait = arbitrary
			}
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 3
				trait = ruthless
			}
			modifier = {
				factor = 3
				trait = cruel
			}
			modifier = {
				factor = 3
				trait = greedy
			}
			modifier = {
				factor = 3
				trait = selfish
			}
		}
		event_target:title_to_usurp = {
			usurp_title_plus_barony_if_unlanded = { target = ROOT type = claim }
			if = {
				limit = { tier = COUNT }
				location = {
					capital_holding = {
						add_holding_modifier = {
							name = new_administration
							duration = 1825
						}
						add_holding_modifier = {
							name = recently_conquered
							duration = 365
						}
					}
				}	
			}	
			else_if = {
				limit = { tier = BARON }
				add_holding_modifier = {
					name = new_administration
					duration = 1825
				}
				add_holding_modifier = {
					name = recently_conquered
					duration = 365
				}	
			}
			if = {
				limit = {
					higher_tier_than = BARON
					NOT = { culture = ROOT }
				}
				hidden_tooltip = { conquest_culture = ROOT }
			}
		}
	}
}
#On imprisoned, inform player if relevent
character_event = {
	id = 45426

	is_triggered_only = yes
	only_rulers = yes
	hide_window = yes
	
	immediate = {
		any_player = {
			limit = {
				OR = {
					any_current_enemy = { character = ROOT }
					is_liege_or_above = ROOT
					is_liege_of = ROOT
					dynasty = ROOT
					is_close_relative = ROOT
					is_married = ROOT
					is_friend = ROOT
					is_rival = ROOT
					is_lover = ROOT
					is_allied_with = ROOT
					has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }	
					has_opinion_modifier = { who = ROOT modifier = opinion_with_rebel_leader }
				}
				NOT = { character = ROOT }
				NOT = { character = FROM }
				NOT = { has_character_flag = no_imprison_inform }
			}
			character_event = { id = 45427 days = 1 }
		}
	}
	
	option = {
		name = OK
	}
}
character_event = {
	id = 45427
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes 
	
	trigger = {
		FROM = { prisoner = yes }
	}
	
	desc = {
		text = EVTDESC45427
		trigger = { FROM = { NOT = { has_character_flag = captured_in_battle } } }
	}
	desc = {
		text = EVTDESC45427B
		trigger = { FROM = { has_character_flag = captured_in_battle } }
	}
	
	option = {
		name = OK
		show_portrait = FROMFROM
	}
	option = {
		name = EVTOPTB45427
		set_character_flag = no_imprison_inform
	}
}
#War declared on valyrian/sarnori tributary, add opinion
character_event = {
	id = 45428
	
	is_triggered_only = yes 
	hide_window = yes
	
	trigger = {
		is_tributary = yes	
		FROM = { NOT = { liege_before_war = { character = ROOT } } }
	}
	
	immediate = {
		any_suzerain = {
			opinion = { who = FROM modifier = declared_war_on_tributary }
			if = {
				limit = { ROOT = { is_tributary = { type = valyrian_tributary suzerain = PREV } } }
				opinion = { who = ROOT modifier = opinion_tributary_defending }
			}
		}
	}
	
	option = {
		name = OK
	}
}

#Vassal rebels after refusing liege action, other vassals can choose to join
character_event = {
	id = 45431
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		NOT = { tier = EMPEROR } #already uses mega war system 
		FROM = { NOT = { tier = BARON } }
	}
	
	immediate = {
		any_vassal = {
			limit = {
				NOT = { tier = BARON }
				NOT = { character = FROM }
			}
			letter_event = { id = 45430 days = 3 }
		}
	}
	
	option = {
		name = OK
	}
}	
letter_event = {
	id = 45430
	desc = "EVTDESC45430"
	
	is_triggered_only = yes
	show_from_from = yes
	
	trigger = {		
		war = no
		is_ruler = yes
		FROM = { 
			war = yes 
			is_liege_of = ROOT
			NOT = { war_with = ROOT } 
			ROOT_FROMFROM = {
				war_with = PREV
				NOT = { any_current_enemy = { character = ROOT } }
			}
		}
		is_nomadic = no
		OR = {
			is_patrician = no #dont break republic
			is_merchant_republic = yes
		}
		NOT = { #not split when outside force is claiming title
			any_realm_title = {
				any_war = { 
					attacker = {
						NOT = { is_liege_or_above = FROM }
					}
				}
				#holder_scope = { war = yes }
			}
		}
	}
	
	option = {
		name = "EVTOPTA45430" #support liege
		ai_chance = {
			factor = 40

			modifier = {
				factor = 2
				any_dynasty_member = {
					is_close_relative = ROOT
					host = { character = FROM }
				}
			}
			modifier = { #fash tamper
				factor = 2
				FROM = {
					ROOT = {
						has_opinion_modifier = { who = PREV modifier = opinion_cadet_affection }
					}
				}
			}
			modifier = {
				factor = 1.5
				OR = {
					is_married = FROM
					is_parent_of = FROM
					is_child_of = FROM
					is_grandparent_of = FROM #grandchild
				}	
			}
			modifier = {
				factor = 4
				OR = {
					is_allied_with = FROM
					has_non_aggression_pact_with = FROM
				}	
			}
			#allied with ally of king
			modifier = {
				factor = 1.3
				FROM = {
					culture_group = ROOT
				}	
			}
			modifier = {
				factor = 1.3
				FROM = {
					religion = ROOT	
				}
			}
			modifier = {
				factor = 5
				NOT = { can_use_dragon_abilities_trigger = yes }
				FROM = {
					can_use_dragon_abilities_trigger = yes
				}
			}
			modifier = {
				factor = 6
				is_friend = FROM
			}
			modifier = {
				factor = 6
				is_rival = FROMFROM
			}
			modifier = {
				factor = 0.2
				is_rival = FROM
			}
			modifier = {
				factor = 0.2
				is_friend = FROMFROM
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROM value =  20 }
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROM value =  40 }
			}
			modifier = {
				factor = 1.3
				opinion = { who = FROM value =  60 }
			}
			modifier = {
				factor = 1.3
				opinion = { who = FROM value =  80 }
			}
			modifier = {
				factor = 1.3
				opinion = { who = FROM value =  100 }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROM value =  0 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROM value =  -20 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROM value =  -40 } }
			}
			modifier = {
				factor = 0.7
				NOT = { opinion = { who = FROM value =  -60 } }
			}
			modifier = {
				factor = 0.7
				NOT = { opinion = { who = FROM value =  -80 } }
			}
			modifier = {
				factor = 0.7
				NOT = { opinion = { who = FROM value =  -99 } }
			}
			modifier = { #Never join if like rebel and have no relation to king
				factor = 0
				NOT = { is_allied_with = FROM }
				NOT = { has_non_aggression_pact_with = FROM }
				NOT = { opinion = { who = FROM value = 50 } }
				NOT = { is_close_relative = FROM }
				NOT = { is_married = FROM }
				FROMFROM = {
					reverse_opinion = { who = ROOT value = 50 }
					OR = {
						is_allied_with = ROOT
						has_non_aggression_pact_with = ROOT
						is_close_relative = ROOT
						is_married = ROOT
					}
				}
			}
		}
		# set_character_flag = supporting_king
		# clr_character_flag = neutral 
		# clr_character_flag = against_king 
		# clr_character_flag = inherit_war
		# clr_character_flag = mega_war_remove_leader
		# clr_character_flag = warden_called_to_arms
		#hidden_tooltip = { set_defacto_liege = THIS }
		#FROM = {
			#ROOT = { join_attacker_wars = PREV }
			# opinion = {
				# modifier = opinion_loyal_to_crown
				# who = ROOT
				# years = 10
			# }
			# hidden_tooltip = {
				# letter_event = { id = mega_wars.34 }
				# reverse_opinion = {
					# modifier = opinion_with_king
					# who = ROOT
					# years = 100
				# }
			# }
		#}	
		FROMFROM = {
			limit = {
				OR = {
					is_allied_with = ROOT	
					has_non_aggression_pact_with = ROOT
				}	
			}	
			opinion = {
				modifier = broke_alliance
				who = ROOT
			}
		}			
	}
	# option = {
		# name = "EVTOPTBmega_wars.7" #remain neutral
		# ai_chance = {
			# factor = 28
			# modifier = {
				# factor = 3
				# has_character_flag = inherit_war
			# }
			# modifier = {
				# factor = 0
				# trait = honorable
				# has_character_flag = warden_called_to_arms
			# }
			# modifier = {
				# factor = 1.2
				# NOT = { age = 16 }
			# }
			# modifier = {
				# factor = 2
				# any_dynasty_member = {
					# is_close_relative = ROOT
					# trait = kingsguard
				# }
			# }
			# modifier = {
				# factor = 2
				# any_dynasty_member = {
					# is_close_relative = ROOT
					# host = { character = FROMFROM }
				# }
			# }
			# modifier = {
				# factor = 2
				# any_dynasty_member = {
					# is_close_relative = ROOT
					# host = { trait = rebel_leader  has_character_modifier = new_rebel_leader  war_with = FROMFROM }
				# }
			# }
			# modifier = {
				# factor = 10
				# has_character_flag = neutral
			# }
			
			# modifier = { #against anti-piracy campaign
				# factor = 5
				# OR = {
					# government = pirate_government
					# religion = lady_of_the_waves
					# religion = drowned_god
					# culture_group = iron_isles_culture
					# trait = pirate
				# }
				# FROMFROM = {
					# any_war = {
						# using_cb = anti_piracy
						# defender = { has_character_modifier = new_rebel_leader }
						# attacker = { character = ROOT_FROMFROM }
					# }
				# }	
			# }
			# modifier = { #against 'anti slavery wars
				# factor = 5
				# OR = {
					# has_slavery_religion_trigger = yes
					# has_slavery_culture_trigger = yes
				# }
				# NOR = {
					# has_antislavery_religion_trigger = yes
					# has_antislavery_culture_trigger = yes
					# trait = liberator
				# }
				# FROMFROM = {
					# any_war = {
						# OR = {
							# using_cb = war_of_emancipation
							# using_cb = war_of_liberation
						# }
						# defender = { has_character_modifier = new_rebel_leader }
						# attacker = { character = ROOT_FROMFROM }
					# }
				# }
			# }
			
			# modifier = {
				# factor = 1.2
				# trait = patient
			# }
			# modifier = {
				# factor = 0.8
				# trait = wroth
			# }
			# modifier = {
				# factor = 1.5
				# trait = craven
			# }
			# modifier = {
				# factor = 0.8
				# trait = brave
			# }
			# modifier = {
				# factor = 3.5
				# trait = ambitious
			# }
			# modifier = {
				# factor = 1.2
				# trait = diligent
			# }
			# modifier = {
				# factor = 0.75
				# trait = content
			# }
			# modifier = {
				# factor = 5
				# NOT = { can_use_dragon_abilities_trigger = yes }
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# can_use_dragon_abilities_trigger = yes
				# }
				# FROMFROM = {
					# can_use_dragon_abilities_trigger = yes
				# }
			# }
			# modifier = {
				# factor = 2.5
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# NOT = { religion_group = ROOT }
				# }
				# FROMFROM = {
					# NOT = { religion_group = ROOT }
				# }	
			# }
			# modifier = {
				# factor = 3.5
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# NOT = { religion = ROOT }
				# }
				# FROMFROM = {
					# NOT = { religion = ROOT }
				# }
			# }
			# modifier = {
				# factor = 1.5
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# NOT = { culture_group = ROOT }
				# }
				# FROMFROM = {
					# NOT = { culture_group = ROOT }
				# }
			# }
			# modifier = {
				# factor = 5
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# any_friend = {
						# character = ROOT
					# }
				# }
				# FROMFROM = {
					# any_friend = {
						# character = ROOT
					# }
				# }
			# }
			# modifier = {
				# factor = 5
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# any_rival = {
						# character = ROOT
					# }
				# }
				# FROMFROM = {
					# any_rival = {
						# character = ROOT
					# }
				# }
			# }
			# modifier = {
				# factor = 2.5
				# NOT = { opinion = { who = FROMFROM value =  -75 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  -100 }
					# NOT = { reverse_opinion = { who = ROOT value =  -75 } } 
				# }
			# }
			# modifier = {
				# factor = 2
				# opinion = { who = FROMFROM value =  -75 } 
				# NOT = { opinion = { who = FROMFROM value =  -50 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  -75 }
					# NOT = { reverse_opinion = { who = ROOT value =  -50 } } 
				# }
			# }
			# modifier = {
				# factor = 1.75
				# opinion = { who = FROMFROM value =  -50 } 
				# NOT = { opinion = { who = FROMFROM value =  -25 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  -50 }
					# NOT = { reverse_opinion = { who = ROOT value =  -25 } } 
				# }
			# }
			# modifier = {
				# factor = 1.5
				# opinion = { who = FROMFROM value =  -25 } 
				# NOT = { opinion = { who = FROMFROM value =  -0 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  -25 } 
					# NOT = { reverse_opinion = { who = ROOT value =  -0 } } 
				# }
			# }
			# modifier = {
				# factor = 1.5
				# opinion = { who = FROMFROM value =  0 } 
				# NOT = { opinion = { who = FROMFROM value =  25 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  0 } 
					# NOT = { reverse_opinion = { who = ROOT value =  25 } } 
				# }
			# }
			# modifier = {
				# factor = 1.75
				# opinion = { who = FROMFROM value =  25 } 
				# NOT = { opinion = { who = FROMFROM value =  50 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  25 } 
					# NOT = { reverse_opinion = { who = ROOT value =  50 } } 
				# }
			# }
			# modifier = {
				# factor = 2
				# opinion = { who = FROMFROM value =  50 } 
				# NOT = { opinion = { who = FROMFROM value =  75 } } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  50 } 
					# NOT = { reverse_opinion = { who = ROOT value =  75 } } 
				# }
			# }
			# modifier = {
				# factor = 2.5
				# opinion = { who = FROMFROM value =  75 } 
				# rebel_leader = {
					# is_alive = yes
					# has_character_modifier = new_rebel_leader
					# war_with = FROMFROM
					# reverse_opinion = { who = ROOT value =  75 } 
				# }
			# }
			
		# }
		# set_character_flag = neutral
		# clr_character_flag = supporting_king
		# clr_character_flag = against_king 
		# clr_character_flag = inherit_war
		# clr_character_flag = mega_war_remove_leader
		# hidden_tooltip = { set_defacto_liege = THIS }
		# if = {
			# limit = { has_character_flag = warden_called_to_arms	}
			# custom_tooltip = { 
				# text = TOOLTIPWARDENMEGAWARWARNING 
				# hidden_tooltip = {
					# any_playable_ruler = {
						# limit = {
							# OR = {
								# is_liege_or_above = ROOT
								# is_liege_or_above = FROMFROM
								# primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							# }
						# }
						# opinion = { modifier = opinion_bad_warden who = ROOT years = 10 }
					# }
				# }
			# }
			# prestige = -400
			# FROMFROM = {
				# opinion = {
					# modifier = opinion_warden_no_defend
					# who = ROOT
					# years = 10
				# }
			# }	
			# clr_character_flag = warden_called_to_arms
		# }
		# FROMFROM = {
			# opinion = {
				# modifier = opinion_dithered
				# who = ROOT
				# years = 10
			# }
			# hidden_tooltip = {
				# character_event = { id = mega_wars.33 }
			# }
		# }
		# rebel_leader = {
			# limit = {
				# is_alive = yes
				# has_character_modifier = new_rebel_leader
				# war_with = FROMFROM
				# OR = {
					# is_allied_with = ROOT	
					# has_non_aggression_pact_with = ROOT
				# }
			# }	
			# opinion = {
				# modifier = broke_alliance
				# who = ROOT
			# }
		# }	
		# if = { 	
			# limit = { 
				# OR = {
					# is_allied_with = FROMFROM	
					# has_non_aggression_pact_with = FROMFROM
				# }
			# }
			# FROMFROM = {
				# opinion = {
					# modifier = broke_alliance
					# who = ROOT
				# }
			# }					
		# }
		# hidden_tooltip = {
			# any_vassal = {
				# limit = {
					# NOT = { war_with = root }
					# war = no
					# primary_title = {
						# mercenary = no
						# holy_order = no
					# }
					# NOT = { tier = BARON }
				# }
				# clr_character_flag = supporting_king
				# clr_character_flag = neutral 
				# clr_character_flag = against_king
				# # clr_character_flag = rebel_leader
				# # clr_character_flag = post_civil_war_wars
				# # clr_character_flag = independant
				# # clr_character_flag = join_independance_asked	
				# # clr_character_flag = inherit_war 
				# #opinion = { who = FROMFROM modifier = opinion_deciding_king days = 10 }
				# if = {
					# limit = {
						# NOT = { has_character_flag = flag_crown_loyalist }
						# NOT = { in_faction = faction_liege_loyalist }
					# }
					# letter_event = { id = mega_wars.25 days=3 }	
				# }
				# if = { #Crown Loyalists
					# limit = { has_character_flag = flag_crown_loyalist }
					# character_event = { id = mega_wars.19 days=3 }	
				# }
				# if = { #Liege Loyalists
					# limit = { in_faction = faction_liege_loyalist }
					# character_event = { id = mega_wars.20 days=3 }	
				# }
			# }
			# any_realm_character = { #Dragon Rider's can choose sides
				# limit = {
					# can_use_dragon_abilities_trigger = yes
					# OR = {
						# liege = { character = ROOT }	
						# liege = { liege = { character = ROOT }	}
					# }	
					# is_ruler = no		
					# prisoner = no					
					# is_incapable = no
					# can_press_claims_trigger = yes
				# }
				# clr_character_flag = supporting_king
				# clr_character_flag = neutral 
				# clr_character_flag = against_king
				# letter_event = { id = mega_wars.25 days=4 }				
			# }			
		# }	
	# }
	option = {
		name = "EVTOPTCmega_wars.7" #against the king
		trigger = {
			NAND = {
				prisoner = yes
				host = { character = FROM }
			}
			NAND = { #heir is not enemy of rebel
				FROM = { current_heir = { character = ROOT } }
				FROMFROM = {
					has_opinion_modifier = { who = ROOT modifier = opinion_vengeance }
				}	
			}
		}
		ai_chance = {
			factor = 40

			# Motives
			# I despise the current ruler (and their regent if applicable), and dont mind the heir 
			# I dislike the current ruler and like the heir (if they are not regent), or FROMFROM can control heir
			# I dislike the current ruler and FROMFROM can control heir
			# I wish to become the ruler myself
			# I am more closely related to the heir than the current ruler
			# My religion is threatened
			# I'm the High Septon and think the current ruler is unholy	
			# Lord Protector in interregnum		
			# Be a Dothraki and the Khal is weak
			# Triarch for Life
			modifier = {
				factor = 0
				FROM = {
					OR = {
						reverse_opinion = { who = ROOT value = -79 } 
						AND = {
							has_regent = yes
							regent = { reverse_opinion = { who = ROOT value = -35 } }
						}	
						NOT = { current_heir = { reverse_opinion = { who = ROOT value = -35 } } }
					} 
					OR = {
						reverse_opinion = { who = ROOT value = -35 }
						AND = {
							has_regent = yes
							regent = { liege = { current_heir = { character = PREVPREV } } }
						}
						current_heir = { 
							NAND = { 
								reverse_opinion = { who = ROOT value = -35 }
								opinion_diff = { first = ROOT second = PREV value = 15 as_if_liege = yes } 
							}
						}
					}
					OR = {
						reverse_opinion = { who = ROOT value = -35 }
						ROOT_FROMFROM = { NOT = { reverse_opinion = { who = ROOT value = 0 } } }
						current_heir = { 
							age = 14
							is_incapable = no
						}
					}
					current_heir = {
						OR = {
							trait = content
							NOT = { character = ROOT }
						}
						NOT = { is_lover = ROOT }
					}
					OR = {
						dynasty = ROOT
						current_heir = { NOT = { dynasty = ROOT } }
					}
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						AND = {
							current_heir = { NOT = { is_close_relative = ROOT } }
							current_heir = { NOT = { is_married = ROOT } }
						}	
					}
					OR = {
						religion = ROOT
						current_heir = { NOT = { religion = ROOT } }
						AND = {
							ROOT = { NOT = { trait = zealous } }
							NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_religion_threatened } }
						}
					}
					OR = {
						ROOT = { NOT = { religion = the_seven } }
						ROOT_FROMFROM = { NOT = { has_landed_title = k_the_most_devout } }
						ROOT_FROMFROM = { NOT = { religion = the_seven } }
						NOT = {
							OR = {
								is_any_kinslayer_trigger = yes
								trait = excommunicated
								NOT = { piety = -50 }
								NOT = { religion = the_seven }
								has_character_modifier = abomination_of_incest
								has_character_modifier = grandchild_of_incest
							}
						}
						ROOT = {
							NOT = { trait = zealous }
							opinion = { who = PREV value = 20 } 
						}
					}
					OR = {
						lower_tier_than = KING
						NOT = { primary_title = { is_variable_equal = { which = "lord_paramount_status" value = 2 } } }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_suspended_council } }
					}
					OR = {
						is_merchant_republic = no
						NOT = { government = triarch_merchant_republic_government }	
						NOT = { primary_title = { has_law = republic_triarch_for_life } }
						ROOT = { has_character_flag = title_triarch_for_life }
					}
				}
				OR = {
					AND = {
						NOT = { culture = jogos_nhai }	
						NOT = { culture = dothraki }
						is_nomadic = no
					}	
					FROM = {
						is_female = no
						age = 16
						NOT = { is_weak_khal_trigger = yes }
						OR = {
							is_nomadic = no
							ROOT = { is_nomadic = no }
							reverse_clan_opinion = { who = ROOT value = -40 }
						}
					}	
				}
			}
			modifier = {
				factor = 0
				in_faction = faction_liege_loyalist
			}
			modifier = {
				factor = 2
				any_dynasty_member = {
					is_close_relative = ROOT
					host = { character = FROMFROM }
				}
			}
			modifier = { #close family
				factor = 1.5
				OR = {
					is_married = FROMFROM
					is_parent_of = FROMFROM
					is_child_of = FROMFROM
					is_grandparent_of = FROMFROM
				}	
			}
			modifier = { #fash tamper
				factor = 2
				FROMFROM = {
					ROOT = {
						has_opinion_modifier = { who = PREV modifier = opinion_cadet_affection }
					}
				}	
			}
			modifier = { #alliance
				factor = 4
				FROMFROM = {
					OR = {
						has_non_aggression_pact_with = ROOT
						is_allied_with = ROOT
					}	
				}		
			}
			##allied with ally of rebel leader
			modifier = {
				factor = 1.35
				FROMFROM = {
					culture_group = ROOT
				}
			}
			modifier = {
				factor = 1.35
				FROMFROM = {
					religion = ROOT
				}
			}
			modifier = {
				factor = 0.8
				FROMFROM = {
					trait = lunatic
					ROOT = {
						NOT = { trait = lunatic }
					}	
				}
			}
			modifier = {
				factor = 5
				NOT = { can_use_dragon_abilities_trigger = yes }
				FROMFROM = {
					can_use_dragon_abilities_trigger = yes
				}
			}
			modifier = {
				factor = 6
				is_rival = FROM
			}
			modifier = {
				factor = 6
				FROMFROM = {
					is_friend = ROOT
				}	
			}
			modifier = {
				factor = 0.2
				is_friend = FROM
			}
			modifier = {
				factor = 0.2
				FROMFROM = {
					is_rival = ROOT
				}
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROMFROM value = 20 }
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROMFROM value = 40 }
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROMFROM value = 60 }
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROMFROM value = 80 }
			}
			modifier = {
				factor = 1.2
				opinion = { who = FROMFROM value = 100 }
			}
	
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROMFROM value = 0 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROMFROM value = -20 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROMFROM value = -40 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROMFROM value = -60 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROMFROM value = -80 } }
			}
			modifier = {
				factor = 0.8
				NOT = { opinion = { who = FROMFROM value = -99 } }
			}
			
			# Fear Intimidation Factor
			modifier = {
				factor = 0.9
				FROM = { has_character_modifier = feared_1 }
			}
			modifier = {
				factor = 0.75
				FROM = { has_character_modifier = feared_2 }
			}
			modifier = {
				factor = 0.6
				FROM = { has_character_modifier = feared_3 }
			}
			modifier = {
				factor = 0.5
				FROM = { has_character_modifier = feared_4 }
			}
			modifier = {
				factor = 0.4
				FROM = { has_character_modifier = feared_5 }
			}
			modifier = {
				factor = 0.2
				trait = craven
				FROM = { 
					OR = {
						has_character_modifier = feared_1
						has_character_modifier = feared_2
						has_character_modifier = feared_3
						has_character_modifier = feared_4
						has_character_modifier = feared_5 
					}	
				}
			}
			modifier = {
				factor = 1.25
				OR = {
					trait = brave 
					can_use_dragon_abilities_trigger = yes
				}	
				FROM = { 
					OR = {
						has_character_modifier = feared_1
						has_character_modifier = feared_2
						has_character_modifier = feared_3
						has_character_modifier = feared_4
						has_character_modifier = feared_5 
					}	
				}
			}
			##
			
			modifier = { #Never join if like king and have no relation to rebel
				factor = 0			
				OR = {
					opinion = { who = FROM value = 50 }
					is_close_relative = FROM
					is_married = FROM
				}
				FROMFROM = {
					NOT = { is_allied_with = ROOT }
					NOT = { has_non_aggression_pact_with = ROOT }
					NOT = { reverse_opinion = { who = ROOT value = 50 } }
					NOT = { is_close_relative = ROOT }
					NOT = { is_married = ROOT }
				}				
			}
		}
		# set_character_flag = against_king
		# clr_character_flag = neutral
		# clr_character_flag = supporting_king
		# clr_character_flag = inherit_war
		# clr_character_flag = mega_war_remove_leader
		hidden_tooltip = { 
			###Set Empire Title Law 'Flag'###
			clr_character_flag = independant
			set_character_flag = mega_war_remove_leader
			top_liege = {
				if = {
					limit = { tier = EMPEROR }
					set_mega_war_empire_variable_ROOT_effect = yes
					reverse_opinion = { who = ROOT modifier = opinion_de_facto_liege years = 25 }
				}
			}
			any_demesne_title = {
				limit = { 
					OR = {
						tier = COUNT
						tier = DUKE
					}
				}				
				set_variable = { which = "de_facto_kingdom" value = 0 }
			}
			liege = {
				if = {
					limit = { higher_tier_than = DUKE }
					set_mega_war_kingdom_variable_ROOT_effect = yes
				}
				reverse_opinion = { who = ROOT modifier = opinion_de_facto_liege years = 25 }
			}
			set_character_flag = joined_vassal_tyranny_rebellion
			set_character_flag = post_civil_war_wars #ensures they are re-vassalised when its over
			set_defacto_liege = THIS 
			clr_character_flag = mega_war_remove_leader
		}
		FROMFROM = {
			ROOT = { join_attacker_wars = PREV }
			opinion = {
				modifier = opinion_joined_cause
				who = ROOT
				years = 10
			}
			hidden_tooltip = {
				letter_event = { id = mega_wars.30 }
				# reverse_opinion = {
					# modifier = opinion_with_rebel_leader
					# who = ROOT
					# years = 100
				# }
			}	
		}	
		FROM = {
			opinion = {
				modifier = opinion_joined_rebellion
				who = ROOT
				years = 10
			}
			hidden_tooltip = {
				character_event = { id = mega_wars.32 }
			}
			if = { 	
				limit = { 
					OR = {
						is_allied_with = ROOT	
						has_non_aggression_pact_with = ROOT
					}	
				}
				opinion = {
					modifier = broke_alliance
					who = ROOT
				}				
			}
		}
	}
	option = {
		name = "EVTOPTDmega_wars.7" #declare independance
		trigger = {
			can_use_cb = {
				target = FROM
				casus_belli = bid_for_independence
			}
			NAND = {
				FROM = { de_jure_vassal_or_below = PREV }
				FROM = { independent = no }
			}
		}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 5
				in_faction = faction_independence
			}	
			#Recently subjugated
			modifier = {
				factor = 0.1
				liege = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_subjugated_AGOT } }
			}
			#Never do this if recently subjugated by a dragon rider
			modifier = {
				factor = 0
				NOT = { can_use_dragon_abilities_trigger = yes }
				liege = { 
					can_use_dragon_abilities_trigger = yes
					reverse_has_opinion_modifier = { who = ROOT modifier = opinion_subjugated_AGOT } 
				}
			}
			# Don't want independence if same culture or relative of liege
			modifier = {
				factor = 0
				NOT = { culture = dothraki }
				NOT = { culture = jogos_nhai }
				is_nomadic = no
				FROM = {
					OR = {
						culture = ROOT
						is_close_relative = ROOT
					}
				}
			}
			# Most culture groups dont mind being lorded by the same culture group
			modifier = {
				factor = 0
				FROM = { 
					culture_group = ROOT 
					religion_group = ROOT
				}
				NOT = { culture_group = free_cities }
				NOT = { culture_group = sothoryos_islands }
				NOT = { in_faction = faction_independence }
				OR = { # If I'm king tier liege has to be very desirable
					NOT = { tier = KING }
					NOT = { relative_power = { who = FROMFROM power = 1.1 } }
					FROM = { has_landed_title = e_iron_throne }
				}
			}
			#If Liege is High Valyrian and my religion that is acceptable
			modifier = {
				factor = 0
				NOT = { culture = dothraki }
				NOT = { culture = jogos_nhai }
				is_nomadic = no
				NOT = { in_faction = faction_independence }
				FROM = {
					culture = high_valyrian
					religion = ROOT
				}
			}
			#If I'm Dornish and liege is Andal and my religion that is acceptable
			modifier = {
				factor = 0
				culture_group = dornish
				NOT = { culture = rhoynar }
				NOT = { in_faction = faction_independence }
				FROM = {
					culture_group = andal
					religion = ROOT
				}
				OR = { # If I'm king tier liege has to be very desirable
					NOT = { tier = KING }
					NOT = { relative_power = { who = FROMFROM power = 1.1 } }
					FROM = { has_landed_title = e_iron_throne }
				}
			}		
			modifier = {
				factor = 0
				NOT = { in_faction = faction_independence }
				FROM = { reverse_opinion = { who = ROOT value =  0 } }
			}
			
			modifier = {
				factor = 0.5
				religion = FROM
				culture_group = FROM
			}
			modifier = {
				factor = 0.5
				trait = patient
			}
			modifier = {
				factor = 2
				trait = wroth
			}
			modifier = {
				factor = 0.5
				trait = craven
			}
			modifier = {
				factor = 2
				trait = brave
			}
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 0
				trait = content
			}
			modifier = {
				factor = 0.05
				trait = honorable
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2.5
				FROMFROM = {
					NOT = { religion = ROOT }
				}
				FROM = {
					NOT = { religion = ROOT }
				}
			}
			modifier = {
				factor = 0.05
				NOT = { can_use_dragon_abilities_trigger = yes }
				FROM = { can_use_dragon_abilities_trigger = yes }
			}		
			
			modifier = {
				factor = 1.25
				FROM = {
					NOT = { reverse_opinion = { who = ROOT value =  0 } }
				}
			}
			modifier = {
				factor = 1.25
				FROM = {
					NOT = { reverse_opinion = { who = ROOT value =  -20 } }
				}
			}
			modifier = {
				factor = 1.25
				FROM = {
					NOT = { reverse_opinion = { who = ROOT value =  -40 } }
				}
			}
			modifier = {
				factor = 1.25
				FROM = {
					NOT = { reverse_opinion = { who = ROOT value =  -60 } }
				}
			}
			modifier = {
				factor = 1.25
				FROM = {
					NOT = { reverse_opinion = { who = ROOT value =  -80 } }
				}
			}
			modifier = {
				factor = 1.25
				FROM = {
					NOT = { reverse_opinion = { who = ROOT value =  -99 } }
				}
			}
		}
		# set_character_flag = neutral
		# set_character_flag = opportunist_independence
		# clr_character_flag = supporting_king
		# clr_character_flag = against_king 
		# clr_character_flag = inherit_war	
		# clr_character_flag = mega_war_remove_leader
		# hidden_tooltip = { set_defacto_liege = THIS }
		FROM = {
			reverse_war = {
				target = ROOT
				casus_belli = bid_for_independence
			}
			hidden_tooltip = { letter_event = { id = mega_wars.35 days=1 } }	
		}
		FROMFROM = {
			limit = {
				OR = {
					is_allied_with = ROOT	
					has_non_aggression_pact_with = ROOT
				}
			}	
			opinion = {
				modifier = broke_alliance
				who = ROOT
			}
		}
		FROM = {
			if = { 	
				limit = { 
					OR = {
						is_allied_with = ROOT	
						has_non_aggression_pact_with = ROOT
					}	
				}	
			}
			opinion = {
				modifier = broke_alliance
				who = ROOT
			}				
		}			
	}
}
#Chance of congenital infertility
character_event = { #on_marriage so the Ai does not have magical ability to sense infertility
	id = 45432
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		NOT = { fertility = 0.51 }
		NOT = { any_child_even_if_dead = { always = yes } }
		NOT = { has_character_flag = checked_for_infertility }
	}
	
	immediate = {
		random_list = {
			84 = { }
			9 = { fertility = -0.1 }
			5 = { fertility = -0.25 }
			2 = { fertility = -0.5 }
		}
		set_character_flag = checked_for_infertility
	}
	
	option = {
		name = OK
	}
}
#On war declared, break non-aggression pacts/alliances
character_event = {
	id = 45433
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		OR = {
			has_non_aggression_pact_with = FROM
			is_allied_with = FROM
		}
	}
	
	immediate = {
		break_alliance = FROM
		opinion = {
			who = FROM
			modifier = broken_non_aggression_pact
		}
	}
	
	option = {
		name = OK
	}
}
#When A High Lordship is created in shattered counties, name after title of holder
character_event = {
	id = 45435
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = { 
			tier = DUKE 
			NOT = { has_title_flag = shattered_renamed }
		}
		capital_scope = { #Is capital duchy
			duchy = {
				title = FROM 
				NOT = { capital_scope = { owner = { character = ROOT } } } #capital not already held by ROOT
			}
		}
		OR = {
			AND = {
				is_alternate_start = yes
				has_alternate_start_parameter = {
					key = dejure_kingdoms
					value = none
				}
			}
			has_game_rule = { name = shattered_realms value = counties }
		}
	}
	
	immediate = {
		FROM = { 
			set_name = [Root.Capital.County.GetName]
			adjective = [Root.Capital.County.GetAdjective]
			set_title_flag = shattered_renamed
		}	
		capital_scope = { FROM = { set_preferred_capital = PREV } }
	}
	
	option = {
		name = OK
	}
}
#When Kingdom is created in shattered realms, create dejure realm
character_event = {
	id = 45436
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = { 
			tier = KING
			is_titular = yes
		}
		OR = {
			AND = {
				is_alternate_start = yes
				has_alternate_start_parameter = {
					key = dejure_kingdoms
					value = none
				}
			}
			has_game_rule = { name = shattered_realms value = counties }
			has_game_rule = { name = shattered_realms value = duchies }
		}
	}
	
	immediate = {
		hidden_tooltip = {
			primary_title = {
				holder_scope = {
					if = {
						limit = {
							has_alternate_start_parameter = {
								key = dejure_kingdoms
								value = none
							}
						}
						any_title_under = {
							limit = {
								tier = DUKE
							}
							de_jure_liege = PREVPREV
						}
						any_title_under = {
							limit = {
								tier = COUNT
								location = {
									duchy = {
										NOT = { de_jure_liege_or_above = PREVPREVPREVPREV }
										ROOT = {
											completely_controls = PREV
										}
									}
								}
							}
							location = {
								duchy = {
									de_jure_liege = PREVPREVPREVPREV
								}
							}
						}
					}
					#Capital duchy becomes dejure in shattered realms
					if = {
						limit = {
							OR = {
								has_game_rule = { name = shattered_realms value = counties }
								has_game_rule = { name = shattered_realms value = duchies }
							}
						}
						capital_scope = {
							duchy = { de_jure_liege = PREVPREVPREV }
							if = {
								limit = { NOT = { duchy = { always = yes } } }
								county = { de_jure_liege = PREVPREVPREV }
							}
						}
					}
				}
			}
		}
	}
	
	option = {
		name = OK
	}
}