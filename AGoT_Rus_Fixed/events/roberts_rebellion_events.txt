# roberts_rebellion.1 -Scenario Initialisation
#This event will occur at the beginning of the game

##8282- Roberts rebellion
##8284- Crowned Stag
##Feb 8299- A Clash of Kings

namespace = roberts_rebellion

character_event = {
	id = roberts_rebellion.1
	desc = "EVTDESCroberts_rebellion.1"
	
	is_triggered_only = yes #Triggered from on_startup
	only_rulers = yes
	hide_window = yes
	
	trigger = {
		NOT = { has_global_flag = scenario_initialised }	
		OR = {
			is_alternate_start = yes
			AND = {
				has_landed_title = e_rebels
				e_rebels = { holder_scope = { has_character_flag = trigger_startup_event } } #Double check in case vanilla bug deletes global_flag = scenario_initialised
			}
		}
		is_save_game = no
	}
	
	immediate = { 
		set_global_flag = scenario_initialised 
		#set_global_flag = maintenance_pulse
	}

	option = {
		name = "EVTOPTAroberts_rebellion.1" 
		#Shattered Realm Game Rule
		if = {
			limit = { 
				NOT = { has_game_rule = { name = shattered_realms value = off } }
			}
			shattered_realms_effect = yes
		}
		#Symmetrical Start Game Rule
		if = { #Remove all base value buildings
			limit = {
				has_game_rule = { name = symmetrical_start value = on }
			}
			symmetrical_start_effect = yes
		}
		#Make sure rebel title has a holder
		if = {
			limit = { e_rebels = { has_holder = no } }
			create_character = {
				random_traits = yes
				dynasty = NONE
				female = yes
			}
			new_character = {
				add_trait = immortal
				e_rebels = { gain_title = PREV }
			}
		}
		#Day 1 Events
		#random_playable_ruler = {
			#limit = { ai = no } 
			#character_event = { id = seasons.1 } #Season length event
		#}	
		any_playable_ruler = {
			limit = { 
				ai = no 
			}	
			if = { #Employ Maester
				limit = {
					maester_culture_trigger = yes 
					NOT = { has_landed_title = c_the_citadel }
					NOT = { has_landed_title = d_kingsguard }
					NAND = {
						has_landed_title = e_iron_throne 
						NOT = { has_global_flag = aegons_conquest }
					}
					NOT = { has_landed_title = k_the_most_devout }			
					NOT = { 
						any_courtier = { 
							trait = maester 
							NOT = { trait = incapable }
							prisoner = no
						} 
					}
				}
				scaled_wealth = { value = -0.2 min = -10 max = -75 }
				random_playable_ruler = { #This picks a random westerosi culture
					limit = {
						OR = {
							culture_group = andal
							#culture = ironborn
							culture_group = dornish
							#culture = high_valyrian
							culture = western_valyrian
							culture_group = first_men
							#culture = skagosi
						}
						NOT = { culture = rhoynar }
						NOT = { culture = old_andal }
						NOT = { culture = moon_clansman }
					}
					create_random_priest = {
						random_traits = yes
						trait = maester
						dynasty = none
						female = no
						culture = THIS
						religion = THIS
						historical = yes
					}
					new_character = {
						move_character = PREVPREV
						remove_trait = martial_cleric
						remove_trait = scholarly_theologian
						remove_trait = mastermind_theologian
						remove_trait = detached_priest
						random_list = {
							40 = {
								modifier = {
									factor = 0.5
									PREVPREV = { higher_tier_than = DUKE }
								}
								add_trait = detached_priest
								while = {
									limit = { NOT = { has_links_for_maester_rank_trigger = yes } }
									add_random_maester_link_effect = yes
								}
							}
							30 = {
								modifier = {
									factor = 0.75
									PREVPREV = { higher_tier_than = DUKE }
								}
								add_trait = martial_cleric
								while = {
									limit = { NOT = { has_links_level_2_trigger = yes } }
									add_random_maester_link_effect = yes
								}
							}
							20 = {
								add_trait = scholarly_theologian
								add_random_maester_specialisation_effect = yes
								while = {
									limit = { NOT = { has_links_level_3_trigger = yes } }
									add_random_maester_link_effect = yes
								}
							}
							10 = {
								add_trait = mastermind_theologian
								add_random_maester_specialisation_effect = yes
								while = {
									limit = { NOT = { has_links_level_4_trigger = yes } }
									add_random_maester_link_effect = yes
								}
							}
						}
						random_list = { # Is the Physician a Quack?
							90 = {
							}
							10 = {
								set_character_flag = physician_is_quack
							}
						}
						if = { 	
							limit = { PREVPREV = { trait = nightswatch } }
							add_trait = nightswatch
							set_character_flag = no_court_invites
							remove_trait = wildling
						}			
						set_character_flag = serving_with_lord
						remove_trait = imbecile
						remove_trait = inbred
						remove_trait = slow
						remove_trait = infirm
						remove_trait = incapable
						remove_trait = leper
						remove_trait = possessed
						remove_trait = ill
						remove_trait = pneumonic
						remove_trait = maimed
						set_special_character_title = title_maester
						change_stewardship = 3
						change_diplomacy = 3
						change_intrigue = 3
						give_job_title = job_physician
						if = {
							limit = { has_dlc = "Zeus" }
							give_minor_title = title_teacher
						}	
						join_society = hermetics
						while = {
							limit = { NOT = { society_rank == 3 } }
							society_rank_up = 1
						}	
						set_immune_to_pruning = yes
						
					}
				}	
			}
			if = { #Employ Priest
				limit = {
					NOT = {
						any_courtier = {
							has_job_title = job_spiritual
							NOT = { trait = incapable }
						}
					}
				}
				scaled_wealth = { value = -0.2 min = -10 max = -75 }
				capital_scope = {
					random_list = {
						50 = {
							trigger = { religion_allows_male_temple_holders = yes }
							create_random_priest = {
								random_traits = yes
								dynasty = NONE
								religion = PREV
								culture = THIS
							}	
						}
						50 = {
							trigger = { religion_allows_female_temple_holders = yes }
							create_random_priest = {
								random_traits = yes
								dynasty = NONE
								religion = PREV
								culture = THIS
								female = yes
							}	
						}
					}
					new_character = {
						set_immune_to_pruning = yes
						add_priest_trait_effect = yes
						remove_trait = slow
						remove_trait = imbecile
						remove_trait = dull
						
						remove_lifestyle_trait_effect = yes
						
						random_list = { # Flavor Randomization
							35 = { 
								# Nothing
							}
							15 = {
								change_learning = 2
							}
							20 = {
								add_trait = theologian
							}
							5 = {
								add_trait = scholar
							}
							5 = {
								add_trait = mystic
							}
							10 = {
								change_learning = 4
							}
							5 = {
								change_learning = 6
							}
							5 = {
								trigger = { 
									is_smart_incl_genius_trigger = no
								}
								add_trait = shrewd
							}
						}
						if = {
							limit = { 
								culture_group = hyrkoon_group
							}
							add_trait = eunuch
						}
						if = {
							limit = { 
								ROOT = { trait = nightswatch }
								is_female = no
							}
							add_trait = nightswatch
						}
						while = {
							limit = { NOT = { learning = 10 } }
							change_learning = 1
						}
						give_job_title = job_spiritual
					}
				}	
			}		
		}	
		#Pre-Doom Dejure titles/Holy Sites
		if = { #Pre Ghiscari Wars
			limit = { NOT = { year = 4000 } }
			d_bhorash = { de_jure_liege = k_meereen }
					
			#The Hills
			k_hills_of_norvos = { de_jure_liege = e_andalos }
			d_norvos = { de_jure_liege = k_hills_of_norvos }
			d_hills_of_norvos = { de_jure_liege = k_hills_of_norvos }
			d_the_west_road = { de_jure_liege = k_hills_of_norvos }
			
			#Forest of Qohor
			k_forest_qohor = { de_jure_liege = e_andalos }
			d_qohor = { de_jure_liege = k_forest_qohor }
			d_northern_forest_qohor = { de_jure_liege = k_forest_qohor }
			d_southern_forest_qohor = { de_jure_liege = k_forest_qohor }
			d_darkwater = { de_jure_liege = k_forest_qohor }
		
			#Flatlands
			k_flatlands = { de_jure_liege = e_andalos }
			d_myr = { de_jure_liege = k_flatlands }
			d_myrish_hinterlands = { de_jure_liege = k_flatlands }
			d_myrish_flatlands = { de_jure_liege = k_flatlands }
			d_pentos = { de_jure_liege = k_flatlands }
			d_pentoshi_flatlands = { de_jure_liege = k_flatlands }
			d_nontelos = { de_jure_liege = k_flatlands }
			
			#Disputed Lands
			d_lysene_disputed_lands = { de_jure_liege = k_disputed_lands }
			d_myrish_disputed_lands = { de_jure_liege = k_disputed_lands }
			d_tyroshi_lands = { de_jure_liege = k_disputed_lands }
			d_lys = { de_jure_liege = k_disputed_lands }
			d_tyrosh = { de_jure_liege = k_disputed_lands }
			
			#Volantis
			d_volantis = { de_jure_liege = k_north_valyria } 
			d_volaena = { de_jure_liege = k_north_valyria } 
			d_volontherys = { de_jure_liege = k_rhoynar } 
			d_valysar = { de_jure_liege = k_rhoynar }
			d_selhorys = { de_jure_liege = k_rhoynar }
			
			#Essaria
			d_essaria = { de_jure_liege = k_sarnor }
			d_hills_essaria = { de_jure_liege = k_sarnor }			
			d_painted_mountains = { de_jure_liege = k_sarnor }		
		}
		if = { #Andalos
			limit = { NOT = { year = 7000 } }
			c_braavos = { de_jure_liege = d_sweetwater }
			c_themarshes = { de_jure_liege = d_sweetwater }
			c_braavosishore = { de_jure_liege = d_sweetwater }
			d_sweetwater = { de_jure_liege = k_andalos }
			d_braavosiancoastlands = { de_jure_liege = k_andalos }	
			d_east_braavosiancoastlands = { de_jure_liege = k_andalos }	
			k_andalos = { de_jure_liege = e_andalos } 
			k_lorath = { de_jure_liege = e_andalos } 
		}
		if = { #Rhoynar
			limit = { NOT = { year = 7300 } }
			c_tyvis = { de_jure_liege = d_orange_shore } 
			d_orange_shore = { de_jure_liege = k_rhoynar } 
			d_valonsar = { de_jure_liege = k_rhoynar } 
			d_volantene_disputed_lands = { de_jure_liege = k_rhoynar } 
			d_velvet_hills = { de_jure_liege = k_rhoynar } 
			k_rhoynar = { de_jure_liege = 0 }
		}
		if = { #Hyrkoon
			limit = { 
				NOT = { year = 3300 }  
				is_alternate_start = no
			}
			c_hyrkoon = {
				set_holy_site = gods_bone_mountains
				set_holy_site = gods_bone_mountains_reformed
			}
			c_adakhakileki = {
				remove_holy_site = gods_bone_mountains
				remove_holy_site = gods_bone_mountains_reformed
			}
		}	
		if = { #Valyria
			limit = { 
				NOT = { year = 7886 }  
				is_alternate_start = no
			}
			c_mantarys = { #c_valyria
				remove_holy_site = valyrian_rel
				remove_holy_site = valyrian_rel_reformed
				remove_holy_site = dragon_rel
			}
			c_velos = { #c_oros
				remove_holy_site = valyrian_rel
				remove_holy_site = valyrian_rel_reformed
				remove_holy_site = dragon_rel
			}
			c_oldvolantis = { #c_valyria
				remove_holy_site = many_faced_god
				remove_holy_site = weeping_lady
				remove_holy_site = weeping_lady_reformed
				remove_holy_site = boash
				remove_holy_site = boash_reformed
				remove_holy_site = starry_wisdom
				remove_holy_site = shadowbinders
				remove_holy_site = shadowbinders_reformed
				remove_holy_site = pagan
				remove_holy_site = aztec_reformed
				remove_holy_site = aztec
				remove_holy_site = ruin_rel
			}
		}	
		if = { #Pre-Andals
			limit = { 
				NOT = { year = 6800 }  
				is_alternate_start = no
			}
			# The Seven holy sites in Andalos		
			c_mountnorvo = { #Mount Norvo
				set_holy_site = the_seven
			}
			c_mothers_valley = { #Mother's Valley
				set_holy_site = the_seven
			}
			c_lorassyon = { #Lorassyon
				set_holy_site = the_seven
			}
			c_axe = { #The Axe
				set_holy_site = the_seven
			}
			# Remove the Seven holy sites in Westeros		
			c_stoneysept = { #Stoney Sept
				remove_holy_site = the_seven
			}
			c_the_eyrie = { #The Eyrie
				remove_holy_site = the_seven
			}
			c_oldtown = { #Oldtown
				remove_holy_site = the_seven
			}
			c_lannisport = { #Lannisport
				remove_holy_site = the_seven
			}
			# Old Gods holy sites	
			c_oldtown = {	#Oldtown
				set_holy_site = old_gods
				set_holy_site = old_gods_reformed
			}
			# Remove old gods holy sites	
			c_barrowton = { #barrowton
				remove_holy_site = old_gods
				remove_holy_site = old_gods_reformed
			}
		}
		#Set reformed religion title capital pre-doom
		if = { 
			limit = { 
				NOT = { year = 7886 }  
				is_alternate_start = no
			}
			d_valyrian_rel_reformed = { set_preferred_capital = 597 }
		}	
		if = { 
			limit = { 
				NOT = { year = 4000 }  
				is_alternate_start = no
			}
			d_harpy_reformed = { set_preferred_capital = 619 }
			d_gods_bone_mountains_reformed = { set_preferred_capital = 844 }
		}	
		#Set Seasons	
		if = { #Preceding Summer
			limit = { 
				year = 8124
				NOT = { year = 8130 }
			}
			set_global_flag = normal_summer
			set_character_flag = season_set
		}
		if = { #Post Dance Hard Winter
			limit = { 
				year = 8130
				NOT = { year = 8136 }
			}
			set_global_flag = asoiaf_harsh_winter
			set_character_flag = season_set
			if = { #End 
				limit = { year = 8135 }
				character_event = {
					id = seasons.6
					days = 150
					random = 50
				}
			}
		}
		if = { #Following Summer
			limit = { 
				year = 8136
				NOT = { year = 8140 }
			}
			set_global_flag = normal_summer
			set_character_flag = season_set
		}
		if = { #Great Spring
			limit = { 
				year = 8206
				NOT = { year = 8210 }
			}
			set_global_flag = asoiaf_normal_winter
			set_character_flag = season_set
			if = { #End 
				limit = { year = 8209 }
				character_event = {
					id = seasons.6
					days = 150
					random = 50
				}
			}
		}
		if = { #Following Summer
			limit = { 
				year = 8210
				NOT = { year = 8215 }
			}
			set_global_flag = normal_summer
			set_character_flag = season_set
		}
		if = { #Following Winter
			limit = { 
				year = 8215
				NOT = { year = 8221 }
			}
			set_global_flag = asoiaf_normal_winter
			set_character_flag = season_set
		}
		if = { #Maekar's Summer
			limit = { 
				year = 8221
				NOT = { year = 8228 }
			}
			set_global_flag = long_summer
			set_character_flag = season_set
			if = { #End 
				limit = { year = 8226 }
				character_event = {
					id = seasons.5
					days = 600
					random = 200
				}
			}
		}
		if = { #Followed by terrible winter
			limit = { 
				year = 8228
				NOT = { year = 8238 }
			}
			set_global_flag = asoiaf_harsh_winter
			set_character_flag = season_set
			if = { #End 
				limit = { year = 8235 }
				character_event = {
					id = seasons.6
					days = 600
					random = 200
				}
			}
		}
		if = { #254
			limit = { 
				year = 8252 
				NOT = { year = 8256 }
			}
			set_global_flag = asoiaf_normal_winter
			set_character_flag = season_set
		}
		if = { #Three year Winter
			limit = { 
				year = 8273 
				NOT = { year = 8276 }
			}
			set_global_flag = asoiaf_normal_winter
			set_character_flag = season_set
		}	
		if = { #Following Summer
			limit = {
				year = 8276
				NOT = { year = 8279 }
			}
			set_global_flag = normal_summer
			set_character_flag = season_set
		}		
		if = { #Year of the False Spring
			limit = { 
				year = 8279 
				NOT = { year = 8282 }
			}
			set_global_flag = asoiaf_normal_winter
			set_character_flag = season_set
		}
		if = { #Following Summer
			limit = {
				year = 8282 
				NOT = { year = 8285 }
			}
			set_global_flag = normal_summer
			set_character_flag = season_set
		}
		if = { #Following Winter
			limit = {
				year = 8285 
				NOT = { year = 8288 }
			}
			set_global_flag = asoiaf_normal_winter
			set_character_flag = season_set
		}
		if = { #The Long Summer
			limit = {
				year = 8288
				NOT = { year = 8300 }
			}
			set_global_flag = long_summer
			set_character_flag = season_set
			if = { #End durin AFFC
				limit = { year = 8298 }
				character_event = {
					id = seasons.5
					days = 600
					random = 200
				}
			}
		}
		if = { #AFFC
			limit = { year = 8300 }
			set_global_flag = asoiaf_harsh_winter
			set_character_flag = season_set
		}
		if = { #If not set, set random season
			limit = { NOT = { has_character_flag = season_set } }
			random_list = {
				50 = {
					random_list = {
						20 = {
							set_global_flag = short_summer
						}
						60 = {		
							set_global_flag = normal_summer
						}
						20 = {
							set_global_flag = long_summer
						}
					}
				}
				50 = {
					random_list = {
						20 = {
							set_global_flag = asoiaf_mild_winter
						}
						60 = {		
							set_global_flag = asoiaf_normal_winter
						}
						20 = {
							set_global_flag = asoiaf_harsh_winter
						}
					}
				}
			}
		}
		clr_character_flag = season_set
		#Robert's Rebellion, effects moved to history files
		# if = { 
			# limit = { 
				# year = 8282 
				# NOT = { year = 8284 }
			# } 		
		# }
		#Crowned Stag
		# if = { 
			# limit = { 
				# year = 8284 
				# OR = {
					# NOT = { year = 8299 }
					# AND = {
						# year = 8299 
						# NOT = { month = 1 }
					# }
				# }	
			# }
		# }	
		###A Clash of Kings/ A Storm of Swords ###
		# if = { 
			# limit = { 
				# year = 8299 
				# month = 1
			# }	
			# ##Storm of Swords
			# if = {
				# limit = { month = 6 } 
			# }	
		# }	
		#Oldtown Commander
		c_oldtown = {
			holder_scope = {
				character_event = { id = roberts_rebellion.20  }
			}
		}
		#Kingsguard Counter
		d_kingsguard = {
			holder_scope = {
				character_event = { id = kingsguard.16  days = 1 }
			}
		}
		#Citadel Maintenance
		if = {
			limit = { c_the_citadel = { has_holder = no } }
			create_random_priest = {
				random_traits = yes
				trait = archmaester 
				dynasty = none
				female = no
				culture = reachman
				religion = the_seven
				historical = yes
				trait = scholarly_theologian
			}
			new_character = {			
				change_learning = 5
				c_the_citadel = { gain_title = PREV }
			}
		}		
		c_the_citadel = {
			holder_scope = {
				save_event_target_as = citadel_holder
				join_society = hermetics
				society_rank_up = 3
				set_society_grandmaster = yes
				
				if = {
					limit = { 
						NOT = { has_landed_title = b_the_citadel } 
						is_alternate_start = no
					}
					b_the_citadel = { gain_title = PREV }
					d_oldtown = {
						holder_scope = {
							event_target:citadel_holder = { set_defacto_liege = PREV }
						}
					}
				}	
				else_if = {
					limit = { is_alternate_start = yes }
					random_playable_ruler = {
						limit = {
							can_host_citadel_trigger = yes
						}
						random_vassal = {
							limit = {
								primary_title = { 
									NOT = { holding_type = temple } 
									NOT = { base_value_5_trigger = yes }
									NOT = { base_value_6_trigger = yes }
								}
								tier = BARON
								is_patrician = no
							}
							preferred_limit = { primary_title = { holding_type = city } }
							primary_title = {	
								gain_title = event_target:citadel_holder 
								set_name = b_the_citadel
							}						
						}
						event_target:citadel_holder = { set_defacto_liege = PREV }
					}
				}
				set_government_type = republic_government
				if = {
					limit = { NOT = { trait = archmaester } }
					culture = reachman
					religion = the_seven
					add_trait = archmaester
					change_learning = 5
					remove_trait = amateurish_plotter
					remove_trait = flamboyant_schemer
					remove_trait = intricate_webweaver
					remove_trait = elusive_shadow
					remove_trait = naive_appeaser
					remove_trait = underhanded_rogue
					remove_trait = charismatic_negotiator
					remove_trait = grey_eminence
					remove_trait = indulgent_wastrel
					remove_trait = thrifty_clerk
					remove_trait = fortune_builder
					remove_trait = midas_touched
					remove_trait = misguided_warrior
					remove_trait = tough_soldier
					remove_trait = skilled_tactician
					remove_trait = brilliant_strategist
					remove_trait = detached_priest
					remove_trait = martial_cleric
					remove_trait = scholarly_theologian
					remove_trait = mastermind_theologian					
					random_list = {
						50 = { 
							add_trait = scholarly_theologian 
						}
						50 = { 
							add_trait = mastermind_theologian 
						}
					}
				}
				if = {
					limit = { NOT = { has_character_flag = choosing_hermetic_art } }
					add_random_maester_specialisation_effect = yes
				}
				if = { 
					limit = { trait = mastermind_theologian }
					while = {
						limit = { NOT = { has_links_level_4_trigger = yes } }
						add_random_maester_link_effect = yes
					}
				}
				else = {
					while = {
						limit = { NOT = { has_links_level_3_trigger = yes } }
						add_random_maester_link_effect = yes
					}
				}
				any_artifact = {
					limit = { artifact_type = glass_candle }
					set_artifact_flag = citadel_owned
				}
				any_courtier = {
					any_artifact = {
						limit = { artifact_type = glass_candle }
						set_artifact_flag = citadel_owned
					}
				}				
				if = {
					limit = { 
						NOT = { 
							any_courtier = {
								trait = archmaester 
								NOT = { character = event_target:citadel_holder }
							}	
						} 
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = reachman
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = valeman
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = stormlander
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = northman
						religion = old_gods
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = crownlander
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = reachman
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = westerman
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
					create_random_priest = {
						random_traits = yes
						trait = archmaester 
						dynasty = none
						female = no
						culture = salt_dornish
						religion = the_seven
						historical = yes
					}
					new_character = {
						set_character_flag = random_archmaester
					}
				}	
				any_courtier = {
					limit = { has_character_flag = random_archmaester }
					clr_character_flag = random_archmaester
					remove_trait = martial_cleric
					remove_trait = scholarly_theologian
					remove_trait = mastermind_theologian
					remove_trait = detached_priest
					random_list = {
						50 = { 
							add_trait = scholarly_theologian 
							add_random_maester_specialisation_effect = yes
							while = {
								limit = { NOT = { has_links_level_3_trigger = yes } }
								add_random_maester_link_effect = yes
							}
						}
						50 = { 
							add_trait = mastermind_theologian 
							add_random_maester_specialisation_effect = yes
							while = {
								limit = { NOT = { has_links_level_4_trigger = yes } }
								add_random_maester_link_effect = yes
							}
						}
					}
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					remove_trait = infirm
					remove_trait = incapable
					remove_trait = leper
					remove_trait = possessed
					remove_trait = ill
					remove_trait = pneumonic
					remove_trait = maimed
					change_stewardship = 3
					change_diplomacy = 3
					change_intrigue = 3
				}
				any_courtier = {
					limit = { trait = archmaester }
					give_minor_title = title_archmaester
					set_character_flag = no_court_invites
					join_society = hermetics
					while = {
						limit = { NOT = { society_rank == 4 } }
						society_rank_up = 1
					}	
					if = {
						limit = { NOT = { has_character_flag = choosing_hermetic_art } }
						add_random_maester_specialisation_effect = yes
					}
					while = {
						limit = { NOT = { has_links_level_3_trigger = yes } }
						add_random_maester_link_effect = yes
					}
				}
			}	
		}	
		archmaester = {
			limit = { has_character_flag = grandmaester }
			give_minor_title = title_grandmaester
			give_job_title = job_physician
			join_society = hermetics
			society_rank_up = 3
			if = {
				limit = { NOT = { has_character_flag = choosing_hermetic_art } }
				add_random_maester_specialisation_effect = yes
			}
			if = { 
				limit = { trait = mastermind_theologian }
				while = {
					limit = { NOT = { has_links_level_4_trigger = yes } }
					add_random_maester_link_effect = yes
				}
			}
			else = {
				while = {
					limit = { NOT = { has_links_level_3_trigger = yes } }
					add_random_maester_link_effect = yes
				}
			}
			e_iron_throne = {
				holder_scope = { ROOT = { move_character = PREV } }
			}
			give_job_title = job_physician
			if = {
				limit = { has_dlc = "Zeus" }
				give_minor_title = title_teacher
			}
		}
		# #Religious Authority
		# if = {
			# limit = { NOT = { year = 8058 } }
			# k_the_most_devout = {
				# holder_scope = {
					# religion_authority = 0.2
				# }
			# }
		# }
		# if = {
			# limit = { year = 8058 } 
			# k_the_most_devout = {
				# holder_scope = {
					# religion_authority = -0.4
				# }
			# }
		# }
		# c_pyke = {
			# holder_scope = {
				# religion_authority = -0.25
			# }
		# }
		# c_winterfell = {
			# holder_scope = {
				# religion_authority = -0.4
			# }
		# }
		#golden company
		k_golden_company = {
			holder_scope = {
				d_golden_company = {
					holder_scope = {
						abdicate_to = PREVPREV
					}
					copy_title_history = k_golden_company
				}
				activate_title = { title = k_golden_company status = no }
				k_golden_company = { destroy_landed_title = THIS }
			}
		}
		#Initialise unoccupied provinces
		character_event = { id = unoccupied.1 }
		#NIGHTS WATCH
		if = {
			limit = {
				is_alternate_start = yes
				has_alternate_start_setting = { setting = random_scenario_nights_watch option = checked } 
			}
			#Mark NW cultures
			any_province = {
				limit = { 
					region = world_westeros
					OR = {
						region = world_the_wall
						NOT = { region = world_beyond_the_wall }	
					}
				}	
				owner = { 
					if = {
						limit = { 
							culture_scope = { check_variable = { which = alt_start_wildling_culture value = 1 } }
							NOT = { culture = ruin }
						}	
						add_trait = wildling 
						set_government_type = wildling_feudal_government
					}
				}	
				culture_scope = { 
					if = {
						limit = {
							NOT = { check_variable = { which = alt_start_wildling_culture value = 1 } }
							NOT = { check_variable = { which = alt_start_NW_culture value = 1 } }
						}
						set_variable = { which = alt_start_NW_culture value = 1 }
					}	
				}
			}
		}
		if = { #If Nightswatch has no holder choose one randomly
			limit = { 
				OR = {
					AND = {
						c_castle_black = {
							holder_scope = {
								NOT = { trait = nightswatch }
							}
						}
						is_alternate_start = no
					}
					AND = {
						is_alternate_start = yes
						d_nightswatch = { has_holder = no }
						has_alternate_start_setting = { setting = random_scenario_nights_watch option = checked } 
					}
				}	
			}
			random_character = {
				limit = {
					is_female = no
					age = 16
					nightswatch_culture_trigger = yes
					is_primary_heir = no
					is_ruler = no
					is_married = no
					NOT = { num_of_children = 1 }
					can_press_claims_trigger = yes
					father_even_if_dead = {
						always = yes
					}
				}
				add_trait = nightswatch
				set_character_flag = no_court_invites				
				d_nightswatch = { gain_title = PREV }
				set_government_type = NW_government
				if = {
					limit = { is_alternate_start = no }
					c_castle_black = { gain_title = PREV }
					character_event = { id = nightswatch.21 }
				}
			}	
		}
		#Night's Watch Initialisation
		d_nightswatch = {
			holder_scope = {
				character_event = { id = nightswatch.999 }
			}
		}		
		#The Pentosi Maids
		d_prince_pentos = {
			holder_scope = {
				create_character = {
					random_traits = yes
					dynasty = NONE
					female = yes
					religion = rhllor
					age = 15
				}
				new_character = {
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					remove_trait = infirm
					remove_trait = incapable
					remove_trait = leper
					remove_trait = possessed
					remove_trait = ill
					remove_trait = pneumonic
					remove_trait = maimed
					remove_trait = crippled
					add_trait = fair
					add_trait = disinherited
					add_trait = forbid_marriage
					give_minor_title = title_maid_fields
				}
				create_character = {
					random_traits = yes
					dynasty = NONE
					female = yes
					religion = rhllor
					age = 15
				}
				new_character = {
					remove_trait = imbecile
					remove_trait = inbred
					remove_trait = slow
					remove_trait = infirm
					remove_trait = incapable
					remove_trait = leper
					remove_trait = possessed
					remove_trait = ill
					remove_trait = pneumonic
					remove_trait = maimed
					remove_trait = crippled
					add_trait = fair
					add_trait = disinherited
					add_trait = forbid_marriage
					give_minor_title = title_maid_seas
				}
			}
		}
		#wildling event
		any_playable_ruler = {
			limit = {
				wildling_culture_trigger = yes
			}
			character_event = { id = wildling.1 }
			#make sure capital holding has level 1 barracks
			if = {
				limit = {
					NOT = { has_game_rule = { name = symmetrical_start value = on } }
					is_alternate_start = no
				}
				capital_holding = {
					if = {
						limit = {
							holding_type = castle
							NOT = { has_building = ca_wildling_barracks }
						}
						add_building = ca_wildling_barracks
						holder_scope = { character_event = { id = maintenance.34 days = 2 } } #refill levy
					}
				}
			}	
		}
		#pirate event
		any_playable_ruler = {
			limit = {
				OR = {
					religion = pirate
					religion = corsair
				}
			}
			character_event = { id = pirate.1 }
			character_event = { id = pirate.199 }
			if = {
				limit = {
					NOT = { has_game_rule = { name = symmetrical_start value = on } }
					is_alternate_start = no
				}
				#make sure capital holding has level 1 pirate den
				capital_holding = {
					if = {
						limit = {
							holding_type = castle
							NOT = { has_building = ca_asoiaf_pirateshipyard }
						}
						add_building = ca_asoiaf_pirateshipyard
						holder_scope = { character_event = { id = maintenance.34 days = 2 } } #refill levy
					}
				}
			}	
		}
		#dothraki events
		character_event = { id = dothraki.900 } #Initialise Dothraki Domain
		#High Septon
		k_the_most_devout = {
			if = { #make sure it has holder
				limit = { has_holder = no }
				create_random_priest = {
					random_traits = yes
					dynasty = NONE
					religion = the_seven
					culture = reachman
					female = no
					historical = yes
				}
				new_character = {
					change_learning = 7
					if = {
						limit = { NOT = { age = 50 } }
						add_age = 15
					}	
					add_trait = septon
					gain_title = PREV
				}
			}
			holder_scope = {
				if = {
					limit = { 
						year = 8165 
						is_alternate_start = no
					}
					k_the_most_devout = {
						holder_scope = {
							b_great_sept_of_baelor = {
								gain_title = PREV
							}
						}
					}	
				}			
			}
		}
		#Kill rogue 40000 year old Valkyn
		if = {
			limit = { NOT = { year = 8271 } }
			strangers_mercy = {
				limit = { dynasty=10003 }
				remove_trait = strangers_mercy
				set_character_flag = no_funeral
				death = yes
			}
		}		
		#If Iron Throne does not exist, destroy dejure
		if = {
			limit = { 
				e_iron_throne = { has_holder = no } 
				is_alternate_start = no
				has_game_rule = { name = shattered_realms value = off }
			}
			k_north = { de_jure_liege = e_north }
			k_riverlands = { de_jure_liege = e_riverlands }
			k_vale = { de_jure_liege = e_vale }
			k_westerlands = { de_jure_liege = e_westerlands }
			k_reach = { de_jure_liege = e_reach }
			k_dorne = { de_jure_liege = e_dorne }
			k_stormlands = { de_jure_liege = e_stormlands }
			k_iron_isles = { de_jure_liege = e_iron_isles }
			d_kings_landing = { de_jure_liege = k_stormlands }
			d_kingswood = { de_jure_liege = k_stormlands }
			d_masseys_hook = { de_jure_liege = k_stormlands }
			d_blackwater_rush = { de_jure_liege = k_riverlands }
			d_rosby = { de_jure_liege = k_riverlands }
			d_duskendale = { de_jure_liege = k_riverlands }
			d_hayford = { de_jure_liege = k_riverlands }
			d_stokeworth = { de_jure_liege = k_riverlands }
			if = {
				limit = { year = 8001 }
				d_crackclaw_point = { de_jure_liege = k_riverlands }
				d_dragonstone = { de_jure_liege = k_stormlands }
			}
		}
		#Set title law flags in other realms
		any_independent_ruler = {
			limit = {
				NOT = { culture_group = unoccupied_group }
				NOT = { has_landed_title = e_dorne }
				NOT = { has_landed_title = e_new_valyria }
				NOT = { has_landed_title = e_iron_throne }
				NOT = { has_landed_title = e_yi_ti }
				OR = {
					NOT = { capital_scope = { region = world_westeros } }
					trait = wildling
					trait = nightswatch
				}
			}
			any_demesne_title = { 
				limit = { 
					NOT = { tier = BARON } 
					NOT = { tier = EMPEROR }
				}
				set_variable = { which = "de_facto_empire" value = 0 } 
			}
			any_realm_lord = { 
				any_demesne_title = { 
					limit = { 
						NOT = { tier = BARON } 
						NOT = { tier = EMPEROR }
					}
					set_variable = { which = "de_facto_empire" value = 0 } 
				}
			}
		}
		if = {
			limit = { 
				NOT = { year = 8001 } 
				is_alternate_start = no
			}
			k_dragonstone = {
				any_de_jure_vassal_title = { 
					limit = { NOT = { tier = BARON } }
					set_variable = { which = "de_facto_empire" value = 0 } 
				} 
			}
			k_crackclaw_point = {
				any_de_jure_vassal_title = { 
					limit = { NOT = { tier = BARON } }
					set_variable = { which = "de_facto_empire" value = 0 } 
				}
			}
		}
		#Set mega war title law flags
		e_rebels = { set_variable = { which = "de_facto_empire" value = 21 } } #e_rebels counts how many empires have been flagged
		e_iron_throne = { set_variable = { which = "de_facto_empire" value = 1 } }
		e_north = { set_variable = { which = "de_facto_empire" value = 2 } }
		e_iron_isles = { set_variable = { which = "de_facto_empire" value = 3 } }
		e_vale = { set_variable = { which = "de_facto_empire" value = 4 } }
		e_westerlands = { set_variable = { which = "de_facto_empire" value = 5 } }
		e_reach = { set_variable = { which = "de_facto_empire" value = 6 } }
		e_stormlands = { set_variable = { which = "de_facto_empire" value = 7 } }
		e_dorne = { set_variable = { which = "de_facto_empire" value = 8 } }
		e_riverlands = { set_variable = { which = "de_facto_empire" value = 9 } }
		e_mexikha = { set_variable = { which = "de_facto_empire" value = 10 } }
		e_new_valyria = { set_variable = { which = "de_facto_empire" value = 11 } }
		e_three_daughters = { set_variable = { which = "de_facto_empire" value = 12 } }
		e_braavos = { set_variable = { which = "de_facto_empire" value = 13 } }
		e_ghiscar = { set_variable = { which = "de_facto_empire" value = 14 } }
		e_qarth = { set_variable = { which = "de_facto_empire" value = 15 } }
		e_yi_ti = { set_variable = { which = "de_facto_empire" value = 17 } }
		e_summer_sea = { set_variable = { which = "de_facto_empire" value = 18 } }
		e_khalasar = { set_variable = { which = "de_facto_empire" value = 19 } }
		e_jkhalasar = { set_variable = { which = "de_facto_empire" value = 20 } }
		
		e_rebels = { set_variable = { which = "de_facto_kingdom" value = 46 } } #e_rebels counts how many kingdoms have been flagged
		k_the_most_devout = { set_variable = { which = "de_facto_kingdom" value = 1 } }
		k_north = { set_variable = { which = "de_facto_kingdom" value = 2 } }
		k_riverlands = { set_variable = { which = "de_facto_kingdom" value = 3 } }
		k_vale = { set_variable = { which = "de_facto_kingdom" value = 4 } }
		k_iron_isles = { set_variable = { which = "de_facto_kingdom" value = 5 } }
		k_reach = { set_variable = { which = "de_facto_kingdom" value = 6 } }
		k_dorne = { set_variable = { which = "de_facto_kingdom" value = 7 } }
		k_stormlands = { set_variable = { which = "de_facto_kingdom" value = 8 } }
		k_westerlands = { set_variable = { which = "de_facto_kingdom" value = 9 } }
		k_beyond_wall = { set_variable = { which = "de_facto_kingdom" value = 10 } }
		k_summer_islands = { set_variable = { which = "de_facto_kingdom" value = 11 } }
		k_basilisk_isles = {set_variable = { which = "de_facto_kingdom" value = 12 } }
		k_stepstones = { set_variable = { which = "de_facto_kingdom" value = 13 } }
		k_pentos = { set_variable = { which = "de_facto_kingdom" value = 14 } }
		k_lys = { set_variable = { which = "de_facto_kingdom" value = 15 } }
		k_qohor = { set_variable = { which = "de_facto_kingdom" value = 16 } }
		k_norvos = { set_variable = { which = "de_facto_kingdom" value = 17 } }
		k_myr = { set_variable = { which = "de_facto_kingdom" value = 18 } }
		k_tyrosh = { set_variable = { which = "de_facto_kingdom" value = 19 } }
		k_volantis = { set_variable = { which = "de_facto_kingdom" value = 20 } }
		k_lorath = { set_variable = { which = "de_facto_kingdom" value = 21 } }
		k_braavos = { set_variable = { which = "de_facto_kingdom" value = 22 } }
		k_yunkai = { set_variable = { which = "de_facto_kingdom" value = 23 } }
		k_astapor = { set_variable = { which = "de_facto_kingdom" value = 24 } }
		k_meereen = { set_variable = { which = "de_facto_kingdom" value = 25 } }
		k_new_ghis = { set_variable = { which = "de_facto_kingdom" value = 26 } }
		k_lhazar = { set_variable = { which = "de_facto_kingdom" value = 27 } }
		k_hazdahn = { set_variable = { which = "de_facto_kingdom" value = 28 } }
		k_ibben = { set_variable = { which = "de_facto_kingdom" value = 29 } }
		k_qarth = { set_variable = { which = "de_facto_kingdom" value = 30 } }
		k_leng = { set_variable = { which = "de_facto_kingdom" value = 31 } }
		k_asabhad = { set_variable = { which = "de_facto_kingdom" value = 32 } }
		k_asshai = { set_variable = { which = "de_facto_kingdom" value = 33 } }
		k_yin = { set_variable = { which = "de_facto_kingdom" value = 34 } }
		k_jinqi = { set_variable = { which = "de_facto_kingdom" value = 35 } }
		k_tiqui = { set_variable = { which = "de_facto_kingdom" value = 36 } }
		k_linqi = { set_variable = { which = "de_facto_kingdom" value = 37 } }
		k_piqui = { set_variable = { which = "de_facto_kingdom" value = 38 } }
		k_xin = { set_variable = { which = "de_facto_kingdom" value = 39 } }
		k_trader_town = { set_variable = { which = "de_facto_kingdom" value = 40 } }
		k_nghai = { set_variable = { which = "de_facto_kingdom" value = 41 } }
		k_dothraki = { set_variable = { which = "de_facto_kingdom" value = 42 } }
		k_ifeqevron = { set_variable = { which = "de_facto_kingdom" value = 43 } }
		k_jogos_nhai = { set_variable = { which = "de_facto_kingdom" value = 44 } }
		k_sarnor = { set_variable = { which = "de_facto_kingdom" value = 45 } }
		
		#Westerosi kingdoms also get defacto kingdom flag for independence wars
		e_north = { set_variable = { which = "de_facto_kingdom" value = 2 } }
		e_riverlands = { set_variable = { which = "de_facto_kingdom" value = 3 } }
		e_vale = { set_variable = { which = "de_facto_kingdom" value = 4 } }
		e_iron_isles = { set_variable = { which = "de_facto_kingdom" value = 5 } }
		e_reach = { set_variable = { which = "de_facto_kingdom" value = 6 } }
		e_dorne = { set_variable = { which = "de_facto_kingdom" value = 7 } }
		e_stormlands = { set_variable = { which = "de_facto_kingdom" value = 8 } }
		e_westerlands = { set_variable = { which = "de_facto_kingdom" value = 9 } }
		
		e_iron_throne = {
			if = {
				limit = { has_holder = yes }
				any_de_jure_vassal_title = { 
					limit = { 
						NOT = { holder_scope = { culture = ruin } } 
						NOT = { tier = BARON }
						NOT = { tier = EMPEROR }
					}
					set_variable = { which = "de_facto_empire" value = 1 }
				}
			}	
		}
		
		#Set mega war links
		any_independent_ruler = {
			limit = {
				NOT = { tier = EMPEROR }
				NOT = { culture_group = unoccupied_group }
				primary_title = { check_variable = { which = "de_facto_empire" value = 1 } }
			}
			character_event = { id = mega_wars.42 }
		}
		# if = { #Rebuild split empire realms if mega wars are off
			# limit = {
				# has_game_rule = { name = mega_wars value = off }
			# }
			# any_playable_ruler = {
				# limit = { 
					# OR = {
						# trait = civil_war 
						# trait = rebel_leader
					# }	
				# }
				# remove_trait = civil_war
				# clr_character_flag = harsh_justice
				# clr_character_flag = issue_punishments
				# clr_character_flag = supporting_king 
				# clr_character_flag = neutral
				# clr_character_flag = against_king 
				# clr_character_flag = rebel_leader
				# clr_character_flag = join_independance_asked
				# clr_character_flag = no_kingship
				# remove_trait = rebel_leader
				# clr_character_flag = mega_war_decision_cooldown
				# any_opinion_modifier_target = {
					# remove_opinion = { who = ROOT modifier = opinion_with_rebel_leader }		
					# remove_opinion = { who = ROOT modifier = opinion_with_king }	
					# remove_opinion = { who = ROOT modifier = opinion_emperor_rebel_leader }			
				# }	
			# }
			# any_independent_ruler = {
				# limit = {
					# tier = KING
					# NOT = { has_character_flag = independant }
					# primary_title = { check_variable = { which = "de_facto_empire" value = 1 } }
					# NOT = { liege_before_war = { NOT = { character = PREV } } }
				# }
				# set_character_flag = mega_wars_disabled
				# character_event = { id = mega_wars.9 days = 1 }
			# }
			# any_independent_ruler = {
				# limit = {
					# OR = {
						# tier = KING
						# tier = DUKE
					# }
					# NOT = { has_character_flag = independant }
					# primary_title = { check_variable = { which = "de_facto_empire" value = 1 } }
					# NOT = { liege_before_war = { NOT = { character = PREV } } }
				# }
				# set_character_flag = mega_wars_disabled
				# character_event = { id = mega_wars.900 days = 1 }
			# }
		# }	
		#Canon feauds
		if = {
			limit = { is_alternate_start = no }
			d_southstone = { #blackwood/bracken
				holder_scope = {
					character_event = { id = dynastic_rivalry.200 }
				}
			}
			d_blackwood = {
				holder_scope = {
					character_event = { id = dynastic_rivalry.200 }
				}
			}	
			c_blackgrove = { # Forrester/Whitehill rivalry
				holder_scope = {
					character_event = { id = dynastic_rivalry.201 }
				}
			}
			c_aylesvale = {
				holder_scope = {
					character_event = { id = dynastic_rivalry.201 }
				}
			}
			if = {
				limit = { start_date = 7300.1.1 }
				c_yronwood = { # Yronwood/Fowler rivalry
					holder_scope = {
						character_event = { id = dynastic_rivalry.202 }
					}
				}
				c_skyreach = {
					holder_scope = {
						character_event = { id = dynastic_rivalry.202 }
					}
				}
			}	
			if = { # Manderly/Peake rivalry
				limit = { c_whiteharbor = { dynasty = 80 } } 
				c_whiteharbor = { 
					holder_scope = {
						character_event = { id = dynastic_rivalry.203 }
					}
				}
				c_starpike = {
					holder_scope = {
						character_event = { id = dynastic_rivalry.203 }
					}
				}
			}	
			if = { # Wyl-Cafferen/Oakheart/Baratheon rivalry
				limit = { year = 8004 } 
				c_wyl = {
					holder_scope = {
						character_event = { id = dynastic_rivalry.204 }
					}
				}
				c_old_oak = {
					holder_scope = {
						character_event = { id = dynastic_rivalry.204 }
					}
				}
				c_fawnton = {
					holder_scope = {
						character_event = { id = dynastic_rivalry.204 }
					}
				}
				c_storms_end = {
					holder_scope = {
						character_event = { id = dynastic_rivalry.204 }
					}
				}
			}
			#Trigger Mega War if valid
			if = {
				limit = {
					e_iron_throne = { holder_scope = { NOT = { trait = civil_war } } }
					year = 8001
					OR = {
						NOT = { year = 8129 }
						year = 8130
					}
					OR = {
						NOT = { year = 8195 }
						year = 8196
					}
					OR = {
						NOT = { year = 8282 }
						year = 8284
					}
					NOT = { year = 8299 }
				}
				e_iron_throne = {
					holder_scope = {
						character_event = { id = mega_wars.3 }
					}
				}
			}	
			any_independent_ruler = {
				limit = {
					tier = EMPEROR
					NOT = { has_landed_title = e_iron_throne }
					demesne_size = 1
					is_nomadic = no				
				}
				character_event = { id = mega_wars.3 }
			}
		}	
		#primogeniture for all
		# any_independent_ruler = {
			# limit = { 
				# NOT = { trait = wildling }
			# }	
			# any_realm_lord = {
				# limit = { 
					# is_feudal = yes
					# is_patrician = no
					# NOT = { trait = kingsguard }
					# NOT = { trait = archmaester }
					# NOT = { trait = nightswatch }
					# NOT = { trait = wildling }
					# NOT = { seniority_culture_trigger = yes }
					# NOT = { culture = lhazareen }
					# NOT = { religion = pirate }
					# NOT = { religion = corsair }
				# }	
				# any_demesne_title = {
					# limit = { 
						# NOT = { duchy = { title = d_the_wall } }	
						# NOT = { title = c_bloody_gate } 	
						# NOT = { title = d_poor_fellows } 	
						# NOT = { title = d_warriors_sons } 	
						# NOT = { title = c_driftmark }
						# NOT = { is_landless_type_title = yes }
					# }
					# succession = primogeniture
				# }
				# if = {
					# limit = { culture = ironborn } #ironborn are agnatic
					# any_demesne_title = {
						# limit = { 
							# NOT = { duchy = { title = d_the_wall } }	
							# NOT = { title = c_bloody_gate } 	
							# NOT = { title = d_poor_fellows } 	
							# NOT = { title = d_warriors_sons } 
							# NOT = { is_landless_type_title = yes }
						# }
						# gender_succ = agnatic
					# }
				# }
				# if = {
					# limit = { 
						# culture_group = dornish #dornish are cognatic
					# } 
					# any_demesne_title = {
						# limit = { 
							# NOT = { duchy = { title = d_the_wall } }	
							# NOT = { title = c_bloody_gate } 	
							# NOT = { title = d_poor_fellows } 	
							# NOT = { title = d_warriors_sons } 
							# NOT = { is_landless_type_title = yes }
						# }
						# gender_succ = true_cognatic
					# }
				# }
				# recalc_succession = yes
			# }
			# if = {
				# limit = { 
					# culture_group = dornish #dornish are cognatic
				# } 
				# any_demesne_title = {
					# limit = { 
						# NOT = { duchy = { title = d_the_wall } }	
						# NOT = { title = c_bloody_gate } 	
						# NOT = { title = d_poor_fellows } 	
						# NOT = { title = d_warriors_sons } 
						# NOT = { is_landless_type_title = yes }
					# }
					# gender_succ = true_cognatic
				# }
			# }
			# recalc_succession = yes
		# }
		##Give Slavers some slaves
		if = {
			limit = {
				NOT = { has_game_rule = { name = symmetrical_start value = on } }
				NOT = { has_game_rule = { name = slavery value = off } }
				is_alternate_start = no
			}
			if = {
				limit = { NOT = { year = 4000 } }
				e_ghiscar = {
					holder_scope = {
						set_dynasty_flag = flag_slaver_tradition
						add_trait = slave_trader
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
							add_building = ca_asoiaf_slavepit_3
							add_building = ca_asoiaf_slavepit_4
							add_building = ca_asoiaf_slavepit_5
						}
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				k_meereen = {
					holder_scope = {
						set_dynasty_flag = flag_slaver_tradition
						add_trait = slave_trader
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
							add_building = ca_asoiaf_slavepit_3
						}
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				k_astapor = {
					holder_scope = {
						set_dynasty_flag = flag_slaver_tradition
						add_trait = slave_trader
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
							add_building = ca_asoiaf_slavepit_3
						}
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				k_yunkai = {
					holder_scope = {
						set_dynasty_flag = flag_slaver_tradition
						add_trait = slave_trader
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
							add_building = ca_asoiaf_slavepit_3
						}
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				k_yunkai = {
					holder_scope = {
						set_dynasty_flag = flag_slaver_tradition
						add_trait = slave_trader
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
							add_building = ca_asoiaf_slavepit_3
						}
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
			}
			if = {
				limit = { year = 7886 }					
				if = {
					limit = { NOT = { year = 8300 } }
					k_meereen = {
						holder_scope = {
							set_dynasty_flag = flag_slaver_tradition
							add_trait = slave_trader
							add_trait = slave_owner
							family_palace = {
								add_building = fp_asoiaf_slavepit_1
								add_building = fp_asoiaf_slavepit_2
								add_building = fp_asoiaf_slavepit_3
							}
							character_event = { id = slavery.4004 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
							any_vassal = {
								limit = { is_patrician = yes }
								set_dynasty_flag = flag_slaver_tradition
								add_trait = slave_trader
								add_trait = slave_owner
								family_palace = {
									add_building = fp_asoiaf_slavepit_1
									add_building = fp_asoiaf_slavepit_2
									add_building = fp_asoiaf_slavepit_3
								}
								character_event = { id = slavery.4004 }
								character_event = { id = maintenance.34 days = 2 } #refill levy
							}
						}
					}
					k_astapor = {
						holder_scope = {
							set_dynasty_flag = flag_slaver_tradition
							add_trait = slave_trader
							add_trait = slave_owner
							family_palace = {
								add_building = fp_asoiaf_slavepit_1
								add_building = fp_asoiaf_slavepit_2
								add_building = fp_asoiaf_unsullied_1
								add_building = fp_asoiaf_unsullied_2
							}
							character_event = { id = slavery.4004 days = 1 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
							any_vassal = {
								limit = { is_patrician = yes }
								set_dynasty_flag = flag_slaver_tradition
								add_trait = slave_trader
								add_trait = slave_owner
								family_palace = {
									add_building = fp_asoiaf_slavepit_1
									add_building = fp_asoiaf_slavepit_2
									add_building = fp_asoiaf_unsullied_1
									add_building = fp_asoiaf_unsullied_2
								}
								character_event = { id = slavery.4004 days = 2 }
								character_event = { id = maintenance.34 days = 2 } #refill levy
							}
						}
					}
				}
				k_yunkai = {
					holder_scope = {
						set_dynasty_flag = flag_slaver_tradition
						add_trait = slave_trader
						add_trait = slave_owner
						family_palace = {
							add_building = fp_asoiaf_slavepit_1
							add_building = fp_asoiaf_slavepit_2
							add_building = fp_asoiaf_slavepit_3
						}
						character_event = { id = slavery.4004 days = 3 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
						any_vassal = {
							limit = { is_patrician = yes }
							set_dynasty_flag = flag_slaver_tradition
							add_trait = slave_trader
							add_trait = slave_owner
							family_palace = {
								add_building = fp_asoiaf_slavepit_1
								add_building = fp_asoiaf_slavepit_2
								add_building = fp_asoiaf_slavepit_3
							}
							character_event = { id = slavery.4004 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
						}
					}
				}
				d_gogossos = {
					holder_scope = {
						if = {
							limit = { is_merchant_republic = yes }
							set_dynasty_flag = flag_slaver_tradition
							add_trait = slave_trader
							add_trait = slave_owner
							family_palace = {
								add_building = fp_asoiaf_slavepit_1
								add_building = fp_asoiaf_slavepit_2
								add_building = fp_asoiaf_slavepit_3
							}
							character_event = { id = slavery.4004 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
							any_vassal = {
								limit = { is_patrician = yes }
								set_dynasty_flag = flag_slaver_tradition
								add_trait = slave_trader
								add_trait = slave_owner
								family_palace = {
									add_building = fp_asoiaf_slavepit_1
									add_building = fp_asoiaf_slavepit_2
									add_building = fp_asoiaf_slavepit_3
								}
								character_event = { id = slavery.4004 }
								character_event = { id = maintenance.34 days = 2 } #refill levy
							}
						}	
					}
				}
			}	
			k_volantis = {
				holder_scope = {
					add_trait = slave_trader
					add_trait = slave_owner
					family_palace = {
						add_building = fp_asoiaf_slavepit_1
						add_building = fp_asoiaf_slavepit_2
					}
					character_event = { id = slavery.4004 days = 1 }
					character_event = { id = maintenance.34 days = 2 } #refill levy
					any_vassal = {
						limit = { is_patrician = yes }
						add_trait = slave_trader
						add_trait = slave_owner
						family_palace = {
							add_building = fp_asoiaf_slavepit_1
							add_building = fp_asoiaf_slavepit_2
						}
						character_event = { id = slavery.4004 days = 2 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
			}
			k_qarth = {
				holder_scope = {
					any_vassal = {
						limit = { is_merchant_republic = yes }
						add_trait = slave_trader
						add_trait = slave_owner
						family_palace = { add_building = fp_asoiaf_slavepit_1 }
						character_event = { id = slavery.4004 days = 3 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
						any_vassal = {
							limit = { is_patrician = yes }
							family_palace = { add_building = fp_asoiaf_slavepit_1 }
							add_trait = slave_trader
							add_trait = slave_owner
							character_event = { id = slavery.4004 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
						}
					}
				}
			}
			k_lys = {
				holder_scope = {
					family_palace = { add_building = fp_asoiaf_slavepit_1 }
					character_event = { id = slavery.4004 days = 1 }
					character_event = { id = maintenance.34 days = 2 } #refill levy
					add_trait = slave_trader
					add_trait = slave_owner
					any_vassal = {
						limit = { is_patrician = yes }
						family_palace = { add_building = fp_asoiaf_slavepit_1 }
						character_event = { id = slavery.4004 days = 2 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
						add_trait = slave_trader
						add_trait = slave_owner
					}
				}
			}
			k_myr = {
				holder_scope = {
					family_palace = { add_building = fp_asoiaf_slavepit_1 }
					character_event = { id = slavery.4004 days = 3 }
					character_event = { id = maintenance.34 days = 2 } #refill levy
					add_trait = slave_trader
					add_trait = slave_owner
					any_vassal = {
						limit = { is_patrician = yes }
						family_palace = { add_building = fp_asoiaf_slavepit_1 }
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
						add_trait = slave_trader
						add_trait = slave_owner
					}
				}
			}
			d_tyrosh = {
				holder_scope = {
					family_palace = { add_building = fp_asoiaf_slavepit_1 }
					character_event = { id = slavery.4004 days = 1 }
					character_event = { id = maintenance.34 days = 2 } #refill levy
					add_trait = slave_trader
					add_trait = slave_owner
					any_vassal = {
						limit = { is_patrician = yes }
						family_palace = { add_building = fp_asoiaf_slavepit_1}
						character_event = { id = slavery.4004 days = 2 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
						add_trait = slave_trader
						add_trait = slave_owner
					}
				}
			}
			k_essaria = {
				holder_scope = {
					if = {
						limit = { is_nomadic = no }
						capital_holding = { add_building = ca_asoiaf_slavepit_1 }
						character_event = { id = slavery.4004 days = 3 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
						add_trait = slave_owner
						any_vassal = {
							limit = { higher_tier_than = COUNT }
							capital_holding = { add_building = ca_asoiaf_slavepit_1 }
							character_event = { id = slavery.4004 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
							add_trait = slave_owner
						}
					}	
				}
			}
			if = {
				limit = { year = 7886 }
				k_new_ghis = {
					holder_scope = {
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
						}
						character_event = { id = slavery.4004 days = 3 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				k_hazdahn = {
					holder_scope = {
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
							add_building = ca_asoiaf_slavepit_2
						}
						character_event = { id = slavery.4004 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				d_mantarys = {
					holder_scope = {
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
						}
						character_event = { id = slavery.4004 days = 1 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				d_tolos = {
					holder_scope = {
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
						}
						character_event = { id = slavery.4004 days = 2 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				d_elyria = {
					holder_scope = {
						add_trait = slave_owner
						capital_holding = {
							add_building = ca_asoiaf_slavepit_1
						}
						character_event = { id = slavery.4004 days = 3 }
						character_event = { id = maintenance.34 days = 2 } #refill levy
					}
				}
				k_skahazadhan = {
					holder_scope = {
						if = {
							limit = { is_nomadic = no }
							add_trait = slave_owner
							capital_holding = {
								add_building = ca_asoiaf_slavepit_1
								add_building = ca_asoiaf_slavepit_2
							}
							character_event = { id = slavery.4004 }
							character_event = { id = maintenance.34 days = 2 } #refill levy
						}	
					}
				}
			}	
		}	
		if = {
			limit = {
				has_game_rule = { name = slavery value = off }
			}
			any_character = {
				limit = { trait = slave }
				remove_trait = slave
				any_spouse = { remove_spouse = PREV }
				consort = { remove_consort = PREV }
				liege = {
					remove_opinion = { who = PREV modifier = opinion_my_slave }
					reverse_remove_opinion = { who = PREV modifier = opinion_my_owner }
				}
			}
			any_character = {
				limit = { trait = slave_owner }
				remove_trait = slave_owner
			}
			any_character = {
				limit = { trait = slave_trader }
				remove_trait = slave_trader
			}
			any_title = {
				limit = { 
					tier = BARON
					OR = {
						has_building = ca_asoiaf_slavepit_1
						has_building = ct_asoiaf_slavepit_1
						has_building = tp_asoiaf_slavepit_1
						has_building = fp_asoiaf_slavepit_1
						has_building = no_asoiaf_slavepit_1
					}
				}
				remove_building = ca_asoiaf_slavepit_1
				remove_building = ct_asoiaf_slavepit_1
				remove_building = tp_asoiaf_slavepit_1
				remove_building = fp_asoiaf_slavepit_1
				remove_building = no_asoiaf_slavepit_1
			}
		}	
		#matrilineal inheritance check
		any_playable_ruler = { #check own marriage
			limit = { 
				is_female = yes	
				is_married = yes
				is_married_matrilineally = no
				spouse = { is_ruler = no }
			}	
			set_character_flag = no_wedding_event
			spouse = {
				set_character_flag = no_wedding_event
				remove_spouse = spouse
				add_spouse_matrilineal = PREV
				clr_character_flag = no_wedding_event
			}
			clr_character_flag = no_wedding_event
			prestige = 150
		}
		any_playable_ruler = { #check female relative marriages
			limit = { 
				OR = {
					primary_title = { 
						OR = {
							has_law = true_cognatic_succession 
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}	
					}
					culture_group = dornish
					AND = { #God Empresses
						culture = yi_ti
						higher_tier_than = DUKE
						capital_scope = { kingdom = { title = k_leng } }
					}
				}	
			}	
			any_dynasty_member = {
				limit = {
					is_female = yes
					is_married = yes
					is_married_matrilineally = no
					is_ruler = no
					is_close_relative = PREV
				}
				if = { #If married to some bozo change to matrilineal immediately
					limit = { 
						spouse = {
							is_ruler = no
							OR = {
								dynasty = 0
								trait = bastard
								AND = {
									NOT = { father_even_if_dead = { always = yes } }
									NOT = { mother_even_if_dead = { always = yes } }
								}
							}
						}
					}
					spouse = {
						set_character_flag = no_wedding_event
						remove_spouse = spouse
						add_spouse_matrilineal = PREV
						clr_character_flag = no_wedding_event
						prestige = -150
					}
					prestige = 150
					clr_character_flag = no_wedding_event			
				}
				if = { #Else add disinherited trait
					limit = { 
						is_married = yes
						is_married_matrilineally = no
					}
					add_trait = disinherited
					PREV = { 
						set_character_flag = matri_inheritance_check 
						any_demesne_title = {
							limit = { 
								OR = {
									has_law = succ_primogeniture
									has_law = succ_gavelkind
								}
							}	
							add_law = dornish_succession
						}
						recalc_succession = yes	
					}		
				}
			}
			recalc_succession = yes
		}
		# #Ibben no religion fix
		# any_playable_ruler = {
			# limit = { 
				# culture = ibbenese
			# }	
			# any_realm_character = { religion = gods_ibben }
			# any_realm_province = { religion = gods_ibben }
		# }
		#Triarchy setup
		e_three_daughters = { 
			holder_scope = { 
				set_character_flag = elected_triarchy_leader
				character_event = { id = free_cities.17 } 
			} 
		}
		#roads
		if = { #valyrian roads
			limit = { 				
				NOT = { has_game_rule = { name = symmetrical_start value = on } }
				is_alternate_start = no	
			}
			if = { #valyrian roads
				limit = { 				
					year = 4000
				}
				set_global_flag = valyrian_roads_complete #block decision to build
				any_province = {
					limit = {
						is_valyrian_road_location_trigger = yes
						has_owner = yes
					}
					add_province_modifier = { name = valyrianroad duration = -1 }
				}
			}	
			else = {
				any_province = {
					limit = {
						OR = {
							region = world_valyria
							province_id = 759
						}	
						is_valyrian_road_location_trigger = yes
						has_owner = yes
					}
					add_province_modifier = { name = valyrianroad duration = -1 }
				}
			}
			if = {
				limit = { 				
					year = 8070 
				}
				set_global_flag = building_westeros_road_network
				#Kingsroad		
				304 = { #storm's end
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				299 = { #parchments
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				296 = { #bronzegate
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				232 = { #wendwater
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				226 = { #king's landing
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				224 = { #hayford
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				209 = { #edgerton
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				205 = { #sow's horn
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				116 = { #butterwell
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				107 = { #harrenhal
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				97 = { #lord harroway's town
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				108 = { #Darry
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				84 = { #wycombe
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				83 = { #erenford
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				78 = { #freylands
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				61 = { #whitford
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				57 = { #king's course
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				49 = { #castle cerwyn
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				47 = { #winterfell
					add_province_modifier = { name = kingsroad duration = -1 }
					#set_province_flag = kingsroad
				}
				#river road
				97 = { #lord harroway's town
					#set_province_flag = river_road
				}
				96 = { #lychester
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				91 = { #stone hedge
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				101 = { #riverrun
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				102 = { #branstone
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				175 = { #nunn's deep
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				174 = { #golden tooth
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				176 = { #oxcross
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				178 = { #sarsfield
					add_province_modifier = { name = river_road duration = -1 }
					#set_province_flag = river_road
				}
				182 = { #casterly rock
					#set_province_flag = river_road
				}
				183 = { #lannisport
					#set_province_flag = river_road
				}
				#Goldroad
				182 = { #casterly rock
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				183 = { #lannisport
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				184 = { #tendring
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				1132 = { #moreland
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				191 = { #deep den
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				192 = { #drox castle
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				194 = { #payne hall
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				202 = { #byford
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				222 = { #bramsfort
					add_province_modifier = { name = goldroad duration = -1 }
					#set_province_flag = goldroad
				}
				226 = { #king's landing
					#set_province_flag = goldroad
				}
				#roseroad
				226 = { #king's landing
					#set_province_flag = roseroad
				}
				295 = { #Langward Hall
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				227 = { #dalston keep
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				255 = { #roseford
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				253 = { #bitterbridge
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				251 = { #leygood keep
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				256 = { #inchfield
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				267 = { #highgarden
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				276 = { #middlebury
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				275 = { #darkdell
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				284 = { #sommerset
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				283 = { #honeyholt
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				286 = { #oldtown
					add_province_modifier = { name = roseroad duration = -1 }
					#set_province_flag = roseroad
				}
				#oceanroad
				267 = { #highgarden
					#set_province_flag = oceanroad
				}
				265 = { #westbrook
					add_province_modifier = { name = oceanroad duration = -1 }
					#set_province_flag = oceanroad
				}
				240 = { #catswold
					add_province_modifier = { name = oceanroad duration = -1 }
					#set_province_flag = oceanroad
				}
				235 = { #old oak
					add_province_modifier = { name = oceanroad duration = -1 }
					#set_province_flag = oceanroad
				}
				197 = { #crakehall
					add_province_modifier = { name = oceanroad duration = -1 }
					#set_province_flag = oceanroad
				}
				185 = { #hawthorne
					add_province_modifier = { name = oceanroad duration = -1 }
					#set_province_flag = oceanroad
				}
				183 = { #lannisport
					#set_province_flag = oceanroad
				}
				182 = { #casterly rock
					#set_province_flag = oceanroad
				}
				#high road
				97 = { #lord harroway's town
					#set_province_flag = high_road
				}
				95 = { #chiltern
					add_province_modifier = { name = high_road duration = -1 }
					#set_province_flag = high_road
				}
				134 = { #darkmoor
					add_province_modifier = { name = high_road duration = -1 }
					#set_province_flag = high_road
				}
				140 = { #bloody gate
					add_province_modifier = { name = high_road duration = -1 }
					#set_province_flag = high_road
				}		
				136 = { #the eyrie
					add_province_modifier = { name = high_road duration = -1 }
					#set_province_flag = high_road
				}
			}
		}	
		#Grandchild Princes
		any_independent_ruler = {
			limit = { tier = EMPEROR }
			character_event = { id = 66115 }
		}
		#Check the capital of rulers with two or more provinces
		any_playable_ruler = {
			limit = {
				num_of_count_titles = 2
				demesne_size = 2
				higher_tier_than = COUNT
			}
			character_event = { id = maintenance.42 }
		}
		#Add ser title to all knights
		any_character = {
			limit = {
				trait = knight
				is_ruler = no
				NOT = { has_minor_title = title_prince }
				NOT = { has_minor_title = title_queen_mother }
				NOT = { has_minor_title = title_ruler_consort }
			}
			if = {
				limit = { is_female = no } 
				set_special_character_title = title_ser
			}
			if = {
				limit = { is_female = yes }
				set_special_character_title = title_lady	
			}
		}
		#Add maester title to all maesters
		any_character = {
			limit = {
				trait = maester
			}
			join_society = hermetics
			while = {
				limit = { NOT = { society_rank == 3 } }
				society_rank_up = 1
			}	
			if = {
				limit = { trait = mastermind_theologian }
				if = {
					limit = { NOT = { has_character_flag = choosing_hermetic_art } }
					add_random_maester_specialisation_effect = yes					
				}	
				while = {
					limit = { NOT = { has_links_level_4_trigger = yes } }
					add_random_maester_link_effect = yes
				}
			}
			else_if = {
				limit = { trait = scholarly_theologian }
				if = {
					limit = { NOT = { has_character_flag = choosing_hermetic_art } }
					add_random_maester_specialisation_effect = yes					
				}	
				while = {
					limit = { NOT = { has_links_level_3_trigger = yes } }
					add_random_maester_link_effect = yes
				}
			}
			else_if = {
				limit = { trait = martial_cleric }	
				while = {
					limit = { NOT = { has_links_level_2_trigger = yes } }
					add_random_maester_link_effect = yes
				}
			}
			else = {
				while = {
					limit = { NOT = { has_links_for_maester_rank_trigger = yes } }
					add_random_maester_link_effect = yes
				}
			}
			set_special_character_title = title_maester
			set_character_flag = no_court_invites
		}
		#Add septon title to all septons
		any_character = {
			limit = {
				trait = septon
				lower_tier_than = KING
			}
			set_special_character_title = title_septon
			set_character_flag = no_court_invites
		}
		#Add septa title to all septas
		any_character = {
			limit = {
				trait = septa
				lower_tier_than = KING
			}
			set_special_character_title = title_septa
			set_character_flag = no_court_invites
		}
		#Distribute fighting/knight traits
		any_playable_ruler = {
			limit = {
				NOT = { #has own courtier maintenance
					culture_group = hyrkoon_group
				}
			}	
			if = { #spread random seed
				limit = { 
					OR = {
						ai = no
						NOT = { age = 16 }
					}	
				}
				character_event = { id = combat_trait.8 }
			}
			if = {
				limit = {					
					age = 16
					NOT = { age = 32 } 
					ai = yes
				}
				character_event = { id = combat_trait.8 days = 1 }
			}
			if = {
				limit = {					
					age = 32
					NOT = { age = 48 } 
					ai = yes
				}
				character_event = { id = combat_trait.8 days = 2 }
			}
			if = {
				limit = {					
					age = 48
					ai = yes
				}
				character_event = { id = combat_trait.8 days = 3 }
			}				
		}
		#move all dynasty members to baron's court
		# any_independent_ruler = {						# Why is this even here? It results only in bugs and ignoring character history, nothing more ~Kuczaja
			# any_realm_lord = {
				# limit = { 
					# tier = BARON
					# is_feudal = yes
					# dynasty_head = { character = PREV }
					# OR = {
						# any_sibling = { always = yes }
						# num_of_children = 1
					# }	
					# NOT = { trait = nightswatch }
				# }
				# any_dynasty_member = {
					# limit = {
						# is_ruler = no
						# NOT = { trait = nightswatch }
						# NOT = { trait = kingsguard }
						# NOT = { trait = maester }
						# NOT = { trait = archmaester }
						# is_priest = no
					# }
					# move_character = PREV
				# }
			# }
		# }
		#AI job action control
		any_playable_ruler = {
			limit = { ai = yes }
			character_event = { id = maintenance.49 days = 1 }
		}
		#Childhood trait removal
		if = {
			limit = {
				has_dlc = "Zeus"
			}
			any_character = {
				limit = {
					is_adult = no
					personality_traits = 3
				}
				remove_trait = haughty
				remove_trait = affectionate
				remove_trait = timid
				remove_trait = rowdy
				remove_trait = willful
				remove_trait = brooding
				remove_trait = indolent
				remove_trait = playful
				remove_trait = conscientious
				remove_trait = fussy
				remove_trait = curious
				remove_trait = idolizer
			}
		}	
		#Tyranny/Dishonour decay
		any_character = {
			limit = { 
				check_variable = { which = "tyrant" value = 0.9 } 
				NOT = { has_character_flag = tyranny_decay_check }
			}
			set_character_flag = tyranny_decay_check
			character_event = { id = maintenance.2 days = 1825 } #Tyranny decays every 5 years
		}
		any_character = {
			limit = { 
				check_variable = { which = "dishonorable" value = 0.9 }
				NOT = { has_character_flag = dishonor_decay_check }
			}
			set_character_flag = dishonor_decay_check
			character_event = { id = maintenance.4 days = 3650 } #Dishonor decays every 10 years
		}
		# Distribute level of education for conclave users
		if = {
			limit = { has_dlc = "Zeus" }
			any_character = {
				limit = {
					age = 12
					NOT = { age = 16 }
					NOT = { has_character_modifier = maester_education }
					NOT_mythical_creature_trigger = yes
					NOT = { culture = dothraki } 
					NOT = { culture = jogos_nhai }
				}
				character_event = { id = reeducation.22 }
			}
		}	
		# Fix Valyrian priests post Aegon's conversion
		any_playable_ruler = {
			limit = { 
				culture_group = valyrian
				religion = the_seven
			}
			any_vassal = {
				limit = { religion = valyrian_rel }
				religion = the_seven
				if = {
					limit = { 
						culture = high_valyrian 
						has_game_rule = { name = high_valyrian_cull value = on }
					}
					culture = western_valyrian
				}
			}
		}
		#Add religious traits to baron theocracies
		any_playable_ruler = {
			limit = { 
				OR = {
					religion = the_seven
					religion = rhllor
					religion = harpy
					religion = harpy_reformed
					religion = qarth_warlocks
					religion = shadowbinders
					religion = shadowbinders_reformed
					religion = bearded_priests
					religion = summer_rel
					religion = summer_rel_reformed
				}
			}
			any_vassal = {
				limit = { 
					demesne_size = 1
					is_theocracy = yes	
				}
				character_event = { id = religious.1 }
			}
		}
		if = { # Randomly place dark sister if Bloodraven is dead
			limit = {
				darksister = { 
					character = 77026
					is_alive = no
				}
			}
			random_province = {
				limit ={
					region = world_beyond_the_wall
				}
				set_province_flag = dark_sister_location
			}
		}
		# Godswoods
		if = {
			limit = { is_alternate_start = no }
			b_woodhaven = { # Last Hearth
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_snowdell = { # Karhold
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_shadythicket = { # Deepwood
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_godshill = { # Barrowton
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_winterwood = { # Winterfell
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
				add_building = tp_large_godswood
			}
			b_windygrove = { # Dreadfort
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_hightree = { # Hornwood
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_septofsnow = { # White Harbor
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_thesunkgrove = { # Greywater Watch
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
			}
			b_raventreehall_temple = { # Raventree Hall
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_casterly_rocksept = { # Casterly Rock
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
			}
			b_darry_sept = { # Darry
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
			}
			b_harrenhal_sept = { # Harrenhal
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
				add_building = tp_large_godswood
				add_building = tp_godswood_forest
			}
			b_rose_sept = { # Highgarden
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_great_sept_of_baelor = { # King's Landing
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			b_riverrunsept = { # Riverrun
				add_building = tp_weirwood_tree
				add_building = tp_small_godswood
				add_building = tp_godswood
			}
			if = {
				limit = { 
					OR = { #burned by stannis
						NOT = { year = 8299 }
						NOT = { month = 6 }
					}	
				}	
				b_storms_end_sept = { # Storm's End
					add_building = tp_weirwood_tree
					add_building = tp_small_godswood
					add_building = tp_godswood
				}
			}
			b_the_whispers_sept = { # The Whispers
				add_building = tp_weirwood_tree
			}
			#Princes of Lorath setup
			k_lorath = {
				holder_scope = {
					character_event = { id = free_cities.11027 days = 2 }
				}
			}
		}	
		#Royal privileges
		any_playable_ruler = {
			limit = { 
				tier = KING 
				is_feudal = yes
				OR = {
					independent = no
					primary_title = { check_variable = { which = "de_facto_empire" value = 0.9 } }
				}
				any_demesne_title = {
					tier = KING
					controls_religion = no
					is_landless_type_title = no
					has_law = privilege_vassal_king
					NOT = { check_variable = { which = "lord_paramount_status" value = 0.9 } } #1 = lord paramount, 2 = interregnum
				}
			}
			add_character_modifier = {
				name = granted_royal_privilege_modifier
				duration = -1
			}
		}
		#Prohibit battle nicknames in certain locations
		any_province = {
			limit = {
				OR = {
					province_id = 3 #North Frostfangs
					province_id = 4 #The Frozen Shire
					province_id = 7 #Ice Bay Shore
					province_id = 8 #Central Frostfangs
					province_id = 9 #Fist of the First Men
					province_id = 13 #The Haunted Forest
					province_id = 16 #The Shadow Tower
					province_id = 34 #Sea Dragon Point
					province_id = 42 #Withered Heath
					province_id = 43 #Rillwater Crossing
					province_id = 55 #Sheapshead Hills
					province_id = 76 #Cape of Eagles
					province_id = 177 #Pendric Hills
					province_id = 203 #Chyttering Brook
					province_id = 215 #Crackclaw Barren
					province_id = 218 #North Crackclaw
					province_id = 242 #Derring Downs
					province_id = 341 #Scorched Rock
					province_id = 345 #The Red Dunes
					province_id = 369 #Tyroshi Landing
					province_id = 370 #Disputed Peninsula
					province_id = 373 #Vysos Plains
					province_id = 374 #Lysene Forest
					province_id = 375 #Forest of Myr
					province_id = 376 #Disputed Forest
					province_id = 380 #Bay of Myr
					province_id = 387 #Lake of Myrth
					province_id = 389 #The Great Arm
					province_id = 399 #Plains of Maegys
					province_id = 407 #Prince's Shore
					province_id = 409 #Sunrise Road
					province_id = 416 #Vedys Lands
					province_id = 418 #The Great PLaza
					province_id = 426 #Rhoyne Vale
					province_id = 437 #Deep Forest
					province_id = 446 #Lorathi Shore
					province_id = 448 #White CLiffs
					province_id = 449 #Ny Rhon valley
					province_id = 456 #East Andalos
					province_id = 458 #Andal Coast
					province_id = 459 #Mother's VAlley
					province_id = 463 #Braavos Hills
					province_id = 467 #Braavos Fields
					province_id = 468 #Braavos Shore
					province_id = 469 #The Marshes
					province_id = 475 #Axe Mountains
					province_id = 479 #Qohorik Coast
					province_id = 483 #Volantene Coast
					province_id = 486 #Death Swamps
					province_id = 490 #Painted March
					province_id = 501 #The Citrus Coves
					province_id = 510 #The SInging Stones
					province_id = 519 #Golden Mountains
					province_id = 520 #Lotus Hills
					province_id = 526 #Red flower bay
					province_id = 540 #Forest Road
					province_id = 554 #King's Hills
					province_id = 560 #Bay of Tusks
					province_id = 566 #Walrus Point
					province_id = 600 #The Demon Pass
					province_id = 603 #The Black Cliffs
					province_id = 605 #The Demon Road
					province_id = 608 #No mans land
					province_id = 612 #slavers road
					province_id = 617 #baked shore
					province_id = 635 #bone coast
					province_id = 655 #cape of skulls
					province_id = 666 #jade point
					province_id = 671 #sand road
					province_id = 677 #stone road
					province_id = 682 #steel road
					province_id = 691 #painted valleys
					province_id = 735 #wyvern point
					province_id = 763 #jade road
					province_id = 787 #isle of whips
					province_id = 789 #manticore isles
					province_id = 798 #saffron lands
					province_id = 799 #saffron isles
					province_id = 804 #shadow mountains
					province_id = 809 #hidden valley
					province_id = 821 #pass of the morn
					province_id = 822 #the blood marsh
					province_id = 829 #east nghai
					province_id = 831 #west nghai
					province_id = 832 #bay of nefer
					province_id = 836 #fields of nefer
					province_id = 838 #leviathan sounds
					province_id = 839 #howling x
					province_id = 840
					province_id = 841
					province_id = 842 #east steel road
					province_id = 844 #great sand road
					province_id = 855 #bleeding shore
				}
			}
			set_province_flag = prohibited_nickname_location
		}
		if = { # Change AGOT disfigured into Reaper's Due disfigured
			limit = { has_dlc = "Reapers" }
			any_character = {
				limit = { trait = disfigured_AGOT }
				remove_trait = disfigured_AGOT
				add_trait = disfigured
			}
		}
		# Fix characters who somehow end up in court of unlanded/dead characters
		any_character = {
			limit = {
				is_ruler = no
				liege = { is_ruler = no }
			}
			liege = { liege = { reverse_banish = PREVPREV } }
		}
		# Add prosperity modifiers to provinces based on base values
		if = {
			limit = { 
				has_dlc = "Reapers" 
				NOT = { has_game_rule = { name = symmetrical_start value = on } }
				is_alternate_start = no
			}
			startup_prosperity_effect = yes
		}
		#Fear calculation
		any_playable_ruler = {
			character_event = { id = faction_event_new.90 days = 1 }
		}
		#Cadet opinion
		any_playable_ruler = {
			character_event = { id = cadet.10 days = 1 }
		}
		#Royal Proclamations
		any_independent_ruler = {
			limit = { tier = EMPEROR ai = yes }
			character_event = { id = royal_proclamations.998 }
		}
		#Nomadic marriage setup
		any_independent_ruler = {
			limit = { 
				is_nomadic = yes 
				ai = yes
			}
			any_vassal = {
				limit = { 
					is_nomadic = yes 
					ai = yes
				}
				character_event = { id = dothraki.870 days = 2 random = 2 }
			}
			character_event = { id = dothraki.870 days = 2 random = 2 }
		}
		#Syncretic Faith
		any_playable_ruler = {
			limit = { 
				ai = yes
				OR = {
					religion = moonsingers
					religion = valyrian_rel
					has_religion_feature = religion_syncretic
					has_religion_feature = religion_feature_valyrian_rel
					has_religion_feature = religion_feature_moonsingers
					AND = {
						NOT = { has_dlc = "Holy Fury" }
						OR = {
							religion = moonsingers_reformed
							religion = valyrian_rel_reformed
						}
					}
				}
			}
			character_event = { id = religious.65 days = 1 }
		}
		#Populate Alchemists Guild
		character_event = { id = wildfire.40 }
		#Check active regions
		any_player = {
			character_event = { id = maintenance.59 }
		}
		#Auto Generate missing wives/mothers
		if = {
			limit = { is_alternate_start = no }
			any_playable_ruler = {
				limit = {
					OR = {
						is_patrician = yes
						NOT = { tier = BARON }
					}
					is_married = no
					is_betrothed = no
					can_marry_trigger = yes
					OR = {
						AND = {
							age = 18
							NOT = { dynasty = 0 }
							NOT = { any_dynasty_member = { is_alive = yes NOT = { character = PREV } } }
							ai = yes
						}	
						any_child_even_if_dead = {
							NOT = { trait = bastard }
							NOT = { trait = legit_bastard }
							NOT = { trait = child_of_consort }
							OR = {
								AND = {
									NOT = { mother_even_if_dead = { always = yes } }
									PREV = { is_female = no }
								}
								AND = {
									NOT = { father_even_if_dead = { always = yes } }
									PREV = { is_female = yes }
								}
							}
						}
					}	
					NOT = { c_125009 = { character = PREV } } #Young Griff
					NOT = { c_10757 = { character = PREV } } # Maelys Blackfyre
					NOT = { c_94043 = { character = PREV } } #Littlefinger
					NOT = { c_1238 = { character = PREV } } #Wyman Webber
					NOT = { c_2102 = { character = PREV } } #Maege Mormont
					NOT = { c_5102 = { character = PREV } } #Alysane Mormont
					NOT = { c_50012300 = { character = PREV } } #Aurion Varezys
				}
				character_event = { id = roberts_rebellion.150 }
			}
			any_playable_ruler = { #also check westerosi courtiers and landed knights
				limit = {
					OR = {
						is_patrician = yes
						NOT = { tier = BARON }
					}
					capital_scope = { region = world_westeros }
				}
				any_courtier = {
					limit = {
						is_ruler = no
						NOT = { dynasty = 0 }
						is_married = no
						is_betrothed = no
						can_marry_trigger = yes
						any_child_even_if_dead = {
							NOT = { trait = bastard }
							NOT = { trait = child_of_consort }
							OR = {
								AND = {
									NOT = { mother_even_if_dead = { always = yes } }
									PREV = { is_female = no }
								}
								AND = {
									NOT = { father_even_if_dead = { always = yes } }
									PREV = { is_female = yes }
								}
							}
						}
						NOT = { c_125009 = { character = PREV } } #Young Griff
						NOT = { c_94043 = { character = PREV } } #Littlefinger
						NOT = { c_1238 = { character = PREV } } #Wyman Webber
						NOT = { c_2102 = { character = PREV } } #Maege Mormont
						NOT = { c_5102 = { character = PREV } } #Alysane Mormont
						NOT = { c_50012300 = { character = PREV } } #Aurion Varezys
					}
					character_event = { id = roberts_rebellion.150 }
				}
				any_vassal = {
					limit = {
						tier = BARON
						NOT = { trait = nightswatch }
						NOT = { dynasty = 0 }
						is_married = no
						is_betrothed = no
						can_marry_trigger = yes
						any_child_even_if_dead = {
							NOT = { trait = bastard }
							NOT = { trait = child_of_consort }
							OR = {
								AND = {
									NOT = { mother_even_if_dead = { always = yes } }
									PREV = { is_female = no }
								}
								AND = {
									NOT = { father_even_if_dead = { always = yes } }
									PREV = { is_female = yes }
								}
							}
						}
						NOT = { c_125009 = { character = PREV } } #Young Griff
						NOT = { c_94043 = { character = PREV } } #Littlefinger
						NOT = { c_1238 = { character = PREV } } #Wyman Webber
						NOT = { c_2102 = { character = PREV } } #Maege Mormont
						NOT = { c_5102 = { character = PREV } } #Alysane Mormont
						NOT = { c_50012300 = { character = PREV } } #Aurion Varezys
					}
					character_event = { id = roberts_rebellion.150 }
				}
			}
			#Auto Generate additional children/siblings
			any_playable_ruler = {
				limit = {
					OR = { 
						NOT = { year = 8260 }
						#Lore-info-radio-silence-zone
						culture_group = free_folk
							#Far East
						culture_group = moraqi_group 
						culture_group = yi_ti_group 
						culture_group = jade_islands_group 
						culture_group = asshai_group 
						culture_group = further_east 
						# culture_group = qarth_group 
							#Northern East
						culture_group = hyrkoon_group 
						culture_group = ibbenese_group 
						culture_group = jogos_nhai_group 
						culture_group = nghai_group 
						culture_group = islander_group 
							#Sothoryos and Summer Sea
						culture_group = summer_islands 
						culture_group = sothoryos_islands 
						culture_group = naath_group 
							#Dothraki Sea
						culture_group = sarnor_group 
					}
					OR = {
						is_patrician = yes
						NOT = { tier = BARON }
					}
					have_canon_family_trigger = yes
				}
				character_event = { id = roberts_rebellion.151 }
				if = {
					limit = {
						capital_scope = { region = world_westeros }
					}
					any_vassal = {
						limit = { 
							tier = BARON 
							have_canon_family_trigger = yes
							NOT = { trait = nightswatch }
						}	
						character_event = { id = roberts_rebellion.151 }
					}
				}
			}
			#make sure patricians have at least one trade post
			any_playable_ruler = {
				limit = { is_merchant_republic = yes }
				if = {
					limit = { NOT = { num_of_trade_posts = 1 } }
					random_demesne_province = {
						limit = {
							has_trade_post = no
							port = yes
						}	
						build_holding = {
						   type = trade_post 
						   holder = PREV
						}
					}
					if = {
						limit = { NOT = { num_of_trade_posts = 1 } }
						random_realm_province = {
							limit = {
								has_trade_post = no
								port = yes
							}	
							build_holding = {
							   type = trade_post 
							   holder = PREV
							}
						}
						if = {
							limit = { NOT = { num_of_trade_posts = 1 } }
							capital_scope = {
								random_province = {
									limit = {
										port = yes
										has_trade_post = no							
										NOT = { distance = { where = PREVPREV value = 300 } }
										NOT = { has_province_flag = ruined_province }
									}	
									build_holding = {
									   type = trade_post 
									   holder = PREVPREV
									}
								}
							}	
						}
					}	
				}
				any_vassal = {
					limit = { 
						is_patrician = yes
						NOT = { num_of_trade_posts = 1 } 
					}
					random_demesne_province = {
						limit = {
							has_trade_post = no
							port = yes
						}	
						build_holding = {
						   type = trade_post 
						   holder = PREV
						}
					}
					if = {
						limit = { NOT = { num_of_trade_posts = 1 } }
						liege = {
							random_realm_province = {
								limit = {
									has_trade_post = no
									port = yes
								}	
								build_holding = {
								   type = trade_post 
								   holder = PREVPREV
								}
							}
						}	
						if = {
							limit = { NOT = { num_of_trade_posts = 1 } }
							capital_scope = {
								random_province = {
									limit = {
										port = yes
										has_trade_post = no							
										NOT = { distance = { where = PREVPREV value = 300 } }
										NOT = { has_province_flag = ruined_province }
									}	
									build_holding = {
									   type = trade_post 
									   holder = PREVPREV
									}
								}
							}	
						}
					}
				}
			}
			#Remove learning educations from westeros
			any_character = {
				limit = {
					has_education_learning_trigger = yes
					location = { region = world_westeros }
					is_theocracy = no
					NOT = { has_priest_trait_trigger = yes }
					NOT = { trait = maester }
					NOT = { trait = archmaester }
				}
				remove_education_effect = yes
				random_list = {
					1 = { 
						trigger = { is_female = no }
						add_random_education_trait = martial
					}
					1 = { 
						add_random_education_trait = diplomacy
					}
					1 = { 
						add_random_education_trait = intrigue
					}
					1 = { 
						add_random_education_trait = stewardship
					}
				}
			}	
			if = {
				limit = {
					NOT = { has_game_rule = { name = symmetrical_start value = on } }
				}
				#Household Guard buildings
				b_newcastle = { add_building = ca_household_guard }
				b_casterly_rock = { add_building = ca_household_guard }
				b_the_eyrie = { add_building = ca_household_guard }
				b_dreadfort = { add_building = ca_household_guard }
				b_riverrun = { add_building = ca_household_guard }
				b_highgarden = { add_building = ca_household_guard }
				b_winterfell = { add_building = ca_household_guard }
				b_the_hightower = { add_building = ca_household_guard }
			}	
		}	
		#Set artifact original owners
		c_77000 = {
			random_playable_ruler = {
				limit = { has_artifact = aegons_crown }
				random_artifact = {
					limit = { artifact_type = aegons_crown }
					set_original_owner = PREVPREV
				}
			}
		}	
		c_77004 = {
			random_playable_ruler = {
				limit = { has_artifact = aenys_crown }
				random_artifact = {
					limit = { artifact_type = aenys_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_77006 = {
			random_playable_ruler = {
				limit = { has_artifact = jaehaerys_crown }
				random_artifact = {
					limit = { artifact_type = jaehaerys_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_77015 = {
			random_playable_ruler = {
				limit = { has_artifact = aegon_III_crown }
				random_artifact = {
					limit = { artifact_type = aegon_III_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_77020 = {
			random_playable_ruler = {
				limit = { has_artifact = aegon_IV_crown }
				random_artifact = {
					limit = { artifact_type = aegon_IV_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_9316 = {
			random_playable_ruler = {
				limit = { has_artifact = joffreys_crown }
				random_artifact = {
					limit = { artifact_type = joffreys_crown }
					set_original_owner = PREVPREV
				}
			}
			random_playable_ruler = {
				limit = { has_artifact = hearteater }
				random_artifact = {
					limit = { artifact_type = hearteater }
					set_original_owner = PREVPREV
				}
			}
			random_playable_ruler = {
				limit = { has_artifact = lions_tooth }
				random_artifact = {
					limit = { artifact_type = lions_tooth }
					set_original_owner = PREVPREV
				}
			}
		}
		c_317 = {
			random_playable_ruler = {
				limit = { has_artifact = roberts_hammer }
				random_artifact = {
					limit = { artifact_type = roberts_hammer }
					set_original_owner = PREVPREV
				}
			}
			random_playable_ruler = {
				limit = { has_artifact = crown_of_majesty }
				random_artifact = {
					limit = { artifact_type = crown_of_majesty }
					set_original_owner = PREVPREV
				}
			}
		}
		c_11443 = {
			random_playable_ruler = {
				limit = { has_artifact = forrester_sword }
				random_artifact = {
					limit = { artifact_type = forrester_sword }
					set_original_owner = PREVPREV
				}
			}
		}
		c_550187 = {
			random_playable_ruler = {
				limit = { has_artifact = royce_bronze_armor }
				random_artifact = {
					limit = { artifact_type = royce_bronze_armor }
					set_original_owner = PREVPREV
				}
			}
		}
		c_77017 = {
			random_playable_ruler = {
				limit = { has_artifact = baelors_crown }
				random_artifact = {
					limit = { artifact_type = baelors_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_821059 = {
			random_playable_ruler = {
				limit = { has_artifact = crown_of_winter }
				random_artifact = {
					limit = { artifact_type = crown_of_winter }
					set_original_owner = PREVPREV
				}
			}
		}
		c_77041 = {
			random_playable_ruler = {
				limit = { has_artifact = daenerys_crown }
				random_artifact = {
					limit = { artifact_type = daenerys_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_41544 = {
			random_playable_ruler = {
				limit = { has_artifact = durrandon_crown }
				random_artifact = {
					limit = { artifact_type = durrandon_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_900178 = {
			random_playable_ruler = {
				limit = { has_artifact = falcon_crown }
				random_artifact = {
					limit = { artifact_type = falcon_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_88151 = {
			random_playable_ruler = {
				limit = { has_artifact = gardener_crown }
				random_artifact = {
					limit = { artifact_type = gardener_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_80270190 = {
			random_playable_ruler = {
				limit = { has_artifact = lannister_crown }
				random_artifact = {
					limit = { artifact_type = lannister_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_77031 = {
			random_playable_ruler = {
				limit = { has_artifact = maekars_crown }
				random_artifact = {
					limit = { artifact_type = maekars_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_5317 = {
			random_playable_ruler = {
				limit = { has_artifact = renlys_crown }
				random_artifact = {
					limit = { artifact_type = renlys_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		c_4317 = {
			random_playable_ruler = {
				limit = { has_artifact = stannis_crown }
				random_artifact = {
					limit = { artifact_type = stannis_crown }
					set_original_owner = PREVPREV
				}
			}
		}
		#Prestige boosts
		any_playable_ruler = {
			limit = { 
				higher_tier_than = COUNT 
				is_nomadic = no
			}
			if = {
				limit = { tier = EMPEROR }
				prestige = 400
			}
			if = {
				limit = { tier = KING }
				prestige = 250
			}
			if = {
				limit = { tier = DUKE }
				prestige = 100
			}
			if = {
				limit = { ruled_years = 20 }
				prestige = 100
			}
			if = {
				limit = { ruled_years = 15 }
				prestige = 100
			}
			if = {
				limit = { ruled_years = 10 }
				prestige = 100
			}
			if = {
				limit = { ruled_years = 5 }
				prestige = 100
			}
		}
		#Great houses may get traditional names
		c_9001190 = { set_dynasty_flag = has_traditional_names } #Lannister
		c_41544 = { set_dynasty_flag = has_traditional_names } #Durrandon
		c_driftmark = { holder_scope = { set_dynasty_flag = has_traditional_names } } #Velaryon
		c_77024 = { set_dynasty_flag = has_traditional_names } #Blackfyre
		c_821059 = { set_dynasty_flag = has_traditional_names } #Stark
		c_11317 = { set_dynasty_flag = has_traditional_names } #Baratheon
		c_900178 = { set_dynasty_flag = has_traditional_names } #Arryn
		c_500107 = { set_dynasty_flag = has_traditional_names } #Greyjoy
		c_355066 = { set_dynasty_flag = has_traditional_names } #Hoare
		c_88151 = { set_dynasty_flag = has_traditional_names } #Gardener
		c_61000253 = { set_dynasty_flag = has_traditional_names } #Tyrell
		c_155001 = { set_dynasty_flag = has_traditional_names } #Martell

		#Bank societies
		if = {
			limit = {
				NOR = {
					is_alternate_start = yes
					has_game_rule = { name = shattered_realms value = duchies }
					has_game_rule = { name = shattered_realms value = counties }
				}
			}
			set_global_flag = qarth_bank_founded
			if = {
				limit = { year = 7600 }
				set_global_flag = iron_bank_founded
			}
			if = {
				limit = { 
					year = 8125
					NOT = { year = 8140 }
				}
				set_global_flag = rogare_bank_founded
			}
			if = {
				limit = { 
					NOT = { year = 7886 }
				}
				set_global_flag = valyria_bank_founded
			}
			character_event = { id = bankruptcy.20 } #Initialise banks
		}
		#Pre-Doom setup
		if = {
			limit = { 
				NOT = { year = 7886 } 
				597 = { owner = { always = yes } } #valyria
			}
			set_global_flag = freehold_submod_initialised
			597 = { owner = { character_event = { id = valyria.999 } } }
		}
		#Bloodlines
		if = {
			limit = {
				OR = {
					AND = {
						is_alternate_start = yes
						has_alternate_start_parameter = {
							key = dejure_kingdoms
							value = none
						}
					}
					has_game_rule = { name = shattered_realms value = duchies }
					has_game_rule = { name = shattered_realms value = counties }
				}
			}
			set_character_flag = no_traditional_claims
		}
		#Find Targ bloodline founder. If Aegon has had Iron Throne make him founder so traditional claim shows up.
		if = {
			limit = { 
				c_77000 = { 
					OR = {
						has_landed_title = d_dragonstone
						has_landed_title = e_iron_throne
					}
				}
			}
			c_77000 = { save_event_target_as = targ_bloodline_founder }
		}
		else = {
			c_77001 = { #Aenar Targaryen
				save_event_target_as = targ_bloodline_founder
			}
		}
		event_target:targ_bloodline_founder = {
			create_bloodline = {
				type = targaryen
			}
			random_owned_bloodline = { 
				if = {
					limit = { 
						start_date = 7998.1.2 
						ROOT = { NOT = { has_character_flag = no_traditional_claims } }
					}
					set_bloodline_flag = dynastic_claim_e_iron_throne
					set_bloodline_flag = dynastic_claim_d_kings_landing
				}
				if = {
					limit = { 
						start_date = 8198.1.1
						ROOT = { NOT = { has_character_flag = no_traditional_claims } }
					}
					set_bloodline_flag = dynastic_claim_c_summerhal
				}
				random_character = {
					limit = { dynasty = 496 NOT = { trait = bastard } }
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 498 NOT = { trait = bastard } } # Pre-conquest baratheon
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				c_77025 = { # Bittersteel
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				
				#Make sure thse houses are not added
				random_character = {
					limit = { dynasty = 57 NOT = { trait = bastard } } # Blackfyre
					remove_from_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						remove_from_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 317 NOT = { trait = bastard } } #Baratheon
					remove_from_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						remove_from_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 190 NOT = { trait = bastard } } #lannisters
					remove_from_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						remove_from_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 333 NOT = { trait = bastard } } #Wensington
					remove_from_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						remove_from_bloodline = PREVPREV 
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}		
		if = {
			limit = { start_date = 8182.1.1 }
			c_77024 = { #Blackfyre
				create_bloodline = {
					type = blackfyre_bl
				}
				random_owned_bloodline = { 
					if = {
						limit = { 
							ROOT = { NOT = { has_character_flag = no_traditional_claims } }
						}
						set_bloodline_flag = dynastic_claim_e_iron_throne
						set_bloodline_flag = dynastic_claim_d_kings_landing
					}
					c_77024 = {
						any_dynasty_member_even_if_dead = { 
							limit = { NOT = { trait = bastard } }
							add_to_bloodline = PREVPREV 
						}
					}
					any_bloodline_member = {
						character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
					}
				}
			}
		}
		c_88151 = { #Garth Greenhand
			create_bloodline = {
				type = garth_greenhand
			}
			random_owned_bloodline = {
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }					
					}
					clr_bloodline_flag = dynastic_claim_e_reach 
					clr_bloodline_flag = dynastic_claim_k_reach 
					clr_bloodline_flag = dynastic_claim_d_highgarden 
					clr_bloodline_flag = dynastic_claim_k_highgardenTK 
					clr_bloodline_flag = dynastic_claim_c_highgarden 
				}	
				random_character = {
					limit = { dynasty = 1254 NOT = { trait = bastard } } #Gardener
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 295 NOT = { trait = bastard } } #Oldflowers
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 281 NOT = { trait = bastard } } #Florent
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 237 NOT = { trait = bastard } } #Oakheart
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 288 NOT = { trait = bastard } } #Redwyne
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 260 NOT = { trait = bastard } } #Ball
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 298 NOT = { trait = bastard } } #Peake
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 285 NOT = { trait = bastard } } #Hightower
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 261 NOT = { trait = bastard } } #Fossoway of Cider Hall
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 262 NOT = { trait = bastard } } #Fossoway of New Barrel
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 278 NOT = { trait = bastard } } #Hewett
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 292 NOT = { trait = bastard } } #Hunt
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 296 NOT = { trait = bastard } } #Tarly
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 284 NOT = { trait = bastard } } #Bulwer
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 234 NOT = { trait = bastard } } #Crane
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 282 NOT = { trait = bastard } } #Beesbury
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				random_character = {
					limit = { dynasty = 250 NOT = { trait = bastard } } #Rowan
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}		
				random_character = {
					limit = { dynasty = 253 NOT = { trait = bastard } } #Tyrell
					if = {
						limit = { start_date = 7998.6.6 }
						add_to_bloodline = PREV
						any_dynasty_member_even_if_dead = { 
							limit = { NOT = { trait = bastard } }
							add_to_bloodline = PREVPREV 
						}
					}	
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Tyrell_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Tyrell_dyn
						}
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}	
		c_821059 =	{ #Stark
			create_bloodline = {
				type = stark
			}
			if = {
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Stark_dyn
			}	
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }					
					}
					clr_bloodline_flag = dynastic_claim_e_north
					clr_bloodline_flag = dynastic_claim_k_north 
					clr_bloodline_flag = dynastic_claim_d_winterfell
					clr_bloodline_flag = dynastic_claim_k_winterfellTK
					clr_bloodline_flag = dynastic_claim_c_winterfell
				}
				random_character = {
					limit = { dynasty = 59 NOT = { trait = bastard } }
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Stark_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Stark_dyn
						}
					}
				}
				random_character = {
					limit = { dynasty = 89 NOT = { trait = bastard } } #Karstark
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Stark_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Stark_dyn
						}
					}
				}
				random_character = {
					limit = { dynasty = 63859 NOT = { trait = bastard } } #Greystark
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Stark_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Stark_dyn
						}
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_9001190 = { #Lannister
			set_graphical_culture = Lannister_dyn
			create_bloodline = {
				type = lannister
			}
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }						
					}
					clr_bloodline_flag = dynastic_claim_e_westerlands
					clr_bloodline_flag = dynastic_claim_k_westerlands
					clr_bloodline_flag = dynastic_claim_d_casterly_rock
					clr_bloodline_flag = dynastic_claim_k_casterly_rockTK
					clr_bloodline_flag = dynastic_claim_c_casterly_rock
					clr_bloodline_flag = dynastic_claim_c_lannisport
				}
				random_character = {
					limit = { dynasty = 190 NOT = { trait = bastard } }
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Lannister_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Lannister_dyn
						}
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_900178 = { #Arryn
			create_bloodline = {
				type = arryn
			}
			set_graphical_culture = Arryn_dyn
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }					
					}
					clr_bloodline_flag = dynastic_claim_e_vale
					clr_bloodline_flag = dynastic_claim_k_vale
					clr_bloodline_flag = dynastic_claim_d_the_giants_lance
					clr_bloodline_flag = dynastic_claim_k_the_giants_lanceTK
					clr_bloodline_flag = dynastic_claim_c_the_eyrie
				}
				random_character = {
					limit = { dynasty = 178 NOT = { trait = bastard } }
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Arryn_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Arryn_dyn
						}
					}
				}
				random_character = { #Arryn of Gulltown
					limit = { dynasty = 450472 NOT = { trait = bastard } }
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Arryn_dyn
					}	
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Arryn_dyn
						}
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_41544 = { #Durrandon
			create_bloodline = {
				type = durrandon
			}
			set_graphical_culture = Baratheon_dyn
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }					
					}	
					clr_bloodline_flag = dynastic_claim_e_stormlands
					clr_bloodline_flag = dynastic_claim_k_stormlands
					clr_bloodline_flag = dynastic_claim_d_shipbreaker
					clr_bloodline_flag = dynastic_claim_k_shipbreakerTK
					clr_bloodline_flag = dynastic_claim_c_storms_end					
				}	
				c_41544 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Baratheon_dyn	
					}
				}				
				random_character = {
					limit = { dynasty = 332 NOT = { trait = bastard } } # Bolling
					add_to_bloodline = PREV
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					if = {
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Baratheon_dyn
					}
					any_dynasty_member_even_if_dead = { 
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Baratheon_dyn
						}
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_17159 = { #Tully
			if = {
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Tully_dyn
			}	
			any_dynasty_member_even_if_dead = { 
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Tully_dyn 
			}
			if = {
				limit = { primary_title = { title = k_riverlands } }
				create_bloodline = {
					type = tully
				}				
				random_owned_bloodline = { 
					if = {
						limit = { 
							ROOT = { has_character_flag = no_traditional_claims }		
						}
						clr_bloodline_flag = dynastic_claim_e_riverlands
						clr_bloodline_flag = dynastic_claim_k_riverlands
						clr_bloodline_flag = dynastic_claim_d_riverrun
						clr_bloodline_flag = dynastic_claim_k_riverrunTK
						clr_bloodline_flag = dynastic_claim_c_riverrun
					}
					c_17159 = {
						any_dynasty_member_even_if_dead = { 
							limit = { 
								is_descendant_of = PREV 
								NOT = { trait = bastard }
							}
							add_to_bloodline = PREVPREV 
						}
					}
					any_bloodline_member = {
						character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
					}
				}
			}	
		}
		if = {
			limit = { year = 7300 }
			c_2000001 = { #Nymeros-Martell
				create_bloodline = {
					type = martell
				}
				random_owned_bloodline = {
					if = {
						limit = {
							ROOT = { has_character_flag = no_traditional_claims }
						}
						clr_bloodline_flag = dynastic_claim_e_dorne
						clr_bloodline_flag = dynastic_claim_k_dorne
						clr_bloodline_flag = dynastic_claim_d_brokenarm
						clr_bloodline_flag = dynastic_claim_k_brokenarmTK
						clr_bloodline_flag = dynastic_claim_c_sunspear			
					}
					random_character = {
						limit = { dynasty = 1 NOT = { trait = bastard } }
						add_to_bloodline = PREV
						any_dynasty_member_even_if_dead = {
							limit = { NOT = { trait = bastard } }
							add_to_bloodline = PREVPREV
						}
						if = {
							limit = {
								NOT = { trait = strong_seed_block }
								OR = { 
									year_of_birth >= 7300			# fixed to restore Mors Martell and his ancestors
									is_child_of = c_2000001			# native view in 'Rhoynish Wars' sub-mod
								}
							}
							set_graphical_culture = Martell_dyn
						}
						any_dynasty_member_even_if_dead = {
							if = {
								limit = {
									NOT = { trait = strong_seed_block }
									OR = {
										year_of_birth >= 7300		# fixed to restore Mors Martell and his ancestors
										is_child_of = c_2000001		# native view in 'Rhoynish Wars' sub-mod
									}
								}
								set_graphical_culture = Martell_dyn
							}
						}
					}
					
					#Make sure thse houses are not added
					random_character = {
						limit = { dynasty = 16 } # Dayne
						remove_from_bloodline = PREV
						any_dynasty_member_even_if_dead = { remove_from_bloodline = PREVPREV }
					}
					any_bloodline_member = {
						character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
					}
				}
			}
			
		}	
		if = {
			limit = { start_date = 7998.2.27 }
			c_1317 = { #Baratheon
				create_bloodline = {
					type = baratheon
				}
				if = {
					limit = { NOT = { trait = strong_seed_block } }
					set_graphical_culture = Baratheon_dyn
				}	
				random_owned_bloodline = { 
					if = {
						limit = { 
							ROOT = { has_character_flag = no_traditional_claims }					
						}	
						clr_bloodline_flag = dynastic_claim_e_stormlands
						clr_bloodline_flag = dynastic_claim_k_stormlands
						clr_bloodline_flag = dynastic_claim_d_shipbreaker
						clr_bloodline_flag = dynastic_claim_k_shipbreakerTK
						clr_bloodline_flag = dynastic_claim_c_storms_end					
					}
					random_character = {
						limit = { dynasty = 317 NOT = { trait = bastard } }
						add_to_bloodline = PREV
						any_dynasty_member_even_if_dead = { 
							limit = { NOT = { trait = bastard } }
							add_to_bloodline = PREVPREV 
						}
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Baratheon_dyn
						}	
						any_dynasty_member_even_if_dead = { 
							if = {
								limit = { NOT = { trait = strong_seed_block } }
								set_graphical_culture = Baratheon_dyn
							}
						}
					}
					random_character = {
						limit = { dynasty = 333 NOT = { trait = bastard } } #Wensington
						add_to_bloodline = PREV
						any_dynasty_member_even_if_dead = { 
							limit = { NOT = { trait = bastard } }
							add_to_bloodline = PREVPREV 
						}
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Baratheon_dyn
						}	
						any_dynasty_member_even_if_dead = { 
							if = {
								limit = { NOT = { trait = strong_seed_block } }
								set_graphical_culture = Baratheon_dyn
							}
						}
					}
					#Incest siblings
					c_9316 = { set_graphical_culture = Lannister_dyn }
					c_8316 = { set_graphical_culture = Lannister_dyn }
					c_7316 = { set_graphical_culture = Lannister_dyn }
					
					any_bloodline_member = {
						character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
					}
				}
			}
		}
		c_26107 = { #Greyjoy
			if = {
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Greyjoy_dyn
			}	
			any_dynasty_member_even_if_dead = { 
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Greyjoy_dyn
			}
			if = {
				limit = { primary_title = { title = k_iron_isles } }
				create_bloodline = {
					type = greyjoy
				}			
				random_owned_bloodline = { 
					if = {
						limit = { 
							ROOT = { has_character_flag = no_traditional_claims }		
						}
						clr_bloodline_flag = dynastic_claim_e_iron_isles
						clr_bloodline_flag = dynastic_claim_k_iron_isles
						clr_bloodline_flag = dynastic_claim_d_pyke
						clr_bloodline_flag = dynastic_claim_k_pykeTK
						clr_bloodline_flag = dynastic_claim_c_pyke	
					}
					c_26107 = {
						any_dynasty_member_even_if_dead = { 
							limit = {
								is_descendant_of = PREV 
								NOT = { trait = bastard }
							}
							add_to_bloodline = PREVPREV 
						}
					}
					any_bloodline_member = {
						character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
					}
				}
			}
		}
		c_355066 = { #Hoare
			create_bloodline = {
				type = hoare
			}
			if = {
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Hoare_dyn
			}	
			random_owned_bloodline = { 
				if = {
					limit = { 
						OR = {
							NOT = { year = 6584 }
							ROOT = { has_character_flag = no_traditional_claims }	
						}	
					}
					clr_bloodline_flag = dynastic_claim_e_iron_isles
					clr_bloodline_flag = dynastic_claim_k_iron_isles
				}
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }		
					}
					clr_bloodline_flag = dynastic_claim_d_great_wyk
					clr_bloodline_flag = dynastic_claim_c_pebbleton
				}
				c_355066 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Hoare_dyn
					}
				}
				if = { #Volmarks
					limit = { start_date = 7998.2.1 }
					c_151119 = { 
						add_to_bloodline = PREV
						any_dynasty_member_even_if_dead = { 
							limit = { 
								is_descendant_of = PREV
								NOT = { trait = bastard } 
							}
							add_to_bloodline = PREVPREV 
						}
						if = {
							limit = { NOT = { trait = strong_seed_block } }
							set_graphical_culture = Hoare_dyn
						}
						any_dynasty_member_even_if_dead = { 
							limit = { 
								is_descendant_of = PREV
								NOT = { trait = strong_seed_block }
							}
							set_graphical_culture = Hoare_dyn
						}	
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_5001508 = { #Greyiron
			create_bloodline = {
				type = ironborn
			}
			random_owned_bloodline = { 
				if = {
					limit = { 
						NOT = { ROOT = { has_character_flag = no_traditional_claims } }	
					}
					set_bloodline_flag = dynastic_claim_e_iron_isles
					set_bloodline_flag = dynastic_claim_k_iron_isles
				}		
				c_5001508 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}				
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}	
		c_319197 = { #Reyne
			create_bloodline = {
				type = reyne
			}
			if = {
				limit = { NOT = { trait = strong_seed_block } }
				set_graphical_culture = Reyne_dyn
			}	
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }					
					}
					clr_bloodline_flag = dynastic_claim_d_castamere
					clr_bloodline_flag = dynastic_claim_c_castamere
					clr_bloodline_flag = dynastic_claim_k_castamereTK
				}
				c_319197 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = strong_seed_block } }
						set_graphical_culture = Reyne_dyn
					}
				}	
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		if = {
			limit = { NOT = { year = 6670 } } #officially extinct after this date
			c_600174399 = { #Mudd
				create_bloodline = {
					type = mudd
				}
				random_owned_bloodline = { 
					if = {
						limit = { 
							ROOT = { has_character_flag = no_traditional_claims }		
						}
						clr_bloodline_flag = dynastic_claim_e_riverlands
						clr_bloodline_flag = dynastic_claim_k_riverlands
						clr_bloodline_flag = dynastic_claim_d_oldstones
						clr_bloodline_flag = dynastic_claim_k_oldstonesTK
						clr_bloodline_flag = dynastic_claim_c_oldstones
					}				
					c_600174399 = {
						any_dynasty_member_even_if_dead = { 
							limit = { NOT = { trait = bastard } }
							add_to_bloodline = PREVPREV 
						}
					}
					any_bloodline_member = {
						character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
					}	
				}
			}
		}	
		c_600174432 = { #justman
			create_bloodline = {
				type = justman
			}
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }		
					}
					clr_bloodline_flag = dynastic_claim_e_riverlands
					clr_bloodline_flag = dynastic_claim_k_riverlands
				}
				c_600174432 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}	
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_600174435 = { #teague
			create_bloodline = {
				type = teague
			}
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }		
					}
					clr_bloodline_flag = dynastic_claim_e_riverlands
					clr_bloodline_flag = dynastic_claim_k_riverlands
				}
				c_600174435 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		c_15055963 = { #khiara the Great
			create_bloodline = {
				type = khiara_the_great
			}
			random_owned_bloodline = { 
				if = {
					limit = { 
						ROOT = { has_character_flag = no_traditional_claims }		
					}
					clr_bloodline_flag = dynastic_claim_k_leng
				}
				c_15055963 = {
					any_dynasty_member_even_if_dead = { 
						limit = { NOT = { trait = bastard } }
						add_to_bloodline = PREVPREV 
					}
				}
				any_bloodline_member = {
					character_event = { id = traditional_claims.199 days = 5 } #check for traditional dynastic claims
				}
			}
		}
		any_character = { #Add matrilineal bloodline descent
			limit = {
				NOT = { dynasty = 0 }
				NOT = { trait = bastard }
				mother_even_if_dead = {
					dynasty = PREV
					any_owned_bloodline = {
						OR = {
							has_bloodline_flag = inherit_matrilineal_same_dynasty
							has_bloodline_flag = dynastic_bloodline
						}
					}
				}
			}
			character_event = { id = traditional_claims.220 }
		}
		##Historical crown portraits
		c_821059 = { #stark
			add_trait = dead_crown_of_winter 
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_north is_alive = no }
				add_trait = dead_crown_of_winter 
			}
		}
		c_600174399 = { #mudd
			add_trait = dead_river_kings_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_riverlands is_alive = no }
				add_trait = dead_river_kings_crown
			}
		}
		c_41544 = { #durrandon
			add_trait = dead_durrandon_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_stormlands is_alive = no }
				add_trait = dead_durrandon_crown
			}
		}
		c_9001190 = { #Lannister
			add_trait = dead_lannister_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_westerlands is_alive = no }
				add_trait = dead_lannister_crown
			}
		}
		c_88151 = { #gardener
			add_trait = dead_gardener_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_reach is_alive = no }
				add_trait = dead_gardener_crown
			}
		}
		c_900178 = { #arryn
			if = {
				limit = { is_alive = no }
				add_trait = dead_falcon_crown
				any_dynasty_member_even_if_dead = { 
					limit = { has_landed_title = e_vale is_alive = no }
					add_trait = dead_falcon_crown
				}
			}	
		}
		c_2100001 = { #martell
			if = {
				limit = { is_alive = no }
				add_trait = dead_martell_crown
				any_dynasty_member_even_if_dead = { 
					limit = { has_landed_title = e_dorne is_alive = no }
					add_trait = dead_martell_crown
				}
			}
		}
		c_500107 = { #greyjoy
			add_trait = dead_driftwood_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_iron_isles is_alive = no }
				add_trait = dead_driftwood_crown
			}
		}
		c_355066 = { #hoare
			add_trait = dead_driftwood_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_iron_isles is_alive = no }
				add_trait = dead_driftwood_crown
			}
		}
		c_5001508 = { #greyiron
			add_trait = dead_driftwood_crown
			any_dynasty_member_even_if_dead = { 
				limit = { has_landed_title = e_iron_isles is_alive = no }
				add_trait = dead_driftwood_crown
			}
		}
		##Scarred setup
		any_character = {
			limit = { has_scarred_trait_trigger = yes }
			add_scarred_start_effect = yes
		}
		##Dynastic Loyalty
		#Starks
		any_playable_ruler = {
			limit = { dynasty = 59 }
			set_character_flag = has_dynasty_loyalist
			any_playable_ruler = {
				limit = {
					capital_scope = { region = world_north }
					OR = {
						dynasty = 80 #Manderly
						dynasty = 93 #Umber
					}
				}
				opinion = {
					modifier = opinion_dynasty_loyalist
					who = PREV
				}
				reverse_opinion = {
					modifier = opinion_my_loyalist
					who = PREV
				}
			}
		}
		#Blackfyre Rebellion- Targs
		if = {
			limit = {
				start_date = 8195.3.7
				NOT = { start_date = 8260.12.31 } #blackfyre extinction
			}
			e_iron_throne = {
				holder_scope = {
					set_character_flag = has_dynasty_loyalist
					k_vale = { #Arryn
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					c_darry = {
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					c_hayford = {
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					k_westerlands = {
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					c_golden_tooth = { #Lefford
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					k_dorne = {
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					c_parchments = { #Penrose
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					k_riverlands = {
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					k_reach = {
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					c_ninestars = { #Templeton
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
					c_ironoaks = { #Waynwood
						holder_scope = {
							opinion = {
								modifier = opinion_dynasty_loyalist
								who = PREVPREV
							}
							reverse_opinion = {
								modifier = opinion_my_loyalist
								who = PREVPREV
							}
						}
					}
				}
			}
			any_character = {
				limit = { dynasty = 57 }
				set_character_flag = has_dynasty_loyalist
				c_stonehedge = { #Bracken
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_threetowers = { #Costayne
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_standfast = { #Osgrey
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_starpike = { #Peake
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_castamere = { #Reyne
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				any_playable_ruler = { #Strickland
					limit = { dynasty=1428 }
					opinion = {
						modifier = opinion_dynasty_loyalist
						who = PREV
					}
					reverse_opinion = {
						modifier = opinion_my_loyalist
						who = PREV
					}
				}
				c_sunderland = {
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_yronwood = {
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_esgaroth = { #Butterwell
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
				c_bardshome = { #Cockshaw
					holder_scope = {
						opinion = {
							modifier = opinion_dynasty_loyalist
							who = PREVPREV
						}
						reverse_opinion = {
							modifier = opinion_my_loyalist
							who = PREVPREV
						}
					}
				}
			}
		}	
		#Norvos Bearded Priest Setup
		if = {
			limit = { is_alternate_start = no }
			k_norvos = {
				holder_scope = {
					character_event = { id = free_cities.223 }
				}
			}
		}	
		#Mark defunct cultures (effects what cultures random characters can be)
		# See check_for_defunct_culture_effect
		if = {
			limit = {
				OR = {
					is_alternate_start = no 
					NOT = { has_alternate_start_parameter = { key = culture value = full_random } }
				}	
			}
			if = {
				limit = { year = 7100 }
				if = {
					limit = { NOT = { old_ironborn = { check_variable = { which = defunct value = 1 } } } }
					old_ironborn = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { old_first_man = { check_variable = { which = defunct value = 1 } } } }
					old_first_man = { set_variable = { which = defunct value = 1 }  }
				}
			}
			else = {
				if = {
					limit = { NOT = { ironborn = { check_variable = { which = defunct value = 1 } } } }
					ironborn = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { riverlander = { check_variable = { which = defunct value = 1 } } } }
					riverlander = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { westerman = { check_variable = { which = defunct value = 1 } } } }
					westerman = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { valeman = { check_variable = { which = defunct value = 1 } } } }
					valeman = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { stormlander = { check_variable = { which = defunct value = 1 } } } }
					stormlander = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { reachman = { check_variable = { which = defunct value = 1 } } } }
					reachman = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { sisterman = { check_variable = { which = defunct value = 1 } } } }
					sisterman = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { northman = { check_variable = { which = defunct value = 1 } } } }
					northman = { set_variable = { which = defunct value = 1 }  }
				}	
				if = {	
					limit = { NOT = { crackclawmen = { check_variable = { which = defunct value = 1 } } } }	
					crackclawmen = { set_variable = { which = defunct value = 1 }  }	
				}	
				if = {	
					limit = { NOT = { moon_clansman = { check_variable = { which = defunct value = 1 } } } }	
					moon_clansman = { set_variable = { which = defunct value = 1 }  }	
				}
			}
			if = {
				limit = { 226 = { NOT = { culture = crownlander } } } #kings landing
				if = {
					limit = { NOT = { crownlander = { check_variable = { which = defunct value = 1 } } } }
					crownlander = { set_variable = { which = defunct value = 1 }  }
				}
			}	
			if = {	
				limit = { NOT = { half_southron = { check_variable = { which = defunct value = 1 } } } }	
				half_southron = { set_variable = { which = defunct value = 1 }  }	
			}
			if = {
				limit = { NOT = { northman_andal = { check_variable = { which = defunct value = 1 } } } }
				northman_andal = { set_variable = { which = defunct value = 1 }  }
			}
			if = {
				limit = { year = 7990 }
				if = {
					limit = { NOT = { essarian = { check_variable = { which = defunct value = 1 } } } }
					essarian = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { gogossosi = { check_variable = { which = defunct value = 1 } } } }
					gogossosi = { set_variable = { which = defunct value = 1 }  }
				}
			}
			if = {
				limit = {
					OR = {
						NOT = { year = 7100 }
						year = 7600 
					}	
				}
				if = {
					limit = { NOT = { dornish_andal = { check_variable = { which = defunct value = 1 } } } }
					dornish_andal = { set_variable = { which = defunct value = 1 }  }
				}
			}	
			if = {
				limit = { NOT = { year = 7600 } }
				if = {
					limit = { NOT = { stone_dornish = { check_variable = { which = defunct value = 1 } } } }
					stone_dornish = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { sand_dornish = { check_variable = { which = defunct value = 1 } } } }
					sand_dornish = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { salt_dornish = { check_variable = { which = defunct value = 1 } } } }
					salt_dornish = { set_variable = { which = defunct value = 1 }  }
				}
			}
			if = {
				limit = { NOT = { year = 4000 } }
				if = {
					limit = { NOT = { pentosi = { check_variable = { which = defunct value = 1 } } } }
					pentosi = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { braavosi = { check_variable = { which = defunct value = 1 } } } }
					braavosi = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { lysene = { check_variable = { which = defunct value = 1 } } } }
					lysene = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { qohorik = { check_variable = { which = defunct value = 1 } } } }
					qohorik = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { norvosi = { check_variable = { which = defunct value = 1 } } } }
					norvosi = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { myrman = { check_variable = { which = defunct value = 1 } } } }
					myrman = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { tyroshi = { check_variable = { which = defunct value = 1 } } } }
					tyroshi = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { volantene = { check_variable = { which = defunct value = 1 } } } }
					volantene = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { lorathi = { check_variable = { which = defunct value = 1 } } } }
					lorathi = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { essarian = { check_variable = { which = defunct value = 1 } } } }
					essarian = { set_variable = { which = defunct value = 1 }  }
				}
				if = {
					limit = { NOT = { gogossosi = { check_variable = { which = defunct value = 1 } } } }
					gogossosi = { set_variable = { which = defunct value = 1 }  }
				}
			}
		}	
		#Dragons disabled
		if = {
			limit = { 
				has_game_rule = { name = dragon_hatching_taming value = off }				
			}
			any_character = {
				limit = { trait = dragon }
				death = yes
			}
			any_character = {
				limit = { trait = dragon_rider }
				remove_trait = dragon_rider
			}
		}
		#Mod random world settings
		if = {
			limit = {
				OR = {
					is_alternate_start = yes
					is_shattered_world = yes
				}
			}
			#Special character traits
			if = {
				limit = {
					OR = {
						has_alternate_start_parameter = { key = special_culture value = animal_kingdoms } 
						has_alternate_start_parameter = { key = special_culture value = animal_world }
						has_alternate_start_parameter = { key = special_culture value = all } 
					}
				}
				any_character = {
					limit = { culture = dragon_culture }			
					while = { #randomise age/size
						count = 250
						limit = { 
							OR = {
								NOT = { father_even_if_dead = { always = yes } }
								father_even_if_dead = {
									is_older_than = PREV
									age_diff = { who = PREV years = 10 } 
								}
							}	
							OR = {
								NOT = { mother_even_if_dead = { always = yes } }
								mother_even_if_dead = {
									is_older_than = PREV
									age_diff = { who = PREV years = 10 } 
								}
							}
							NOT = { age = 250 }
							NOT = { has_character_flag = age_set }
						}					
						random_list = {
							80 = { add_age = 1 }
							1 = { set_character_flag = age_set }
						}						
					}
					clr_character_flag = age_set
					export_to_variable = { which = DragonMartial value = age who = THIS }
					divide_variable = { which = DragonMartial value = 2 }
					while = {
						limit = { NOT = { martial = DragonMartial } }
						random_list = {
							2 = { change_martial = 1 }
							2 = { change_martial = 2 }
							1 = { change_martial = 3 }
							1 = { change_martial = 5 }
							1 = { change_martial = 7 }
							1 = { change_martial = 10 }
							1 = { change_martial = 15 }
						}
					}
					set_variable = { which = DragonMartial value = 0 }
					random_list = {
						1 = { add_trait = dragon_1 }
						1 = { add_trait = dragon_2 }
						1 = { add_trait = dragon_3 }
						1 = { add_trait = dragon_4 }
						1 = { add_trait = dragon_5 }
						1 = { add_trait = dragon_6 }
						1 = { add_trait = dragon_7 }
						1 = { add_trait = dragon_8 }
						1 = { add_trait = dragon_9 }
						1 = { add_trait = dragon_10 }
						1 = { add_trait = dragon_11 }
						1 = { add_trait = dragon_12 }
						1 = { add_trait = dragon_13 }
						1 = { add_trait = dragon_14 }
						1 = { add_trait = dragon_15 }
						1 = { add_trait = dragon_16 }
						1 = { add_trait = dragon_17 }
						1 = { add_trait = dragon_18 }
						1 = { add_trait = dragon_19 }
						1 = { add_trait = dragon_20 }
						1 = { add_trait = dragon_21 }
						1 = { add_trait = dragon_22 }
						1 = { add_trait = dragon_23 }
						1 = { add_trait = dragon_24 }
						1 = { add_trait = dragon_25 }
						1 = { add_trait = dragon_26 }
						1 = { #Balerion
							modifier = {
								factor = 0.05
							}
							add_trait = dragon_27 
						}
					}
					add_trait = dragon
					add_trait = incapable_dragon
					character_event = { id = dragon.0 }
				}
			}
			if = {
				limit = {
					OR = {
						has_alternate_start_parameter = { key = special_culture value = mythological }
						has_alternate_start_parameter = { key = special_culture value = all } 
					}
				}
				any_character = {
					limit = { culture = white_walker }					
					while = { #randomise age/size
						count = 250
						limit = { 
							OR = {
								NOT = { father_even_if_dead = { always = yes } }
								father_even_if_dead = {
									is_older_than = PREV
									age_diff = { who = PREV years = 30 } 
								}
							}	
							OR = {
								NOT = { mother_even_if_dead = { always = yes } }
								mother_even_if_dead = {
									is_older_than = PREV
									age_diff = { who = PREV years = 30 } 
								}
							}
							NOT = { age = 1000 }
							NOT = { has_character_flag = age_set }
						}					
						random_list = {
							100 = { add_age = 4 }
							1 = { set_character_flag = age_set }
						}						
					}
					clr_character_flag = age_set	
					add_trait = white_walker
				}
			}
			spawn_dragons_alt_start_effect = yes	
			if = {
				limit = { has_game_rule = { name = traditional_dynastic_claims value = on } }
				any_playable_ruler = {
					limit = {
						higher_tier_than = DUKE
						is_feudal = yes
						NOT = { government = noble_oligarchy }
						NOT = { government = alliance_government }
						NOT = { government = theocratic_feudal_government }
						NOT = { dynasty = 0 }					
					}
					random = {
						chance = 20
						save_event_target_as = new_bloodline_owner
						primary_title = { save_event_target_as = bloodline_title }
						create_bloodline = { type = dynastic_bl }
						random_owned_bloodline = {
							limit = {
								has_bloodline_flag = dynastic_bloodline
								founder = { character = event_target:new_bloodline_owner }
							}
							set_bloodline_flag = bloodline_to_add_claim
							set_name = [new_bloodline_owner.GetBloodlineName]
							event_target:new_bloodline_owner = {
								any_dynasty_member_even_if_dead = { #Add all dynasts
									add_to_bloodline = PREVPREV
								}
							}
							
						}
						any_demesne_title = {
							limit = {
								tier = PREV
								NOT = {
									holder_scope = {
										any_owned_bloodline = {
											has_bloodline_flag = dynastic_bloodline
											has_bloodline_flag = dynastic_claim_@PREVPREV
										}
									}
								}
							}
							holder_scope = {
								random_owned_bloodline = {
									limit = { has_bloodline_flag = bloodline_to_add_claim }
									set_bloodline_flag = dynastic_claim_@PREVPREV 
								}	
							}
						}	
					}
				}
			}
		}
		#Check for empire religion authority
		any_independent_ruler = {
			limit = { tier = EMPEROR }
			character_event = { id = religious.102 days = 1 }
		}
		#Ensure only proper characters have the mark (appears to spawn randomly in random world)
		if = {
			limit = { is_alternate_start = yes }
			any_character = {
				limit = {
					trait = the_mark
					NOT = { graphical_culture = sistermangfx }
				}
				remove_trait = the_mark
			}
		}	
		#Manage fashionable/groomed
		if = {
			limit = {
				OR = {
					has_dlc = "Holy Fury" 
					has_dlc = "Way of Life"
				}
			}
			any_character = {
				limit = {
					trait = fashionable
				}
				remove_trait = fashionable
				add_trait = groomed
			}	
		}	
		else = {
			any_character = {
				limit = {
					trait = groomed
				}
				add_trait = fashionable
				remove_trait = groomed
			}
		}

		##
		character_event = { id = roberts_rebellion.2 days = 1 } #Day 2 Initialisation
		##
	}
	
	after = {
		if = {
			limit = { year = 8160 }
			d_wolf_pack = {
				holder_scope = {
					dynasty = none
				}
			}
		}
	}
}
#Day 2 Initialisation
character_event = {
	id = roberts_rebellion.2
	desc = "EVTDESCroberts_rebellion.2"
	
	is_triggered_only = yes
	only_rulers = yes
	
	trigger = {
		has_landed_title = e_rebels
	}
	
	option = {
		name = "EVTOPTAroberts_rebellion.1" 	
		##any_playable_ruler does not work for ruler designer characters on day one##	
		any_playable_ruler = {
			limit = { 
				ai = no 
			}	
			if = {
				limit = { trait = house_customizer }
				character_event = { id = customizer_houses.1 }
			}	
			#Check Sword/Egg ownership
			if = {
				limit = { trait = valyrian_steel }
				remove_trait = valyrian_steel
				add_artifact = valyrian_steel
			}
			if = {
				limit = { 
					trait = valyrian_armour
				}
				remove_trait = valyrian_armour
				add_artifact = valyrian_armour
			}
			if = {
				limit = { 
					trait = dragon_egg
				}
				remove_trait = dragon_egg
				add_artifact = dragon_egg
			}
			#Mega war setup
			if = {
				limit = { 
					NOT = { trait = civil_war }
					NOT = { trait = rebel_leader }
					NOT = { has_character_flag = supporting_king }
					NOT = { has_character_flag = neutral }
					NOT = { has_character_flag = against_king }
					OR = {
						AND = {
							independent = yes
							primary_title = { check_variable = { which = "de_facto_empire" value = 1 } }
						}
						liege = { 
							OR = {
								trait = civil_war
								trait = rebel_leader
								has_character_flag = supporting_king
								has_character_flag = neutral
								has_character_flag = against_king
							}	
						}
					}	
				}
				set_character_flag = neutral
			}
			#wildling event
			if = {
				limit = {
					wildling_culture_trigger = yes
				}
				character_event = { id = wildling.1 }
				if = {
					limit = { 
						NOT = { has_game_rule = { name = symmetrical_start value = on } } 
						is_alternate_start = no
					}
					#make sure capital holding has level 1 barracks
					capital_holding = {
						if = {
							limit = {
								holding_type = castle
								NOT = { has_building = ca_wildling_barracks }
							}
							add_building = ca_wildling_barracks
							holder_scope = { character_event = { id = maintenance.34 days = 2 } } #refill levy
						}
					}
				}	
			}
			#pirate event
			if = {
				limit = {
					OR = {
						religion = pirate
						religion = corsair
					}
				}
				character_event = { id = pirate.1 }
				character_event = { id = pirate.199 }
				if = {
					limit = { 
						NOT = { has_game_rule = { name = symmetrical_start value = on } }
						is_alternate_start = no
					}
					#make sure capital holding has level 1 pirate den
					capital_holding = {
						if = {
							limit = {
								holding_type = castle
								NOT = { has_building = ca_asoiaf_pirateshipyard }
							}
							add_building = ca_asoiaf_pirateshipyard
							holder_scope = { character_event = { id = maintenance.34 days = 2 } } #refill levy
						}
					}
				}	
			}
			##Give Slavers some slaves
			if = {
				limit = {
					primary_title = { has_law = slavery_2 }
					NOT = { trait = slave_owner }
					NOT = { has_game_rule = { name = symmetrical_start value = on } }
					NOT = { has_game_rule = { name = slavery value = off } }
					is_alternate_start = no
				}
				add_trait = slave_owner
				character_event = { id = slavery.1000 tooltip = "EVTTOOLTIPSLAVERY1000" }
				character_event = { id = slavery.1000 tooltip = "EVTTOOLTIPSLAVERY1000" }
				character_event = { id = maintenance.34 days = 2 } #refill levy
				character_event = { id = slavery.4004 }
				any_vassal = {
					limit = { 
						is_patrician = yes 
						NOT = { trait = slave_owner }
					}
					add_trait = slave_owner
					character_event = { id = slavery.1000 tooltip = "EVTTOOLTIPSLAVERY1000" }
					character_event = { id = slavery.1000 tooltip = "EVTTOOLTIPSLAVERY1000" }
					character_event = { id = maintenance.34 days = 2 } #refill levy
				}			
			}
			#Night's Watch Initialisation
			if = {
				limit = {
					has_landed_title = d_nightswatch
					NOT = { government = NW_government }
				}
				character_event = { id = nightswatch.999 }
			}
			#High Valyrian Initialisation
			if = {
				limit = {
					culture = high_valyrian
					NOT = { has_dynasty_flag = high_valyrian }
					NOT = { has_character_flag = high_valyrian }
					NOT = { trait = house_customizer }
				}
				character_event = { id = high_valyrian.1 }
			}
			#Royal Proclamations
			if = {
				limit = { tier = EMPEROR }
				character_event = { id = royal_proclamations.998 }
			}
			#Critical events
			character_event = { id = critical.0 }
			#Bastard nickname
			if = {
				limit = { 
					trait = bastard 
					has_nickname = no
				}
				bastard_nickname_ROOT_effect = yes
			}
		}
		##Moved these here in case ruler designer character holds them##
		if = {
			limit = { is_alternate_start = no }
			#Prince of Pentos
			d_prince_pentos = {
				holder_scope = {
					add_weak_claim = k_pentos
					add_trait = disinherited
					recalc_succession = yes
				}
			}
			#Prince of Lorath
			d_prince_lorath = {
				holder_scope = {
					add_weak_claim = k_lorath
					add_trait = disinherited
					recalc_succession = yes
				}
			}
			#Volantis setup
			k_volantis = {
				holder_scope = {
					character_event = { id = volantis.301 days = 1 } #Choose Party
					any_realm_character = { #Correct cultures/religions
						limit = {
							culture = eastern_valyrian
							OR = {
								is_ruler = yes
								NOT = { location = { province_id = 419 } }
							}
							NOT = { dynasty = 174371 }
							NOT = { dynasty = 174372 }
							NOT = { dynasty = 174373 }
							NOT = { dynasty = 174396 }
							NOT = { dynasty = 174397 }
							NOT = { dynasty = 174600 }
							NOT = { dynasty = 174601 }
							NOT = { dynasty = 174602 }
							ai = yes
							NOT = { father_even_if_dead = { ai = no } }
							NOT = { mother_even_if_dead = { ai = no } }
							NOT = { spouse = { ai = no } }
							NOT = { is_patrician = yes }
						}
						culture = volantene
						set_graphical_culture = volantene
						religion = rhllor
					}
					if = { #Select Triarchs
						limit = {
							NOT = {
								any_realm_lord = {
									has_character_flag = triarch
								}
							}
						}
						random_realm_lord = {
							limit = { 
								age = 15
								prisoner = no
								NOT = { trait = incapable }
								can_press_claims_trigger = yes
								NOT = { trait = former_slave }
								true_valyrian_culture_trigger = yes #Must be of Valyrian blood, or not be in a valyrian republic
							}
							set_character_flag = triarch
							give_minor_title = title_triarch
						}
					}	
					if = {
						limit = {
							NOT = {
								any_realm_lord = {
									has_character_flag = triarch
									count = 2
								}
							}
						}
						random_realm_lord = {
							limit = { 
								NOT = { has_character_flag = triarch }
								age = 15
								prisoner = no
								NOT = { trait = incapable }
								can_press_claims_trigger = yes
								NOT = { trait = former_slave }
								true_valyrian_culture_trigger = yes #Must be of Valyrian blood, or not be in a valyrian republic
							}
							set_character_flag = triarch
							give_minor_title = title_triarch
						}
					}	
				}
			}
		}	
		#Hyrkoon courtier maintenance
		any_playable_ruler = {
			limit = { 
				culture_group = hyrkoon_group
			}	
			character_event = { id = essos.52 }
			any_courtier = {
				limit = {
					is_married = yes
					culture_group = hyrkoon_group
					is_female = no
					NOR = {
						trait = eunuch
						is_strong_trigger = yes
						trait = tall
						has_fair_trait_trigger = yes
					}
				}
				random_list = {
					1 = { add_trait = robust }
					2 = { add_trait = strong }
					3 = { add_trait = tall }
					3 = { add_trait = fair }
				}
			}
		}
		#Cultural congenital traits
		any_character = {
			limit = {
				OR = {
					graphical_culture = brindlegfx
					culture = lengi
					graphical_culture = sarnorigfx
					culture = naathi
					graphical_culture = lysenegfx
					graphical_culture = celticgfx
					graphical_culture = ibbenesegfx
					culture = mantaryan
				}
				NOT = { mother_even_if_dead = { always = yes } }
				NOT = { father_even_if_dead = { always = yes } }
				NOT = { real_father_even_if_dead = { always = yes } }
			}
			cultural_congenital_trait_chance_effect = yes
		}	
		# #Make sure all barons are vassalised by the county holder 
		#FIXED IN 2.9
		# any_title = {
			# limit = { tier = COUNT has_holder = yes }
			# holder_scope = { save_event_target_as = my_liege }
			# any_direct_de_jure_vassal_title = {
				# limit = {
					# holder_scope = { 
						# independent = yes 
						# tier = BARON
					# }	
					# NOT = { has_building = ca_sub_barony_ruin }
					# NOT = { has_building = ct_sub_barony_ruin }
				# }
				# holder_scope = { set_defacto_liege = event_target:my_liege }
			# }
		# }	
		#Cull all characters with inappropriate cultures		
		if = {
			limit = { is_alternate_start = no }		
			any_character = {
				limit = {
					is_ruler = no
					NOT = { father_even_if_dead = { always = yes } }
					OR = {
						culture = brindlemen
						culture = islander
						culture_group = winter_group
						culture_group = unoccupied_group
					}
					liege = { 
						NOT = { culture = PREV } 
						capital_scope = { NOT = { culture = PREVPREV } }
					}
				}
				death = { death_reason = death_missing }
			}
		}	
		#Set family heirlooms
		any_character = {
			limit = { 
				any_artifact = { quality >= 3 } 
				NOT = { dynasty = 0 }
			}
			any_artifact = {
				limit = { quality >= 3 }
				set_artifact_flag = heirloom_@PREV
				save_event_target_as = heirloom
				any_landed_title = {
					limit = {
						higher_tier_than = DUKE
						event_target:heirloom = { has_artifact_flag = heirloom_@PREV }
					}
					set_title_flag = has_artifact_claims
					holder_scope = { event_target:heirloom = { set_artifact_flag = title_heirloom_@PREV } }
				}
			}
		}
		#Ai marriage game rule setup
		if = {
			limit = { has_game_rule = { name = ai_female_marriage_correction value = custom } }
			any_player = {
				character_event = { id = GR.566 }
			}
		}
		if = { #Make sure dynamic CoAs triger in random worlds
			limit = { is_alternate_start = yes }
			set_character_flag = alt_start_coa_check
			character_event = { id = dynamic_coa.0 days = 1 }
		}
	}
	after = {
		clr_character_flag = trigger_startup_event
	}
}
#Auto generate wife
character_event = {
	id = roberts_rebellion.150

	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		if = {
			limit = { is_female = no }
			capital_scope = {
				ROOT = {
					if = {
						limit = { age = 80 }
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 85
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}
					else_if = {
						limit = {
							age = 65
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 73
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}
					else_if = {
						limit = {
							age = 50
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 58
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}
					else_if = {
						limit = {
							age = 40
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 46
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}
					else_if = {
						limit = {
							age = 30
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 36
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}
					else_if = {
						limit = {
							age = 20
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 26
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}
					else = {
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = yes
							age = 16
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_wife }
					}	
				}
			}	
			add_spouse = event_target:random_wife
			trigger_switch = {
				on_trigger = tier
				EMPEROR = { 
					prestige = 400 
					event_target:random_wife = { prestige = -500 }
				}
				KING = { 
					prestige = 300 
					event_target:random_wife = { prestige = -400 }
				}
				DUKE = { 
					prestige = 200 
					event_target:random_wife = { prestige = -300 }
				}
				COUNT = { 
					prestige = 100 
					event_target:random_wife = { prestige = -200 }
				}
			}
			any_child_even_if_dead = {
				limit = {
					NOT = { trait = bastard }
					NOT = { trait = child_of_consort }
					NOT = { mother_even_if_dead = { always = yes } }
				}	
				set_mother = event_target:random_wife
			}
			event_target:random_wife = {
				#make sure not too old for children
				while = {
					limit = {
						age = 41
						any_child_even_if_dead = {
							is_alive = yes
							age_diff = { who = PREV years = 41 }
						}
						NOT = {
							any_child_even_if_dead = {
								is_alive = yes
								NOT = { age_diff = { who = PREV years = 14 } }
							}
						}
					}
					add_age = -1
				}
				if = {
					limit = { female_warrior_culture_trigger = yes }
					random_list = {
						15 = { }
						20 = { add_trait = poor_warrior }
						50 = { add_trait = trained_warrior }
						15 = { add_trait = skilled_warrior }
					}
				}
				cultural_congenital_trait_chance_effect = yes
				random = {
					chance = 2
					modifier = {
						factor = 2
						age = 40
					}
					modifier = {
						factor = 2
						age = 50
					}
					modifier = {
						factor = 2.5
						age = 60
					}
					modifier = {
						factor = 1.5
						age = 70
					}
					set_character_flag = no_funeral
					death = yes
					random = {
						chance = 25
						ROOT = { add_trait = widowed }
					}
				}
			}
		}
		else = {
			capital_scope = {
				ROOT = {
					if = {
						limit = { age = 80 }
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 85
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}
					else_if = {
						limit = {
							age = 65
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 73
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}
					else_if = {
						limit = {
							age = 50
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 58
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}
					else_if = {
						limit = {
							age = 40
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 46
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}
					else_if = {
						limit = {
							age = 30
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 36
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}
					else_if = {
						limit = {
							age = 20
						}
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 26
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}
					else = {
						create_character = {
							random_traits = yes
							dynasty = NONE
							female = no
							age = 16
							historical = yes
							culture = PREV
							religion = PREV
						}
						new_character = { save_event_target_as = random_husband }
					}	
				}
			}	
			add_spouse_matrilineal = event_target:random_husband
			trigger_switch = {
				on_trigger = tier
				EMPEROR = { 
					prestige = 400 
					event_target:random_husband = { prestige = -500 }
				}
				KING = { 
					prestige = 300 
					event_target:random_husband = { prestige = -400 }
				}
				DUKE = { 
					prestige = 200 
					event_target:random_husband = { prestige = -300 }
				}
				COUNT = { 
					prestige = 100 
					event_target:random_husband = { prestige = -200 }
				}
			}
			any_child_even_if_dead = {
				limit = {
					NOT = { trait = bastard }
					NOT = { trait = child_of_consort }
					NOT = { father_even_if_dead = { always = yes } }
				}	
				set_father = event_target:random_husband
			}
			event_target:random_husband = {
				#make sure not too old for children
				while = {
					limit = {
						age = 41
						any_child_even_if_dead = {
							is_alive = yes
							age_diff = { who = PREV years = 41 }
						}
						NOT = {
							any_child_even_if_dead = {
								is_alive = yes
								NOT = { age_diff = { who = PREV years = 14 } }
							}
						}
					}
					add_age = -1
				}
				if = {
					limit = { NOT = { female_warrior_culture_trigger = yes } }
					random_list = {
						15 = { }
						20 = { add_trait = poor_warrior }
						50 = { add_trait = trained_warrior }
						15 = { add_trait = skilled_warrior }
					}
				}
				cultural_congenital_trait_chance_effect = yes
				random = {
					chance = 2
					modifier = {
						factor = 2
						age = 40
					}
					modifier = {
						factor = 2
						age = 50
					}
					modifier = {
						factor = 2.5
						age = 60
					}
					modifier = {
						factor = 1.5
						age = 70
					}
					set_character_flag = no_funeral
					death = yes
					random = {
						chance = 25
						ROOT = { add_trait = widowed }
					}
				}
			}
		}
	}
	
	option = {
		name = OK	
	}
}
	
#Auto generate additional children/siblings
character_event = {
	id = roberts_rebellion.151

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		can_press_claims_trigger = yes
		is_theocracy = no
		NOT = { dynasty = 0 }
		OR = { #excluded dynasties
			NOT = { start_date = 7886.1.1 } #not excluded in pre-doom bookmarks
			AND = {					
				NOT = { dynasty = 496 }
				NOT = { dynasty = 52 }
				NOT = { dynasty = 57 }
				NOT = { dynasty = 1 }
				NOT = { dynasty = 107 }
				NOT = { dynasty = 66 }
				NOT = { dynasty = 59 }
				NOT = { dynasty = 1254 }
				NOT = { dynasty = 253 }
				NOT = { dynasty = 285 }
				NOT = { dynasty = 159 }
				NOT = { dynasty = 1544 }
				NOT = { dynasty = 317 }
				NOT = { dynasty = 178 }
				NOT = { dynasty = 190 }
			}
			has_landed_title = e_mexikha #sunset starks exception
		}	
	}
	
	immediate = {
		#CHILDREN
		if = {
			limit = {
				age = 16
				fertility = 0.1
				is_married = yes
				spouse = { 
					is_alive = yes
					fertility = 0.1 
					age = 14
				}	
				NOT = { num_of_children = 3 }
			}
			clear_event_target = second_parent
			spouse = { save_event_target_as = second_parent }
			clear_event_target = my_current_heir
			current_heir = { 
				if = {
					limit = {
						is_child_of = ROOT 
						dynasty = ROOT
						age = 1 
						NOT = { trait = bastard }
						NOT = { trait = legit_bastard }
						NOT = { trait = child_of_consort }
					}
					save_event_target_as = my_current_heir
				}	
			}
			random = {
				chance = 8
				set_character_flag = child_generation_finished
			}
			while = {
				limit = { 
					NOT = { has_character_flag = child_generation_finished } 
					NAND = {
						num_of_children = 1
						OR = {
							NOT = { age = 16 }
							event_target:second_parent = { NOT = { age = 16 } }
							event_target:my_current_heir = { NOT = { age = 2 } }
						}	
					}
					NAND = {
						num_of_children = 2
						OR = {
							NOT = { age = 18 }
							event_target:second_parent = { NOT = { age = 18 } }
							event_target:my_current_heir= { NOT = { age = 4 } }
						}
					}
					NAND = {
						num_of_children = 3
						OR = {
							NOT = { age = 20 }
							event_target:second_parent = { NOT = { age = 20 } }
							event_target:my_current_heir= { NOT = { age = 6 } }
						}
					}
					NAND = {
						num_of_children = 4
						OR = {
							NOT = { age = 22 }
							event_target:second_parent = { NOT = { age = 22 } }
							event_target:my_current_heir= { NOT = { age = 8 } }
						}
					}
					NAND = {
						num_of_children = 5
						OR = {
							NOT = { age = 24 }
							event_target:second_parent = { NOT = { age = 24 } }
							event_target:my_current_heir= { NOT = { age = 10 } }
						}
					}
				}
				count = 6 #Max six
				create_character = {
					random_traits = yes
					dynasty = none
					female = 50
					age = 0
					historical = yes
					culture = ROOT
					religion = ROOT
					genetic_father = ROOT
					genetic_mother = event_target:second_parent
				}
				new_character = { 
					dynasty = ROOT
					if = {
						limit = { ROOT = { is_female = no } }
						set_father = ROOT
						set_mother = event_target:second_parent
					}
					if = {
						limit = { ROOT = { is_female = yes } }
						set_mother = ROOT
						set_father = event_target:second_parent
					}
					while = { #must be at most 40 years younger than mother
						limit = {
							mother_even_if_dead = { age_diff = { who = PREV years = 41 } }
						}
						add_age = 1
					}
					#randomise age
					random_list = {
						1 = {
						}
						1 = { add_age = 1 }
						1 = { add_age = 2 }
						1 = { add_age = 3 }
						1 = { add_age = 4 }
						1 = { add_age = 5 }
						1 = { add_age = 6 }
						1 = { add_age = 7 }
						1 = { add_age = 8 }
						1 = { add_age = 9 }
						1 = { add_age = 10 }
						1 = { add_age = 11 }
						1 = { add_age = 12 }
						1 = { add_age = 13 }
						1 = { add_age = 14 }
						1 = { add_age = 15 }
						1 = { add_age = 16 }
						1 = { add_age = 17 }
						1 = { add_age = 18 }
						1 = { add_age = 19 }
						1 = { add_age = 20 }
						1 = { add_age = 21 }
						1 = { add_age = 22 }
						1 = { add_age = 23 }
						1 = { add_age = 24 }
						1 = { add_age = 25 }
						1 = { add_age = 26 }
						1 = { add_age = 27 }
						1 = { add_age = 28 }
						1 = { add_age = 29 }
						1 = { add_age = 30 }
						1 = { add_age = 31 }
						1 = { add_age = 32 }
						1 = { add_age = 33 }
						1 = { add_age = 34 }
						1 = { add_age = 35 }
						1 = { add_age = 36 }
						1 = { add_age = 37 }
						1 = { add_age = 38 }
						1 = { add_age = 39 }
						1 = { add_age = 40 }
					}
					while = {
						limit = {
							age = 1
							OR = {
								ROOT = {
									NAND = {
										is_older_than = PREV
										age_diff = { who = PREV years = 14 }
									}
								}
								event_target:second_parent = {
									NAND = {
										is_older_than = PREV
										age_diff = { who = PREV years = 14 }
									}
								}
								event_target:my_current_heir = { 
									NAND = {
										is_older_than = PREV
										age_diff = { who = PREV years = 1 }
									}
								}
							}	
						}
						count = 40
						add_age = -1
					}
					#try and make sure not same age as any siblings
					while = {
						limit = { any_sibling_even_if_dead = { NOT = { age_diff = { who = PREV years = 1 } } } }
						count = 3
						random_list = {
							1 = { 
								trigger = { 
									ROOT = { age_diff = { who = PREV years = 20 } } 
									event_target:second_parent = { age_diff = { who = PREV years = 20 } } 
									event_target:my_current_heir = { age_diff = { who = PREV years = 4 } } 
								}
								add_age = 3
							}
							1 = { 
								trigger = { 
									ROOT = { age_diff = { who = PREV years = 18 } } 
									event_target:second_parent = { age_diff = { who = PREV years = 18 } } 
									event_target:my_current_heir = { age_diff = { who = PREV years = 2 } } 
								}
								add_age = 1 
							}
							1 = { 
								trigger = { 
									NOT = { mother_even_if_dead = { age_diff = { who = PREV years = 41 } } } 
								}
								add_age = -1 
							}
							1 = { 
								trigger = { 
									NOT = { mother_even_if_dead = { age_diff = { who = PREV years = 39 } } } 
								}
								add_age = -3
							}
						}
					}
					
					if = {
						limit = { 
							age = 16 
							is_female = no
						}
						if = {
							limit = { religion = the_seven }
							random = {
								chance = 66
								knight_character_effect = yes
							}	
						}
						random_list = {
							15 = { }
							20 = { add_trait = poor_warrior }
							50 = { add_trait = trained_warrior }
							15 = { add_trait = skilled_warrior }
						}
					}	
					else_if = {
						limit = {
							is_female = yes
							OR = {
								female_warrior_culture_trigger = yes
								is_nomadic = yes
								culture_group = dornish
								culture = sarnorian
								culture_group = iron_isles_culture
								culture_group = free_folk
								trait = duelist
							}										
						}
						random_list = {
							15 = { }
							20 = { add_trait = poor_warrior }
							50 = { add_trait = trained_warrior }
							15 = { add_trait = skilled_warrior }
						}
					}
					cultural_congenital_trait_chance_effect = yes
					if = {
						limit = { 
							culture_group = hyrkoon_group 
							is_female = no
						}
						random_list = {
							91 = { 
								if = {
									limit = { age = 13 }
									add_trait = eunuch 
								}	
							}
							1 = { add_trait = robust }
							2 = { add_trait = strong }
							3 = { add_trait = tall }
							3 = { add_trait = fair }
						}
					}
					if = { # Fix for children not getting any traits
						limit = {
							age = 16
							NOR = {
								has_education_diplomacy_trigger = yes
								has_education_martial_trigger = yes
								has_education_learning_trigger = yes
								has_education_stewardship_trigger = yes
							}
						}
						add_random_education_trait = yes
						random_independent_ruler = {
							limit = {
								PREV = {
									can_copy_personality_trait_from = PREV
								}
							}
							PREV = {
								copy_random_personality_trait = PREV
							}
						}
						random_independent_ruler = {
							limit = {
								PREV = {
									can_copy_personality_trait_from = PREV
								}
							}
							PREV = {
								copy_random_personality_trait = PREV
							}
						}
						random_independent_ruler = {
							limit = {
								PREV = {
									can_copy_personality_trait_from = PREV
								}
							}
							PREV = {
								copy_random_personality_trait = PREV
							}
						}
					}
					
					if = {
						limit = {
							age = 10
							NOT = { age = 16 }
							NOT = { personality_traits = 2 }
						}
						random_independent_ruler = {
							limit = {
								PREV = {
									can_copy_personality_trait_from = PREV
								}
							}
							PREV = {
								copy_random_personality_trait = PREV
							}
						}
						random_independent_ruler = {
							limit = {
								PREV = {
									can_copy_personality_trait_from = PREV
								}
							}
							PREV = {
								copy_random_personality_trait = PREV
							}
						}
					}
					
					if = {
						limit = {
							age = 6
							NOT = { age = 10 }
							NOT = { personality_traits = 1 }
						}
						random_independent_ruler = {
							limit = {
								PREV = {
									can_copy_personality_trait_from = PREV
								}
							}
							PREV = {
								copy_random_personality_trait = PREV
							}
						}
					}
				}
				random = {
					chance = 33
					modifier = {
						factor = 1.5
						rules_in_active_region_trigger = no
					}
					modifier = {
						factor = 1.5
						num_of_children = 3
					}
					modifier = {
						factor = 10
						rules_in_active_region_trigger = no
						num_of_children = 3
					}			
					set_character_flag = child_generation_finished
				}			
			}
		}
		clr_character_flag = child_generation_finished
		
		#SIBLINGS
		if = {
			limit = {
				age = 1			
				NOT = { any_sibling_even_if_dead = { count = 2 } }			
				NOT = { 
					any_sibling = {
						is_alive = yes
						is_older_than = ROOT
					}
				}
				NAND = {
					NOT = { age = 3 }
					any_sibling_even_if_dead = { count = 1 }
				}
				OR = {
					father_even_if_dead = { always = yes }
					NOT = { age = 40 }
				}	
				NOT = { trait = bastard }
				NOT = { trait = legit_bastard }
				NOT = { trait = child_of_consort }
				OR = {
					father_even_if_dead = { dynasty = ROOT }
					mother_even_if_dead = { dynasty = ROOT }
					NOR = {
						father_even_if_dead = { always = yes }
						mother_even_if_dead = { always = yes }
					}
				}			
			}	
			random = {
				chance = 92
				if = { #create parents if needed
					limit = { NOT = { father_even_if_dead = { always = yes } } }
					create_character = {
						random_traits = yes
						dynasty = none
						culture = ROOT
						religion = ROOT
					}
					new_character = {
						while = {
							limit = {
								NAND = { 
									could_be_parent_of = PREV
									age_diff = { who = PREV years = 16 } 
								}
							}
							add_age = 1
						}
						if = {
							limit = { ROOT = { NOT = { mother_even_if_dead = { dynasty = ROOT } } } }
							dynasty = ROOT
						}	
						ROOT = { 
							set_father = PREV 
							any_sibling_even_if_dead = {
								limit = {
									NOT = { trait = bastard }
									NOT = { trait = child_of_consort }
									NOT = { father_even_if_dead = { always = yes } }
									NOT = { is_older_than = ROOT } 
								}
								set_father = PREVPREV
							}
						}							
						cultural_congenital_trait_chance_effect = yes
						set_graphical_culture = ROOT
						if = {
							limit = { culture_group = hyrkoon_group }
							random_list = {
								1 = { add_trait = robust }
								2 = { add_trait = strong }
								3 = { add_trait = tall }
								3 = { add_trait = fair }
							}	
						}
						set_character_flag = no_funeral #kill after mother is linked by marriage
					}
				}
				father_even_if_dead = { save_event_target_as = ROOT_father }
				if = {
					limit = { NOT = { mother_even_if_dead = { always = yes } } }
					create_character = {
						random_traits = yes
						dynasty = none
						female = yes
						culture = ROOT
						religion = ROOT
					}
					new_character = {
						while = {
							limit = {
								NAND = { 
									could_be_parent_of = PREV
									age_diff = { who = PREV years = 16 } 
								}
							}
							add_age = 1
						}
						ROOT = { 
							set_mother = PREV 
							any_sibling_even_if_dead = {
								limit = {
									NOT = { trait = bastard }
									NOT = { trait = child_of_consort }
									NOT = { mother_even_if_dead = { always = yes } }
									NOT = { is_older_than = ROOT } 
								}
								set_mother = PREVPREV
							}
						}			
						add_spouse = event_target:ROOT_father
						cultural_congenital_trait_chance_effect = yes
						random = {
							chance = 1
							modifier = {
								factor = 10
								age = 90
							}
							modifier = {
								factor = 1.15
								age = 80
							}
							modifier = {
								factor = 1.4
								age = 70
							}
							modifier = {
								factor = 2
								age = 60
							}
							modifier = {
								factor = 2.5
								age = 50
							}
							modifier = {
								factor = 2.5
								age = 40
							}
							modifier = {
								factor = 4
								age = 30
							}
							set_character_flag = no_funeral
							death = yes
						}
						if = {
							limit = { is_alive = yes }
							add_trait = widowed
						}
					}
				}
				mother_even_if_dead = { save_event_target_as = ROOT_mother }
				father_even_if_dead = {
					if = {
						limit = { has_character_flag = no_funeral }
						death = yes
					}
				}
				while = {
					limit = { 
						NOT = { has_character_flag = sibling_generation_finished } 
						NAND = {
							NOT = { age = 3 }
							any_sibling_even_if_dead = { count = 1 }
						}
						NAND = {
							NOT = { age = 5 }
							any_sibling_even_if_dead = { count = 2 }
						}
						NAND = {
							NOT = { age = 7 }
							any_sibling_even_if_dead = { count = 3 }
						}
						NAND = {
							NOT = { age = 9 }
							any_sibling_even_if_dead = { count = 4 }
						}
						NAND = {
							NOT = { age = 11 }
							any_sibling_even_if_dead = { count = 5 }
						}
					}
					count = 6 #Max six
					create_character = {
						random_traits = yes
						dynasty = none
						female = 50
						age = 0
						historical = yes
						culture = ROOT
						religion = ROOT
						genetic_father = event_target:ROOT_father
						genetic_mother = event_target:ROOT_mother
					}
					new_character = {
						dynasty = ROOT
						while = { #must be at most 12 years younger
							limit = {
								ROOT = { age_diff = { who = PREV years = 13 } }
							}
							add_age = 1
						}
						#randomise age
						random_list = {
							1 = {
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 2 } } }
								add_age = 1
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 3 } } }
								add_age = 2
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 4 } } }
								add_age = 3
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 5 } } }
								add_age = 4
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 6 } } }
								add_age = 5
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 7 } } }
								add_age = 6
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 8 } } }
								add_age = 7
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 9 } } }
								add_age = 8
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 10 } } }
								add_age = 9
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 11 } } }
								add_age = 10
							}
							1 = {
								trigger = { ROOT = { age_diff = { who = PREV years = 12 } } }
								add_age = 11
							}
						}
						#try and make sure not same age as any siblings
						while = {
							limit = { any_sibling_even_if_dead = { NOT = { age_diff = { who = PREV years = 1 } } } }
							count = 4
							random_list = {
								1 = { 
									trigger = { ROOT = { age_diff = { who = PREV years = 4 } } }
									add_age = 3
								}
								1 = { 
									trigger = { ROOT = { age_diff = { who = PREV years = 2 } } }
									add_age = 1 
								}
								1 = { 
									trigger = { NOT = { ROOT = { age_diff = { who = PREV years = 13 } } } }
									add_age = -1 
								}
								1 = { 
									trigger = { NOT = { ROOT = { age_diff = { who = PREV years = 11 } } } }
									add_age = -3
								}
							}
						}
						
						set_father = event_target:ROOT_father
						set_mother = event_target:ROOT_mother
						
						#Add claims
						ROOT = {
							any_demesne_title = {
								limit = { tier = PREV }
								if = {
									limit = {
										OR = {
											has_law = true_cognatic_succession
											AND = {
												PREVPREV = { is_female = no }
												OR = {
													has_law = agnatic_succession
													has_law = cognatic_succession
												}
											}
											AND = {
												PREVPREV = { is_female = yes }
												OR = {
													has_law = enatic_succession
													has_law = enatic_cognatic_succession
												}
											}
										}
									}
									add_pressed_claim = PREVPREV
								}
								else = {
									add_weak_pressed_claim = PREVPREV
								}
							}	
						}
						if = {
							limit = { 
								age = 16 
								is_female = no
							}
							if = {
								limit = { religion = the_seven }
								random = {
									chance = 66
									knight_character_effect = yes
								}	
							}
							random_list = {
								15 = { }
								20 = { add_trait = poor_warrior }
								50 = { add_trait = trained_warrior }
								15 = { add_trait = skilled_warrior }
							}
						}
						else_if = {
							limit = {
								is_female = yes
								OR = {
									female_warrior_culture_trigger = yes
									is_nomadic = yes
									culture_group = dornish
									culture = sarnorian
									culture_group = iron_isles_culture
									culture_group = free_folk
									trait = duelist
								}										
							}
							random_list = {
								15 = { }
								20 = { add_trait = poor_warrior }
								50 = { add_trait = trained_warrior }
								15 = { add_trait = skilled_warrior }
							}
						}
						cultural_congenital_trait_chance_effect = yes
						if = {
							limit = {
								culture_group = hyrkoon_group 
								is_female = no
							}
							random_list = {
								91 = { 
									if = {
										limit = { age = 13 }
										add_trait = eunuch 
									}	
								}
								1 = { add_trait = robust }
								2 = { add_trait = strong }
								3 = { add_trait = tall }
								3 = { add_trait = fair }
							}
						}
						if = { # Fix for children not getting any traits
							limit = {
								age = 16
								NOR = {
									has_education_diplomacy_trigger = yes
									has_education_martial_trigger = yes
									has_education_learning_trigger = yes
									has_education_stewardship_trigger = yes
								}
							}
							add_random_education_trait = yes
							random_independent_ruler = {
								limit = {
									PREV = {
										can_copy_personality_trait_from = PREV
									}
								}
								PREV = {
									copy_random_personality_trait = PREV
								}
							}
							random_independent_ruler = {
								limit = {
									PREV = {
										can_copy_personality_trait_from = PREV
									}
								}
								PREV = {
									copy_random_personality_trait = PREV
								}
							}
							random_independent_ruler = {
								limit = {
									PREV = {
										can_copy_personality_trait_from = PREV
									}
								}
								PREV = {
									copy_random_personality_trait = PREV
								}
							}
						}
						
						if = {
							limit = {
								age = 10
								NOT = { age = 16 }
								NOT = { personality_traits = 2 }
							}
							random_independent_ruler = {
								limit = {
									PREV = {
										can_copy_personality_trait_from = PREV
									}
								}
								PREV = {
									copy_random_personality_trait = PREV
								}
							}
							random_independent_ruler = {
								limit = {
									PREV = {
										can_copy_personality_trait_from = PREV
									}
								}
								PREV = {
									copy_random_personality_trait = PREV
								}
							}
						}
						
						if = {
							limit = {
								age = 6
								NOT = { age = 10 }
								NOT = { personality_traits = 1 }
							}
							random_independent_ruler = {
								limit = {
									PREV = {
										can_copy_personality_trait_from = PREV
									}
								}
								PREV = {
									copy_random_personality_trait = PREV
								}
							}
						}
					}
					random = {
						chance = 33
						modifier = {
							factor = 1.5
							rules_in_active_region_trigger = no
						}
						modifier = {
							factor = 2
							any_sibling_even_if_dead = { count = 3 }
						}
						modifier = {
							factor = 10
							rules_in_active_region_trigger = no
							any_sibling_even_if_dead = { count = 3 }
						}
						set_character_flag = sibling_generation_finished
					}
				}	
				clr_character_flag = sibling_generation_finished
			}
		}
		recalc_succession = yes
	}
	
	option = {
		name = OK	
	}
}
#Rhaegar imprisons Lyanna
character_event = {
	id = roberts_rebellion.3
	desc = "EVTDESCroberts_rebellion.3"
	
	hide_from = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTAroberts_rebellion.3" #Yes
	}

}

#Aerys Targaryen
character_event = {
	id = roberts_rebellion.4
	desc = "EVTDESCroberts_rebellion.4"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTBroberts_rebellion.4" #No
	}
}

#Robert opinions
character_event = {
	id = roberts_rebellion.5
	desc = "EVTDESCroberts_rebellion.5"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.5" #Yes
		custom_tooltip = {
			text = RR_grand_council_warning
		}
	}

}

#Ned's opinions
character_event = {
	id = roberts_rebellion.6
	desc = "EVTDESCroberts_rebellion.6"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.6" #Yes
	}

}

#Jon Arryn's opinions
character_event = {
	id = roberts_rebellion.7
	desc = "EVTDESCroberts_rebellion.7"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.7" #Yes
	}

}

#Tywin's opinions
character_event = {
	id = roberts_rebellion.8
	desc = "EVTDESCroberts_rebellion.8"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.8" #Yes
	}

}

#Doran's opinions
character_event = {
	id = roberts_rebellion.9
	desc = "EVTDESCroberts_rebellion.9"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.9" #Yes		
	}

}

#Balon greyjoy message
character_event = {
	id = roberts_rebellion.10
	desc = "EVTDESCroberts_rebellion.10"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}
	
	option = {
		name = "EVTOPTAroberts_rebellion.10" #Yes					
	}

}

#Mace Tyrell message
character_event = {
	id = roberts_rebellion.11
	desc = "EVTDESCroberts_rebellion.11"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.11" #Yes	
	}

}

#Hoster Tully
character_event = {
	id = roberts_rebellion.12
	desc = "EVTDESCroberts_rebellion.12"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		set_defacto_liege = ROOT
	}

	option = {
		name = "EVTOPTAroberts_rebellion.12" #Yes	
	}
}

###Crowned Stag events
#Robert opinions
character_event = {
	id = roberts_rebellion.13
	desc = "EVTDESCroberts_rebellion.13"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.13" #Yes
	}
}

#Ned's opinions
character_event = {
	id = roberts_rebellion.14
	desc = "EVTDESCroberts_rebellion.14"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.14" #Yes	
	}

}

#Jon Arryn's opinions
character_event = {
	id = roberts_rebellion.15
	desc = "EVTDESCroberts_rebellion.15"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.15" #Yes
	}

}

#Tywin's opinions
character_event = {
	id = roberts_rebellion.16
	desc = "EVTDESCroberts_rebellion.16"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.16" #Yes		
	}

}

#Doran's opinions
character_event = {
	id = roberts_rebellion.17
	desc = "EVTDESCroberts_rebellion.17"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.17" #Yes		
	}

}

#Stannis 
character_event = {
	id = roberts_rebellion.18
	desc = "EVTDESCroberts_rebellion.18"
	picture = GFX_evt_mannis

	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.18"
	}	

}
#Balon greyjoy message
character_event = {
	id = roberts_rebellion.19
	desc = "EVTDESCroberts_rebellion.19"
	
	hide_from = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTAroberts_rebellion.19" #Yes					
	}

}

##Misc
#Hightowers
character_event = {
	id = roberts_rebellion.20
	desc = "EVTDESCroberts_rebellion.20"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.20" #Yes	
		# hidden_tooltip = {
			# b_oldtown = {
				# holder_scope = {
					# give_minor_title = title_commander_city_watch_oldtown
				# }
			# }
		# }	
	}
}
#Glovers
character_event = {
	id = roberts_rebellion.21
	desc = "EVTDESCroberts_rebellion.21"
	
	hide_from = yes

	is_triggered_only = yes
	only_rulers = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.21" #Yes	
		#Forrester
		#create_character = {
		#	dynasty = 1443 
		#	random_traits = yes
		#	age = 30
		#	female = no
		#	religion=old_gods
		#	culture=northman
		#}
		#new_character = {
		#	create_character = {
		#		dynasty = none
		#		random_traits = yes
		#		age = 28
		#		female = yes
		#		religion=old_gods
		#		culture=northman
		#	}
		#	new_character = {
		#		add_spouse = PREV
		#		create_character = {
		#			dynasty = 1443 #Forrester
		#			random_traits = yes
		#			age = 10
		#			female = no
		#			religion=old_gods
		#			culture=northman
		#		}
		#		new_character = {
		#			set_mother = PREV
		#			set_father = PREVPREV
		#		}
		#		create_character = {
		#			dynasty = 1443 #Forrester
		#			random_traits = yes
		#			age = 8
		#			female = yes
		#			religion=old_gods
		#			culture=northman
		#		}
		#		new_character = {
		#			set_mother = PREV
		#			set_father = PREVPREV
		#		}
		#	}
		#}
		#Woods
		#if = {
		#	limit = { NOT = { year = 8253 } }
		#	create_character = {
		#		dynasty = 1444 
		#		random_traits = yes
		#		age = 35
		#		female = no
		#		religion=old_gods
		#		culture=northman
		#	}
		#	new_character = {
		#		create_character = {
		#			dynasty = none
		#			random_traits = yes
		#			age = 31
		#			female = yes
		#			religion=old_gods
		#			culture=northman
		#		}
		#		new_character = {
		#			add_spouse = PREV
		#			create_character = {
		#				dynasty = 1444 #Woods
		#				random_traits = yes
		#				age = 13
		#				female = no
		#				religion=old_gods
		#				culture=northman
		#			}
		#			new_character = {
		#				set_mother = PREV
		#				set_father = PREVPREV
		#			}
		#			create_character = {
		#				dynasty = 1444 #Woods
		#				random_traits = yes
		#				age = 10
		#				female = yes
		#				religion=old_gods
		#				culture=northman
		#			}
		#			new_character = {
		#				set_mother = PREV
		#				set_father = PREVPREV
		#			}
		#		}
		#	}
		#}
		##Branch
		#if = {
		#	limit = { NOT = { year = 8260 } }
		#	create_character = {
		#		dynasty = 1445 
		#		random_traits = yes
		#		age = 33
		#		female = no
		#		religion=old_gods
		#		culture=northman
		#	}
		#	new_character = {
		#		create_character = {
		#			dynasty = none
		#			random_traits = yes
		#			age = 35
		#			female = yes
		#			religion=old_gods
		#			culture=northman
		#		}
		#		new_character = {
		#			add_spouse = PREV
		#			create_character = {
		#				dynasty = 1445 
		#				random_traits = yes
		#				age = 12
		#				female = no
		#				religion=old_gods
		#				culture=northman
		#			}
		#			new_character = {
		#				set_mother = PREV
		#				set_father = PREVPREV
		#			}
		#			create_character = {
		#				dynasty = 1445 
		#				random_traits = yes
		#				age = 13
		#				female = yes
		#				religion=old_gods
		#				culture=northman
		#			}
		#			new_character = {
		#				set_mother = PREV
		#				set_father = PREVPREV
		#			}
		#		}
		#	}
		#}	
		#Bole
		#create_character = {
		#	dynasty = 1446
		#	random_traits = yes
		#	age = 28
		#	female = no
		#	religion=old_gods
		#	culture=northman
		#}
		#new_character = {
		#	create_character = {
		#		dynasty = none
		#		random_traits = yes
		#		age = 27
		#		female = yes
		#		religion=old_gods
		#		culture=northman
		#	}
		#	new_character = {
		#		add_spouse = PREV
		#		create_character = {
		#			dynasty = 1446
		#			random_traits = yes
		#			age = 5
		#			female = no
		#			religion=old_gods
		#			culture=northman
		#		}
		#		new_character = {
		#			set_mother = PREV
		#			set_father = PREVPREV
		#		}
		#		create_character = {
		#			dynasty = 1446
		#			random_traits = yes
		#			age = 3
		#			female = yes
		#			religion=old_gods
		#			culture=northman
		#		}
		#		new_character = {
		#			set_mother = PREV
		#			set_father = PREVPREV
		#		}
		#	}
		#}	
	}
}

#Reeds
character_event = {
	id = roberts_rebellion.22
	desc = "EVTDESCroberts_rebellion.22"
	
	hide_from = yes

	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.22" #Yes	
		#Tamm
		create_character = {
			dynasty = none
			random_traits = yes
			age = 30
			female = no
			religion=old_gods
			culture=crannogman
		}
		new_character = {
			dynasty = 1447
			create_character = {
				dynasty = none
				random_traits = yes
				age = 28
				female = yes
				religion=old_gods
				culture=crannogman
			}
			new_character = {
				random_list = {
					50 = { add_trait = trained_warrior }
					40 = { add_trait = poor_warrior }
					10 = { add_trait = skilled_warrior }
				}
				add_spouse = PREV
				create_character = {
					dynasty = none
					random_traits = yes
					age = 10
					female = no
					religion=old_gods
					culture=crannogman
				}
				new_character = {
					dynasty = 1447
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = none
					random_traits = yes
					age = 8
					female = yes
					religion=old_gods
					culture=crannogman
				}
				new_character = {
					dynasty = 1447
					set_mother = PREV
					set_father = PREVPREV
				}
			}
		}
		#Greengood
		create_character = {
			dynasty = none
			random_traits = yes
			age = 33
			female = no
			religion=old_gods
			culture=crannogman
		}
		new_character = {
			dynasty = 1449 #Greengood 
			create_character = {
				dynasty = none
				random_traits = yes
				age = 35
				female = yes
				religion=old_gods
				culture=crannogman
			}
			new_character = {
				random_list = {
					50 = { add_trait = trained_warrior }
					40 = { add_trait = poor_warrior }
					10 = { add_trait = skilled_warrior }
				}
				add_spouse = PREV
				create_character = {
					dynasty = none
					random_traits = yes
					age = 12
					female = no
					religion=old_gods
					culture=crannogman
				}
				new_character = {
					dynasty = 1449 #Greengood 
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = none
					random_traits = yes
					age = 13
					female = yes
					religion=old_gods
					culture=crannogman
				}
				new_character = {
					dynasty = 1449 #Greengood 
					set_mother = PREV
					set_father = PREVPREV
				}
			}
		}
		#Quagg
		create_character = {
			dynasty = none
			random_traits = yes
			age = 28
			female = no
			religion=old_gods
			culture=crannogman
		}
		new_character = {
			dynasty = 1451 #Quagg
			create_character = {
				dynasty = none
				random_traits = yes
				age = 27
				female = yes
				religion=old_gods
				culture=crannogman
			}
			new_character = {
				add_spouse = PREV
				random_list = {
					50 = { add_trait = trained_warrior }
					40 = { add_trait = poor_warrior }
					10 = { add_trait = skilled_warrior }
				}
				create_character = {
					dynasty = none
					random_traits = yes
					age = 5
					female = no
					religion=old_gods
					culture=crannogman
				}
				new_character = {
					dynasty = 1451 #Quagg
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = none
					random_traits = yes
					age = 3
					female = yes
					religion=old_gods
					culture=crannogman
				}
				new_character = {
					dynasty = 1451 #Quagg
					set_mother = PREV
					set_father = PREVPREV
				}
			}
		}	
	}
}
#Lannisport cadets
character_event = {
	id = roberts_rebellion.23
	
	hide_from = yes
	is_triggered_only = yes
	hide_window = yes
	
	option = {
		name = OK
		#Lanny
		create_character = {
			dynasty = 802043
			random_traits = yes
			female = no
			religion = the_seven
			culture = westerman
			dna=ljjefnamfnm
		}
		new_character = {
			b_lannisporttwo = { gain_title = PREV }
			random_list = {
				50 = { add_trait = trained_warrior }
				40 = { add_trait = poor_warrior }
				10 = { add_trait = skilled_warrior }
			}
			random = {
				chance = 50
				knight_character_effect = yes
			}
			create_character = {
				dynasty = none
				random_traits = yes
				religion = the_seven
				culture = westerman
				female = yes
				dna=ahongqoafqg
			}
			new_character = {
				add_spouse = PREV
				create_character = {
					dynasty = 802043
					random_traits = yes
					age = 3
					female = no
					religion = the_seven
					culture = westerman
					dna=inakhfklfee
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = 802043
					random_traits = yes
					age = 1
					female = yes
					religion = the_seven
					culture = westerman
					dna=ookqpdlqfej
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = 802043
					random_traits = yes
					age = 2
					female = no
					religion = the_seven
					culture = westerman
					dna=bqlajbbnfea
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
			}
		}
		#Lannett
		create_character = {
			dynasty = 802044
			random_traits = yes
			female = no
			religion = the_seven
			culture = westerman
			age = 48
			dna=fgfqqgecfck
		}
		new_character = {
			b_lannisportthree = { gain_title = PREV }
			random_list = {
				50 = { add_trait = trained_warrior }
				40 = { add_trait = poor_warrior }
				10 = { add_trait = skilled_warrior }
			}
			random = {
				chance = 50
				knight_character_effect = yes
			}
			create_character = {
				dynasty = none
				random_traits = yes
				religion = the_seven
				culture = westerman
				female = yes
				age = 50
				dna=ghmfkddjfbh
			}
			new_character = {
				add_spouse = PREV
				create_character = {
					dynasty = 802044
					random_traits = yes
					age = 23
					female = no
					religion = the_seven
					culture = westerman
					dna=pengepkkfhb
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
					random_list = {
						50 = { add_trait = trained_warrior }
						40 = { add_trait = poor_warrior }
						10 = { add_trait = skilled_warrior }
					}
					random = {
						chance = 50
						knight_character_effect = yes
					}
				}
				create_character = {
					dynasty = 802044
					random_traits = yes
					age = 24
					female = yes
					religion = the_seven
					culture = westerman
					dna=jlpoajphfli
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = 802044
					random_traits = yes
					age = 20
					female = no
					religion = the_seven
					culture = westerman
					dna=ihggeaeqfbg
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
					random_list = {
						50 = { add_trait = trained_warrior }
						40 = { add_trait = poor_warrior }
						10 = { add_trait = skilled_warrior }
					}
					random = {
						chance = 50
						knight_character_effect = yes
					}
				}
			}
		}
		#Lantell
		create_character = {
			dynasty = 802045
			random_traits = yes
			female = no
			religion = the_seven
			culture = westerman
			age = 37
			dna=giciekjcfpl
		}
		new_character = {
			random_list = {
				50 = { add_trait = trained_warrior }
				40 = { add_trait = poor_warrior }
				10 = { add_trait = skilled_warrior }
			}
			random = {
				chance = 50
				knight_character_effect = yes
			}
			create_character = {
				dynasty = none
				random_traits = yes
				religion = the_seven
				culture = westerman
				female = yes
				age = 36
				dna=igbnhmkofad
			}
			new_character = {
				add_spouse = PREV
				create_character = {
					dynasty = 802045
					random_traits = yes
					age = 14
					female = no
					religion = the_seven
					culture = westerman
					dna=bbfcajljfob
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = 802045
					random_traits = yes
					age = 10
					female = no
					religion = the_seven
					culture = westerman
					dna=dlhgclpjfbm
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
				create_character = {
					dynasty = 802045
					random_traits = yes
					age = 9
					female = yes
					religion = the_seven
					culture = westerman
					dna=ghidfbkcfpb
				}
				new_character = {
					set_mother = PREV
					set_father = PREVPREV
				}
			}
		}
	}
}
#Robert dish's out titles to brothers
character_event = {
	id = roberts_rebellion.50
	
	is_triggered_only = yes
	
	trigger = { 
		ai = yes
		#OR = {
			character = 317
			#character = 4317
		#}
		any_sibling = {
			OR ={
				character = 4317
				character = 5317
			}	
			is_alive = yes
			can_press_claims_trigger = yes	
			NOT = { character = ROOT }
		}
	}	

	option = {
		name = "EVTOPTA9999002230" #Renly Stormlands, Stannis Dragonstone	
		trigger = {
			character = 317
			any_sibling = {
				character = 4317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
			any_sibling = {
				character = 5317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
		}
		ai_chance = { factor = 80 }
		random_sibling = {
			limit = {
				character = 4317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
			c_dragonstone = { grant_title = PREV }
			d_dragonstone = { grant_title = PREV }
			opinion = {
				modifier = opinion_denied_title
				who = ROOT
				months = 120
				multiplier = 2
			}
			if = {
				limit = { NOT = { liege = { character = ROOT } } }
				set_defacto_liege = ROOT
			}
		}
		random_sibling = {
			limit = {
				character = 5317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
			k_stormlands = { grant_kingdom_w_adjudication = PREV }
			letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
			if = {
				limit = { NOT = { liege = { character = ROOT } } }
				set_defacto_liege = ROOT
			}
		}		
	}
	
	option = {
		name = "EVTOPTB9999002230" #Renly Dragonstone, Stannis Stormlands	
		trigger = {
			character = 317
			any_sibling = {
				character = 4317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
			any_sibling = {
				character = 5317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
		}
		ai_chance = { factor = 20 }
		random_sibling = {
			limit = {
				character = 4317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
			k_stormlands = { grant_kingdom_w_adjudication = PREV }
			letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
			if = {
				limit = { NOT = { liege = { character = ROOT } } }
				set_defacto_liege = ROOT
			}
		}
		random_sibling = {
			limit = {
				character = 5317
				is_alive = yes
				can_press_claims_trigger = yes	
			}
			c_dragonstone = { grant_title = PREV }
			d_dragonstone = { grant_title = PREV }
			if = {
				limit = { NOT = { liege = { character = ROOT } } }
				set_defacto_liege = ROOT
			}		
		}		
	}
	
	option = {
		name = "EVTOPTC9999002230" #One sibling alive, grant Stormlands
		trigger = {
			NOT = {
				any_sibling = {
					OR ={
						character = 4317
						character = 5317
					}	
					is_alive = yes
					can_press_claims_trigger = yes	
					NOT = { character = ROOT }
					count = 2
				}
			}	
		}
		random_sibling = {
			limit = {
				OR ={
					character = 4317
					character = 5317
				}	
				is_alive = yes
				can_press_claims_trigger = yes	
				NOT = { character = ROOT }
			}
			k_stormlands = { grant_kingdom_w_adjudication = PREV }
			letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
			if = {
				limit = { NOT = { liege = { character = ROOT } } }
				set_defacto_liege = ROOT
			}
		}		
	}
}
#Robert died before rebels won- Interregnum
character_event = {
	id = roberts_rebellion.51
	desc = "EVTDESCroberts_rebellion.51"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
	trigger = {
		is_in_interregnum_trigger = yes
	}
	
	immediate = {	
		set_character_flag = interregnum_title_claimant
		b_red_keep = { 
			ROOT = { capital = PREV }
		}
		#Set government type and title
		if = { 
			limit = {
				NOT = { government = feudal_government_LP }
				is_in_interregnum_trigger = yes
			}
			set_government_type = feudal_government_LP
		}
		if = {
			limit = { is_female = no }
			set_special_character_title = LORD_PROTECTOR
		}
		if = {
			limit = { is_female = yes }
			set_special_character_title = LADY_PROTECTOR
		}
		# Law maintenance
		any_demesne_title = { #interregnums always have feudal elective
			limit = { 
				tier = ROOT
				is_variable_equal = { which = "lord_paramount_status" value = 2 }
				NOT = { has_law = succ_feudal_elective }
			}
			add_law = succ_feudal_elective
		}
		primary_title = {	#interregnums always have full council power
			if = {
				limit = { has_law = law_voting_power_0 }
				add_law = law_voting_power_1
				set_title_flag = interregnum_law_voting_power_0
			}
			if = {
				limit = { has_law = diplomacy_voting_power_0 }
				add_law = diplomacy_voting_power_1
				set_title_flag = interregnum_diplomacy_voting_power_0
			}
			if = {
				limit = { has_law = titles_voting_power_0 }
				add_law = titles_voting_power_1
				set_title_flag = interregnum_titles_voting_power_0
			}
			if = {
				limit = { has_law = justice_voting_power_0 }
				add_law = justice_voting_power_1
				set_title_flag = interregnum_justice_voting_power_0
			}			
		}
		recalc_succession = yes
		clr_character_flag = interregnum_regent
		clr_character_flag = interregnum_councillor
		clr_character_flag = interregnum_castellan
		
		#If interregnum has just started, can offer peace to claimants
		if = {
			limit = { NOT = { has_character_flag = suspended_interregnum_council } }
			any_war = {
				if = {
					limit = {
						attacker = { has_claim = event_target:interregnum_primary_title }
						defender = { character = ROOT }
					}
					attacker = { character_event = { id = interregnum.15 days = 2 } }
				}	
			}
		}
		
		set_global_flag = roberts_rebellion_interregnum
		any_playable_ruler = {
			limit = { 
				ai = no 
				NOT = { character = ROOT }
				OR = {
					is_liege_or_above = ROOT
					primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } }
				}
			}
			character_event = { id = roberts_rebellion.52 }
		}
	}
	
	option = {
		name = "EVTOPTAroberts_rebellion.51" #Call a great council
		trigger = { war = no }
		set_character_flag = called_interregnum_council
		clr_character_flag = suspended_interregnum_council
		custom_tooltip = {
			text = TOOLTIPinterregnum.1COUNCIL
			hidden_tooltip = {
				primary_title = { 
					any_character = { #mark all claimants	
						limit = { 
							has_claim = PREV 
							can_press_claims_trigger = yes
							NOT = { dynasty = 496 }
							NOT = { has_character_modifier = deposed_AGOT }
						}
						set_character_flag = interregnum_title_claimant
						add_trait = dead_target
					}
				}
				character_event = { id = interregnum.2 }
			}
		}
		hidden_tooltip = { character_event = { id = interregnum.199 days = 365 } } #check again in a year (failsafe)
	}
	option = {
		name = "EVTOPTBroberts_rebellion.51" 
		trigger = { war = yes }
		primary_title = {
			any_character = {
				limit = { 
					has_claim = PREV 
					can_press_claims_trigger = yes
					OR = {
						ROOT = { war = yes }
						is_ruler = no
						NOT = { vassal_of = ROOT } 
					}
					NOT = { character = ROOT }
					NOT = { has_character_modifier = deposed_AGOT }
				}
				opinion = { who = ROOT modifier = opinion_suspended_council }
			}
		}
		prestige = -75
		hidden_tooltip = {
			set_character_flag = suspended_interregnum_council
			clr_character_flag = called_interregnum_council
			character_event = { id = interregnum.199 days = 365 } #check again in a year
		}
	}
}
character_event = { #inform realm
	id = roberts_rebellion.52
	desc = "EVTDESCroberts_rebellion.51"
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
	option = {
		name = "EVTOPTAroberts_rebellion.51"
		trigger = { FROM = { war = no } }
	}
	option = {
		name = "EVTOPTBroberts_rebellion.52"
		trigger = { FROM = { war = yes } }
	}
}	
character_event = { # Cause it really pisses me off it does not work from the cb
	id = roberts_rebellion.53
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { is_female = no }
			set_special_character_title = LORD_PROTECTOR
		}
		if = {
			limit = { is_female = yes }
			set_special_character_title = LADY_PROTECTOR
		}
	}
	option = {
		name = Ok
	}
}

#Kingswood Broherhood
character_event = {
	id = roberts_rebellion.60
	desc = "EVTDESCroberts_rebellion.60"
	
	hide_from = yes

	is_triggered_only = yes
	
	immediate = {
		create_title = {
			tier = DUKE
			landless = yes
			temporary = yes
			rebel = yes
			culture = ROOT
			name = "KINGSWOOD_BROTHERHOOD"
			holder = THIS
		}
		c_121421 = { move_character = ROOT } #Ulmer
		230 = { #Woodmere
			ROOT = {
				spawn_unit = {
					province = PREV
					home = PREV
					owner = THIS
					leader = THIS
					scaled_by_biggest_garrison = 0.8
					troops = {
						archers = { 6 6 }
						light_cavalry = { 4 4 }
						pikemen = { 5 5 }
						light_infantry = { 5 5 }
					}
					attrition = 1.0
				}
				c_164307 = { #the smiling knight
					move_character = PREV
					spawn_unit = {
						province = PREVPREV
						home = PREVPREV
						owner = PREV
						scaled_by_biggest_garrison = 0.8
						troops = {
							archers = { 6 6 }
							light_cavalry = { 4 4 }
							pikemen = { 5 5 }
							light_infantry = { 5 5 }
						}
						attrition = 1.0
						disband_on_peace = yes
					}
				}
				create_character = {
					name = Oswyn
					random_traits = yes
					dynasty = none
					religion = THIS
					culture = THIS
					female = no
					age = 31
					trait = peasant_leader
					trait = tough_soldier
				}
				new_character = {
					give_nickname = nick_the_thrice_hanged
					random_list = {
						10 = { add_trait = skilled_warrior }
						30 = { add_trait = trained_warrior }
						60 = { add_trait = poor_warrior }
					}
					spawn_unit = {
						province = PREVPREV
						home = PREVPREV
						owner = PREV
						scaled_by_biggest_garrison = 0.8
						troops = {
							archers = { 6 6 }
							light_cavalry = { 4 4 }
							pikemen = { 5 5 }
							light_infantry = { 5 5 }
						}
						attrition = 1.0
						disband_on_peace = yes
					}
				}
			}
			owner = {
				top_liege = {
#					set_defacto_vassal = PREVPREVPREV
					reverse_war = {
						target = ROOT
						casus_belli = peasant_revolt
						thirdparty_title = PREVPREV # The county
					}
					reverse_opinion = {
						who = ROOT
						modifier = opinion_evil_tyrant
					}
				}
			}
		}
	}
	
	option = {
		name = "OK"
	}
}